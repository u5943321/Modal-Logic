\documentclass[letterpaper]{article}

\setlength{\voffset}{-0.5in}
\setlength{\textheight}{710pt}


\usepackage[margin=1in,footskip=0.25in]{geometry}
\usepackage{holtexbasic}
\renewcommand{\HOLConst}[1]{{\textsf{\upshape\small #1}}}
\renewcommand{\HOLinline}[1]{\ensuremath{#1}}
\newcommand{\holthmenv}[1]{\begin{array}[t]{l}#1\end{array}}
\renewcommand{\HOLKeyword}[1]{\texttt{#1}}

\newenvironment{holmath}{\begin{displaymath}\begin{array}{l}}{\end{array}\end{displaymath}\ignorespacesafterend}
\newenvironment{solution}{\begin{proof}[Solution]}{\end{proof}}
\renewcommand{\baselinestretch}{1.4}

\title{Modal Logic Mechanisation in HOL4}
\author{Yiming Xu}
\date{15/6/2018}

\begin{document}

\maketitle

\section{Getting Start}

In our formalisation, we only consider the most standard modal language, called the basic modal language. The basic modal language is defined using a set $\Phi$ of propositional formulas, and only one modal operator $\Diamond$. A formula in the basic modal language is either a propositional symbol $p$ where $p\in \Phi$, or a disjunction $\psi\lor\phi$  of prmodal formulas $\psi$ and $\phi$, or the negation $\lnot \phi$ of a modal formula $\phi$, or else of the form $\Diamond \phi$ obtained by putting a diamond before a modal formula. In the HOL, we create a datatype called `form' of the formulas of this modal language. 

\begin{holmath}
  \HOLthm{chap1.datatype_form}
\end{holmath}

When we say an `$\alpha$ form', we mean a formula in the basic modal language defined on a set $\Phi$ with elements of type $\alpha$, such a set is called an $\alpha$ set, and of type $\alpha \to bool$. Note that we have the notion of the conjunction `$\land$', the implication $\to$, and the truth `$\top$', but they are not primitive, and defined as:

\begin{holmath}
  \HOLthm{chap1.AND_def}
  \HOLthm{chap1.IMP_def}
  \HOLthm{chap1.TRUE_def}
\end{holmath}

As an analogue of the duality of the universal quantifier is the dual of the existential quantifier, in the sense that $\exists$ is defined to be $\lnot\forall\lnot$, we have a modal operator that is dual to the diamond, defined by $\Box \phi:= \lnot\Diamond \lnot \phi$. 

\begin{holmath}
  \HOLthm{chap1.BOX_def}
\end{holmath}

If a modal formula does not use any diamond, then it is also a propositional formula:

\begin{holmath}
  \HOLthm{chap1.propform_def}
\end{holmath}

Knowing how does the modal formulas we are interested in look like, now we want to consider what does they mean. If the modal formula defined using propositional symbols in an $\alpha$-set $\Phi$ is a propositional formula, then to talk about its truth value, what we need is just an assignment of truth value of the propositional letters in $\Phi$, that is, a function $\Phi\to bool$. In the HOL, to define a function from an $\alpha$-set, where $\alpha$ is any type, we are not allowed to only assign values to the elements of the set, instead, we must define the function on for all the terms that has type $\alpha$. Hence we can define the function of evaluating propositional formulas as takes a function $\sigma:\alpha\to bool$ and an $\alpha$ propositional formula, and let it spit out the truth value of the propositional formula under the assignment $\sigma$.

\begin{holmath}
  \HOLthm{chap1.peval_def}
\end{holmath}

However, to interpret a modal formula that involves diamonds, an assignment of truth value is not enough. We need a model of our language. A model of the basic modal language consists of two pieces of informations. The first thing we need is a frame. A frame consists of two things, a set, and a relation defined on elements in this set. If the underlying set of a frame is an $\beta$-set, then the frame is called an $\beta$-frame.
\begin{holmath}
  \HOLthm{chap1.datatype_frame}
\end{holmath}

The second thing we need is a valuation. If we are taking about interpret an $\alpha$-form on a $\beta$-frame, a valuation is a function of type $\beta\to\alpha\to bool$. The information that a valuation gives is that, for each point in the frame, an assignment of truth value of each propositional symbol. We get a model by putting a frame and a valuation together.

\begin{holmath}
  \HOLthm{chap1.datatype_model}
\end{holmath}

When we say an $(\alpha,\beta)$-model, we mean a model for $\alpha$-forms with a $\beta$-set as its underlying set.

Now we can interpret modal formulas in the basic modal language on a model by defining satisfication.
\begin{holmath}
  \HOLthm{chap1.satis_def}
\end{holmath}

(insert an example of model and satisfication here)

Just as in first order logic and propositional logic, we can define the notion of logical equivalence of modal formulas which is an equivalence relation between formulas which use propositional symbols of the same type:

\begin{holmath}
  \HOLthm{IBCDNFrevised.equiv0_def}
  \HOLthm{IBCDNFrevised.equiv0_equiv_on}
\end{holmath}

A notable thing is that \HOLtm{equiv0} need to take a type itself, denoted as \HOLtm{μ}, and if \HOLtm{μ} denotes the type \HOLtm{α} itself and \HOLtm{f1}, \HOLtm{f2} are \HOLtm{β} formulas, \HOLtm{equiv0 μ f1 f2} means for any $(\alpha,\beta)$-model \HOLtm{M} and any world \HOLtm{w} in it, we have \HOLtm{satis  M w f1 <=> satis M w f2}. We are not allowed to omit the \HOLtm{μ} in the definition, since then we will introduce a type, namely the type of models \HOLtm{M}, that only appear on the right hand side but not on the left hand side of the definition, which is not allowed. Also we are not allowed to quantify over the \HOLtm{μ}, and something like `equiv f1 f2 $\Leftrightarrow$ !$\mu$. equiv0 $\mu$ f1 f2' is also not allowed. This is actually a inconvenience of the HOL, since when we mention equivalence of formulas in usual mathematical language, we are implicitly taking about the class of all models, but the constrain here bans us from talking about all models at once.

We can immediately prove that for $\mu$ denotes any type, if \HOLtm{equiv0 μ f g} then \HOLtm{equiv0 μ (DIAM f) (DIAM g)}, but the converse does not hold under our definition. In the usual mathematical notion of equivalence, if two diamond formulas \HOLtm{DIAM f} and \HOLtm{DIAM g} are equivalent, then \HOLtm{f} and \HOLtm{g} must be equivalent. It is because if $f$ and $g$ are not equivalent, then there eixsts a model \HOLtm{M} and a world $w$ such that $w$ satisfies $f$ but not $g$, then we can attach a world that is only linked to $w$, and the world we add is a witness of the fact that \HOLtm{DIAM f} and \HOLtm{DIAM g} are not equivalent. But under our definition in the HOL, if the $\mu$ denotes a finite type, then it is possible that we have \HOLtm{equiv0 μ (DIAM f) (DIAM g)} but \HOLtm{¬equiv0 μ f g}. For example, consider the type that has only two inhabitants $a,b$, then in the model below, we have \HOLtm{equiv0 μ (DIAM (VAR p)) (DIAM (VAR q))} but \HOLtm{¬equiv0 μ (VAR p) (VAR q)}.

(add the picture of example, how to draw it?)

As the situition above is only because of our special definition, such case is uninteresting. For any model, regardless its world set is of a finite type or not, we can always create a copy of the model in an infinite type. So it is harmless to just consider equivalence of formulas for models whose underlying set is of an infinite type. When $\mu$ denotes an infinite type, as we can always come up with a fresh world that allows the proof of equivalence between $f$ and $g$ from the equivalence of $\Diamond f$ and $\Diamond g$ as in the usual sense to go through, we do have a double implication:

\begin{holmath}
  \HOLthm{chap2_3.equiv0_DIAM}
\end{holmath}


Given a modal formula, we can extract the set of propositional symbols appear in it, as:
\begin{holmath}
  \HOLthm{chap1.prop_letters_def}
\end{holmath}

Then we can show when evaluating a formula $\phi$ on a model, the only relevant information in the valuation is the assignment it makes to the propositional letters actually occurring in $\phi$:

\begin{holmath}
  \HOLthm{chap1.exercise_1_3_1}
\end{holmath}

In particular, if we are interpreting a propositional formula, then we do not need the relation on the model, as we can prove from definition:

\begin{holmath}
  \HOLthm{chap2_3.peval_satis}
\end{holmath}

Moreover, we only need the truth values of the propositional symbols that appears in the formula:

\begin{holmath}
  \HOLthm{chap2_3.peval_satis_strengthen}
\end{holmath}

One may confused why are we allowed to write $\lambda \ a. w \in M.valt \ a) \cap s$ here, for $\lambda \ a. (w \in M.valt\ a)$ is a function but $s$ is a set. This is because both the $\alpha$-set $s$ and the function $\lambda \ a. (w \in M.valt)$ has type $\alpha\to bool$, so they can be feeded to the function $\cap$, which has type $(\alpha\to bool)\to (\alpha\to bool)\to (\alpha\to bool)$. Hence for the set $s$, we can either view it as a collection of elements of type $\alpha$, or a function that assigns each term of type $\alpha$ a truth value, where the truth value assigned to $a:\alpha$ is $T$ if and only if $a\in s$.

(change subforms to propsyms later?)

\section{Invariant results and bisimulations}


The key concept we are interested in this chapter is called `modal equivalent', by `two worlds $w\in M.frame.world,w'\in M'.frame.world$ are modal equivalent', we mean they satisfies exactly the same modal formulas.

\begin{holmath}
  \HOLthm{chap2_5.modal_eq_tau}
\end{holmath}

In this chapter, we investigate when can we get modal equivalence. In the first section, we talk about how can we get new models from old models without affect modal satisfication, and then we introduce morphisms between models, and find out under which condition we can map a point of a model to another model and preserve satisfication. In the second section, we investigate a kind of relation between models, called bisimulation, that gives arise to modal equivalence, in the sense of two worlds that are related by a bisimulation satisfies the same modal formulas.


\subsection{Operations on models}

Here we introduce two operations on models, called disjoint union and generated submodels respectively. 

The operation on models that leads to invarience of formulas in the most straightforward way is the disjoint union:

\begin{holmath}
   \HOLthm[def]{chap2_1.DU_def}
\end{holmath} 


Disjoint union is defined as a function that takes a function that takes a function $f:\beta\to (\alpha,\gamma)$-model and a $\beta$-set $dom$, which plays the role of the index set that we take the disjoint union over. The function $f$ are defined for all terms of type $\beta$, but actually we only need its value on elements in $dom$. Given a family of models indexed by the set $dom$, the world set of the disjoint union of this family has elements of form $(i,w)$ where $i\in dom$ and $w\in (f \ i).frame.world$. For a propositional letter $p$ and a world $(i,w)$, we have $DU \ (f,dom).valt \ p\ (i,w)$ iff $(f \ i).valt \ p \ w$, and $DU \ (f,dom).rel \ (i,w) \ (i',w')$ iff $i=i'$ and $(f\ i).frame.rel \ w \ w'$, means that $(i,w)$ and $(i',w')$ come from the same model and are related by the relation in that model. 

The disjoint union does nothing except for collecting a set of models together, so it is unsurprising that we can prove by induction that:

\begin{holmath}
  \HOLthm{chap2_1.prop_2_3}
\end{holmath}

Disjoint union is the operation we use when we want to expand out scope from a smaller model to a large model. Accordingly, we have an operation that allows us to restrict our scope to a smaller model, this is called `generated submodel' construction. 

When we say `$M_1$ is a submodel of $M_2$, we mean $M_1$ is a part of $M_2$.

\begin{holmath}
  \HOLthm[def]{chap2_1.SUBMODEL_def}
\end{holmath}

It is not necessary that submodel construction preserves modal satisfication, since we can discard relations between worlds and hence destroy the satisfication of formulas with diamonds. 


%(Give an easy example?)

But after adding some constrains to the relations that we need to preserve, we can have a special kind of submodels, called generated submodels, that preserves modal satisfication.

\begin{holmath}
  \HOLthm{chap2_1.GENSUBMODEL_def}
\end{holmath}

Note that for a model $M_1$ to be a generated submodel of $M_2$, we only require all the worlds $w'$ which have a link from a world $w$ in $M_1$ to be also included in the world set of $M_1$, and we are allowed to completely ignore everthing that is linked to a world in $M_1$. This is because modal formulas cannot `look back', in the sense that linking or discard links to a world does not change the set of satisfied formulas at the world. 

%(prove a little proposition about it?)

Also by induction, we can prove the invariance of modal satisfication under taking generated submodels:

\begin{holmath}
  \HOLthm{chap2_1.prop_2_6}
\end{holmath}


\subsection{Morphisms between models}

In this section, we talk about various kind of `morphisms' between models. Similar as in mathematics, the notion of `morphism' here is used to describe maps that preserves structures. For instance, a homomorphism is a rather notion of `structure-preserving':

\begin{holmath}
  \HOLthm{chap2_1.hom_def}
\end{holmath}

Although a homomorphism preserves link between worlds in the source model, we allow the existence of extra link in the target model which has no counterpart in the source. Because of this, we cannot guarentee any world in the source is mapped to a world that satisfies exactly the same set of modal formulas under a homomorphism. As an attempt to obtain an equivlence, we strongthen the condition of being a homomorphism, and what we get after strengthening is called a strong homomorphism:

\begin{holmath}
  \HOLthm[def]{chap2_1.strong_hom_def}
\end{holmath}

A strong homomorphism that is a bijection on the world set is called an isomorphism, and an isomorphism will certainly preserves everthing. Just for the sake of modal equivalence, we do not really require an isomorphism, instead, a surjective strong morphism is enough:

\begin{holmath}
   \HOLthm{chap2_1.prop_2_9}
\end{holmath}

Now we have a desired modal equivalence from strong homomorphism. The problem is that the condition of being a strong homomorphism is too strong. We want a suitably weakened condition on a morphism that gives arise of such equivalence, our answer is bounded morphism:

\begin{holmath}
   \HOLthm[def]{chap2_1.bounded_mor_def}
\end{holmath}

%(the book says many invarient map are not strong homomorphism, but do not say every map that give arise to equivalence is bounded morphism, strongthen into a characterisation?)

The invariance result that bounded morphism gives is stated as:

\begin{holmath}
  \HOLthm{chap2_1.prop_2_14}
\end{holmath}


As an application, we will use it to prove the tree-like property of modal formulas. The tree-like property of modal formula says that for any formula $\phi$ satisfied on any point in any model, there exists a tree-like model such that $\phi$ is satisfied at the root of the tree. As the name indicates, a tree-like model is a model such that its underlying frame is a tree. Formally, a tree is defined as:

\begin{holmath}
   \HOLthm[def]{chap2_1.tree_def}
\end{holmath}

Here \HOLtm{RTC} denotes the reflexive and transitive closure, and \HOLtm{RESTRICT} is a function that takes a relation and a set and return a relation that can only possibly hold on the set we give:

\begin{holmath}
  \HOLthm[def]{chap2_1.RESTRICT_def}
\end{holmath}

We read `$tree \ S \ r$' as `$S$ is a tree with root $r$'. By definition, any tree like model is rooted. An induction on reflextive and transitive closure proves a tree has no loop:

\begin{holmath}
  \HOLthm{chap2_1.tree_no_loop}
\end{holmath}


We now prove the tree-like property of modal formulas:

\begin{holmath}
  \HOLthm{chap2_1.prop_2_15_corollary}
\end{holmath}

Proof:
  Suppose \HOLtm{satis M w phi} By the invariance result of rooted model, we have \HOLtm{satis M' w phi} where \HOLtm{M} is the rooted model generated by \HOLtm{w}. By the invariance result for bounded morphisms, it suffices to prove \HOLtm{M'} is the image of some bounded morphism from some tree-like model where the root of the tree is mapped to the root of \HOLtm{M'}. We construct such a model \HOLtm{M''} as follows: Take the set of worlds to be the finite sequences [$w=u_0;u_1;\cdots ;u_n$] such that $n>0$ and $M.frame.rel \ u_i\ u_{i+1}$ for all $i$. Define $M''.frame.rel \ [w;u_1;\cdots ;u_n]\ [w;v_1;\cdots ;v_m]$ iff $m=n+1$, $m_i=v_i$ for $i\le n$ and $M.frame.rel \ u_n\ v_m$. The valuation is given by $[w;u_1;\cdots;u_n]\in M''.valt \ p$ iff $u_n\in M.valt \ p$. In the HOL, such a model looks like:

\begin{holmath}
  \HOLthm[def]{chap2_1.bounded_preimage_rooted_def}
\end{holmath}  

It is straightforward to check the map that sends a world in \HOLtm{bounded_preimage_rooted M' w} to its last member is a bounded morphism, and $[w]$ in \HOLtm{M''} is sent to $w$ in \HOLtm{M'}, as desired.



\subsection{Bisimulation}

The three approachs to obtain modal equivalence has a common feature: all of them leads to a relation between models such that related states satisfies exactly the same set of propositional letters, and once we are able to make a transition in one model, we can make a corresponding transition in the other. This observation leads us to the concept of bisimulation: 

\begin{holmath}
  \HOLthm[def]{chap2_2.bisim_def}
\end{holmath}

If we have \HOLtm{bisim Z M M'}, it means that \HOLtm{Z} is a bisimulation relation between worlds in \HOLtm{M} and \HOLtm{M'}. We require any two worlds related by a bisimulation to have same atomic information and matching transition possibilities. We can see all of the three constructions we introduced before give arise to bisimulations:

\begin{holmath}
  \HOLthm{chap2_2.prop_2_19_ii}
  \HOLthm{chap2_2.prop_2_19_iii}
  \HOLthm{chap2_2.prop_2_19_iv}
\end{holmath}

Proof: For (i), the bisimulation relation is \HOLtm{λa b. (b = (i, a))}, which is linking a world to its corresponding copy in the disjoint union. For (ii), the relation is \HOLtm{λn1 n2. n1 = n2}. And for (iii), the relation is \HOLtm{λn1 n2. (n2 = f n1)}


The clauses on forth and back condition for a bisimulation relation provide precisely the information to push the induction on formula for proving the following invariance theorem about bisimulations through:

\begin{holmath}
  \HOLthm{chap2_2.thm_2_20}
\end{holmath}

The theorem above provides alternative proofs to the invariance theorems for disjoint union, generated submodels, and bounded morphisms. Hence we can say the three former constructions is actually `the same thing'. But it is not the end of the story. A natural question to ask is : is bisimulation and modal equivalence the `same thing'? More precisely, a bisimulation will always give a modal equivalence, conversely, is that the fact that a modal equivalence always give a bisimulation?

The answer is no. Nonetheless, we can prove the converse of the theorem above with an extra condition on the models. A model \HOLtm{M} is called image finite if for any world \HOLtm{w IN M.frame.world}, there are only finitely many worlds in \HOLtm{M} that is related to \HOLtm{w}.

\begin{holmath}
  \HOLthm[def]{chap2_2.image_finite_def}
\end{holmath}

Our main theorem is called Hennessy-Milner theorem, it says that for image finite models, modal equivalence and bisimulation coincides:

\begin{holmath}
  \HOLthm{chap2_2.thm_2_24}
\end{holmath}

Proof:
The implication from right to left is just the invariance theorem for bisimulation. We prove the implication from left to right. Given \HOLtm{w} and \HOLtm{w'} are worlds in \HOLtm{M} and \HOLtm{M'} which are modal equivalent, we prove the relation \HOLtm{λn1 n2. (!form. satis M n1 form <=> satis M' n2 form)} gives a bisimulation. The first clause is immediate to check. For the second one, assume \HOLtm{modal_eq M M' n1 n2} and \HOLtm{M.frame.rel n1 n1'} for some \HOLtm{n1' IN M.frame.world}, we prove the existence of the world \HOLtm{n2' IN M'.frame.world} such that \HOLtm{M'.frame.rel n2 n2'} and \HOLtm{modal_eq M M' n1' n2'}. Suppose such a \HOLtm{n2'} does not exist, we derive a contradiction. Consider the set $S :=$\HOLtm{ u' IN M'.frame.world /\ M'.frame.rel n2 u' }%how to do set!!!
, the first claim is that this set is finite and nonempty. Finiteness comes from the fact that \HOLtm{M'} is image finite, and if the set is empty, then \HOLtm{BOX FALSE} will be a formula which holds for \HOLtm{n2} but not for \HOLtm{n1}, contradicts the modal equivalence between \HOLtm{n1} and \HOLtm{n2}. By assumption, for each world in $S$, there is a formula \HOLtm{phi} such that \HOLtm{satis M n1' phi} but \HOLtm{¬satis M' n2' phi}. As the set $S$ is finite, the set of such \HOLtm{phi}s is finite. Then we can take the conjunction of such \HOLtm{phi}s to obtain a formula \HOLtm{psi}. Then we will have \HOLtm{satis M n1 (DIAM psi)} but \HOLtm{¬satis M n2 (DIAM psi)}.

The trick is what to do to capture the big conjunction. Certainly we can define a big conjunction inductively as a function that takes a finite set and give us the formula that conjuncts them together, but here is a much more direct approach such that allows us to directly obtain the \HOLtm{psi}. We can prove:

\begin{holmath}
  \HOLthm{chap2_2.FINITE_BIGCONJ}
\end{holmath}

Using this lemma, we obtain the \HOLtm{psi} we want by plugging in $S$ to be the $s$. 

\section{Finite model property}

In this chapter, we prove the finite model property of our modal language, which says if a modal formula is satisfied on an arbitary mode, then it can be satisfied on a finite model, where finite model means the finitness of the set of worlds. We will discuss two methods for building finite models for satisfiable modal formulas, namely via filteration and selection.

\subsection{Finite model property via filteration}

One way to get a finite model is by taking the quotient of the world set. The quotient model we will get is called filtration of a model. The equivalence relation that we will use for taking the quotient is defined using the concept of `closed under subformulas'. Firstly, subformulas is a function that takes a formula and gives a set of the subformulas of this formula, defined by:

\begin{holmath}
  \HOLthm[def]{chap2_3.subforms_def}
\end{holmath}

The definition says a subformula of a formula is a part of a formula which is itself a formula. Some properties of subformulas can be proved immediately, for instance, we have any formula is a subformula of itself. Also subformulas are transitive, and the set of subformulas for any formula is finite. 

\begin{holmath}
  \HOLthm{chap2_3.subforms_phi_phi}
  \HOLthm{chap2_3.subforms_trans}
  \HOLthm{chap2_3.subforms_FINITE}
\end{holmath}

We say a set \HOLtm{Σ} is closed under formula if for any formula \HOLtm{phi} in the set, any subformula of \HOLtm{phi} is also in \HOLtm{Σ}.

\begin{holmath}
  \HOLthm[def]{chap2_3.CUS_def}
\end{holmath}

We can easily check the set of subformulas of any formulas is closed under subformulas:

\begin{holmath}
  \HOLthm{chap2_3.subforms_phi_CUS}
\end{holmath}

And for a model \HOLtm{M}, the equivalence relation we will use to filtrate its world set is:

\begin{holmath}
  \HOLthm[def]{chap2_3.REL_CUS_def}
\end{holmath}


Under this equivalence relation, for any world \HOLtm{w IN M.frame.world}, the equivalence class it belongs to looks like:

\begin{holmath}
  \HOLthm[def]{chap2_3.EC_CUS_def}
\end{holmath}

We can take these equivalence class to be the set of worlds for the filtrated model, but then the model we get will have different type from the original model. To avoid changing the type, we define \HOLtm{EC_REP Σ M w} to be the representative from the equivalence class where \HOLtm{w} lives in, and we will use \HOLtm{EC_REP_SET Σ M} to be the set of worlds for the filtrated model.

\begin{holmath}
  \HOLthm[def]{chap2_3.EC_REP_def}
  \HOLthm[def]{chap2_3.EC_REP_SET_def}
\end{holmath}

The definition of filtration of a model \HOLtm{M} via a subformula-closed set is given by a relation, we read as \HOLtm{filtration M Σ} $FLT$ as `$FLT$ is a filteration of \HOLtm{M} under \HOLtm{Σ}.

\begin{holmath}
  \HOLthm[def]{chap2_3.filtration_def}
\end{holmath}

The definition above forces filtration to only make sense for subformula closed sets. For any model \HOLtm{M} and set \HOLtm{Σ} which is closed under subformulas, we can find some model such that it is a filtration of \HOLtm{M} under \HOLtm{Σ}. One construction of filtration is given by:

\begin{holmath}
  \HOLthm[def]{chap2_3.FLT_def}
\end{holmath}

In fact, it is not the fact that we always have a unique filtration of a model under a subformula closed set, but we will just use the one defined above. It is routine to check the above definition does give a filtration:

\begin{holmath}
  \HOLthm{chap2_3.FLT_EXISTS}
\end{holmath}

We are interested in two properties of filtration of models that directly give the proof of finite model property. Firstly, filtrating a model using a finite set gives a finite model:

\begin{holmath}
  \HOLthm{chap2_3.prop_2_38}
\end{holmath}

Proof: As \HOLtm{Σ} is finite, it suffices to give an injection from the world set of $FLT$ to \HOLtm{POW Σ}. Such an injection is given by sending a world $w$ to the set of formulas in \HOLtm{Σ} that is satisfies at $w$. % unable to use set...


Secondly, we need the satisfication of modal formula to be preserved under filtration, in the following sense:

\begin{holmath}
  \HOLthm{chap2_3.thm_2_39}
\end{holmath}


Putting the last two theorems together and we get the finite model property via filtration:

\begin{holmath}
  \HOLthm{chap2_3.thm_2_41}
\end{holmath}

\subsection{Finite model property via selection}

Another method to build finite models for an arbitary model is by selection. The intuition of this method is that only finitely many diamonds can occur in a modal formula, so any formula can only capture the information of finitely depth. To make the notion of `depth' precise, we define the degree of a modal formula, which count the diamonds appear in a model formula and hence measure how much of the model can a modal formula see from the current state:

\begin{holmath}
  \HOLthm[def]{chap2_3.DEG_def}
\end{holmath}

A modal formula of degree zero is exactly a propositional formula:

\begin{holmath}
  \HOLthm{chap2_3.DEG_0_propform}
\end{holmath}

The crucial fact that we will use about the degree of formulas is the following lemma:

\begin{holmath}
  \HOLthm{chap2_3.prop_2_29_strengthen}
\end{holmath}

The proof of this lemma is by induction on the degree $n$. We prove it in the following interlude:

\subsection{Interlude I: Finiteness of non-equivalent modal formulas in each degree}

\subsubsection{Base case}
For the base case, we need to prove if we only use propositional letters in $s$ where $s$ is a finite set, then up to equivalence, we can only onbtain finitely many propositional formulas. To prove this, it suffices to find out an injection from the set of equivalence class of propositional formulas that only uses propositional letters in $s$ to a finite set. We will prove the function that sends an equivalence class of formulas to its image under the function $\lambda f. \{\sigma \mid peval\ \sigma\ f\} \cap (POW \ s)$, which sends a formula $f$ to the set $\{\sigma \mid peval\ \sigma\ f\} \cap (POW \ s)$ of assignments of truth value on propositional letters in $s$ that makes $f$ holds, is an injection to the finite set \HOLtm{POW(POW(POW(s)))}. We can see the function we define has correct codomain: A formula $f$ is sent to a set of subsets of $s$, which is an element of \HOLtm{POW(POW(s))}, so a equivalence class has image as a set of elements in \HOLtm{POW(POW (s))}, which lies in \HOLtm{POW(POW(POW(s)))}.

Let us firstly investigate what the function $\lambda f. \{\sigma \mid peval\ \sigma\ f\} \cap (POW \ s)$ does. We claim the image of each equivalence class of this function is a singleton:

\begin{holmath}
  \HOLthm{chap2_3.IMAGE_peval_singlton_strengthen}
\end{holmath}

Indeed, if two $f1$ and $f2$ formulas are equivalent, then for any assignment of truth value of propositional symbols, it makes $f1$ true iff it makes $f2$ true:

\begin{holmath}
  \HOLthm{chap2_3.peval_equiv0}
\end{holmath}

It is because if we have a \HOLtm{peval σ f1 /\ ¬peval σ f2}, then we can construct a model with only one world $w$, no relation, and define the valuation at $w$ for propositional symbols to be $\sigma$. Then by \texttt{peval_satis}, we get \HOLtm{satis M w f1 /\ ¬satis M w f2}, a contradiction. As a consequence, we have:

\begin{holmath}
  \HOLthm{chap2_3.partition_to_peval_well_defined}
\end{holmath}

which says if two formulas are equivalent, then the sets of valuations that makes them hold are identical. As a consequence, these two sets will still be equal after taking inter section with $POW\ s$. This proves \texttt{IMAGE_peval_singlton_strengthen}.

Recall we proved the condition for a propositional formula to hold as the lemma \texttt{peval_satis_strengthen}, it gives arise to this useful lemma:

\begin{holmath}
  \HOLthm{chap2_3.equiv0_peval_strengthen}
\end{holmath}

Proof: Suppose \HOLtm{satis M w f1} for some model \HOLtm{M}, then by \texttt{peval_satis_strengthen}, we have \HOLtm{peval ((λa. w IN M.valt a) INTER s) f1}. As \HOLtm{(λa. w IN M.valt a) INTER s} gives a subset of $s$, we conclude \HOLtm{peval ((λa. w IN M.valt a) INTER s) f2} by assumption, and then \HOLtm{satis M w f2} by \texttt{peval_satis_strengthen} again. The other direction is the same.


We can now prove the injection:

\begin{holmath}
  \HOLthm{chap2_3.INJ_peval_partition_strengthen}
\end{holmath}

Proof: If two equivalence classes represented by $x$ and $x'$ respectively has identical image under the function $\lambda f. \{s \mid peval\ s f\} \cap POW \ s$, then by \texttt{IMAGE_peval_singlton_strengthen}, it gives $ \{\{\sigma \mid peval\ \sigma x\} \cap POW\ s\}$. This means \HOLtm{!σ. σ IN (POW s) ==> peval σ x <=> peval σ x'}, which means $x$ and $x'$ are equivalent by \texttt{equiv0_peval_strengthen}.



\subsubsection{Step case}

The key observation for proving the step case is that any formulas which only uses propositional letters in a fixed finite set $ss$ and of degree no more than $n+1$ is obtained by boolean combination on the set $s$ formed by formulas of form \HOLtm{DIAM phi} which also only uses propositional letters in $ss$ where \HOLtm{DEG phi <= n} and propositional letters in $ss$. Saying a formula $f$ is a boolean combination of a set $s$ of formulas is to say $f$ is either itself an element in $s$, or can be obtained by combining elements in $s$ using the connectives $\lnot$ and $\lor$. We define boolean combination as an inductive relation, where \HOLtm{IBC f s} reads `$f$ is a boolean combination of elements in the set $s$':

\begin{holmath}
  \HOLthm{IBCDNFrevised.IBC_rules}
  \HOLthm{IBCDNFrevised.IBC_ind}
  \HOLthm{IBCDNFrevised.IBC_cases}
\end{holmath}

We can prove our claim in the last paragraph with induction:

\begin{holmath}
  \HOLthm{chap2_3.DEG_IBC_strengthen}
\end{holmath}


Observe a formula which is a boolean combinations on an empty set is either equivalent to $\bot$ or $\top$:

\begin{holmath}
  \HOLthm{chap2_3.IBC_EMPTY_lemma}
\end{holmath}

so we are interested in boolean combination of non-empty sets along our proof, and leave the empty case to be treat separately at the very end. Our aim is to prove the set of boolean combinations on a set which contains only finitely many non-equivalent formulas only contain finitely many non-equivalent formulas:

\begin{holmath}
  \HOLthm{chap2_3.FINITE_FINITE_IBC}
\end{holmath}

Note that it suffices to prove the set of formulas obtained by boolean combination on a finite set is finite up to equivalence. Since then as $fs$ have only finitely many non-equivalent formulas, the set \HOLtm{IMAGE CHOICE (fs//E μ)} of representatives of the equivalence classes is finite. There is a surjection $\lambda s. \{y \mid IBC\ y\ fs \land !f. f \in s \implies equiv0\ \mu\ y\ f\}$ from 
$\{f \mid IBC\ f\ (IMAGE\ CHOICE\ (fs//E\ \mu))\}//E\ \mu$ to $\{f \mid IBC\ f\ fs\}//E\ \mu$ is a surjection, showing the codomain is finite. 

The strategy we used to prove this is to prove that any formula obtained by a boolean combination on a set is equivalent to a formula in disjunction normal form on the same set. The disjunction normal form is defined by:

\begin{holmath}
  \HOLthm[def]{IBCDNFrevised.DNF_OF_def}
\end{holmath}

where \HOLtm{CONJ_OF} is defined by:

\begin{holmath}
  \HOLthm{IBCDNFrevised.CONJ_OF_rules}
  \HOLthm{IBCDNFrevised.CONJ_OF_ind}
  \HOLthm{IBCDNFrevised.CONJ_OF_cases}
\end{holmath}

and for a formula $f$, we say \HOLtm{DISJ_OF f fs} when $f$ is either the `$\bot$' or a formula such that \HOLtm{DISJ_OF0 f fs}

\begin{holmath}
  \HOLthm{IBCDNFrevised.DISJ_OF0_rules}
  \HOLthm{IBCDNFrevised.DISJ_OF0_ind}
  \HOLthm{IBCDNFrevised.DISJ_OF0_cases}
  \HOLthm[def]{IBCDNFrevised.DISJ_OF_def}
\end{holmath}

As an example, the four \HOLtm{CONJ_OF} formulas on the set $\{f1,f2\}$ are \HOLtm{AND f1 f2}, \HOLtm{AND (NOT f1) f2} \HOLtm{AND f1 (NOT f2)} and \HOLtm{AND (NOT f1) (NOT f2)}. For another example, consider the set $fs:=\{f1,f2,f3\}$ of three formulas, we can say \HOLtm{CONJ_OF (AND f3 (AND f1 f2)) fs}, \HOLtm{CONJ_OF (AND f2 (AND (NOT f1) f3)) fs}, \HOLtm{CONJ_OF (AND (NOT f3) (AND f2 f1)) fs} and so on. But it is not the fact that \HOLtm{CONJ_OF f1 fs}, since from the definition, any element of fs or its negation must appear exactly once in a \HOLtm{CONJ_OF} formula on $fs$. Let $CO:=\{f\mid$\HOLtm{CONJ_OF f fs}$\}$, then we can say \HOLtm{DISJ_OF (DISJ (AND f3 (AND f1 f2)) (AND f2 (AND (NOT f1) f3))) CO}, \HOLtm{DISJ_OF (AND f2 (AND (NOT f1) f3)) CO} and so on, so both these two formulas are disjunction normal form on $fs$, but we cannot say \HOLtm{DISJ_OF (DISJ (AND f2 (AND (NOT f1) f3)) (AND f2 (AND (NOT f1) f3))) CO} or \HOLtm{DISJ_OF (DISJ (AND f2 (AND (NOT f1) f3)) (NOT (AND f2 (AND (NOT f1) f3)))) CO}, since any formula in $CO$ or its negation is only allowed to appear in a \HOLtm{DISJ_OF} formula on $CO$ for at most once, so these two are not in disjunction normal form.

If we start with a finite set, by induction on finiteness using \texttt{FINITE_COMPLETE_INDUCTION} , we conclude the set of \HOLtm{CONJ_OF} formulas and \HOLtm{DISJ_OF0}, hence the \HOLtm{DNF_OF} formulas on this set is finite:
\begin{holmath}
  \HOLthm{IBCDNFrevised.FINITE_CONJ_OF}
  \HOLthm{IBCDNFrevised.FINITE_DISJ_OF0}
  \HOLthm{chap2_3.FINITE_DNF}
\end{holmath}

Once we prove:

\begin{holmath}
  \HOLthm{IBCDNFrevised.IBC_DNF_EXISTS}
\end{holmath}

we get \texttt{FINITE_FINITE_IBC}, which leads to a proof of the step case of \texttt{prop_2_29_strengthen} goes as follows: 
Suppose $\{f | DEG\ f \le n \land \forall a. VAR \ a \in subforms\ f \implies a \in s\}//E \ \mu$ is finite and let $A = (\{VAR\ v | v \in s\} \cup \{\Diamond psi | DEG \ psi \le n \land \forall a. (VAR\ a) \in subforms\ psi \implies a \in s\})$. By \texttt{DEG_IBC_strengthen}, we have $B:=\{f | DEG\ f \le n+1 \land \forall a. VAR \ a \in subforms\ f \implies a \in s\}=\{phi | IBC\ phi \ A\}$, we prove $B$ is finite up to equivalence. If $A=\emptyset$, then by \texttt{IBC_EMPTY_lemma}, $B$ contains only two non-equivaelent formulas $\bot$ and $\top$. Otherwise, by \texttt{FINITE_FINITE_IBC}, it suffices to prove $A$ is finite up to equivalence. Under the assumption \HOLtm{INFINITE univ(:'b)}, \HOLtm{equiv0 μ (DIAM f) (DIAM g)} iff \HOLtm{equiv0 μ f g}, so the inductive hypothesis together  with the assumption \HOLtm{FINITE s} gives the finiteness of $A$.

Therefore, it remains to give a proof of \texttt{IBC_DNF_EXISTS}. The proof is by rule induction on \HOLtm{IBC}, the things to prove are:

Base case:
\begin{itemize}
  \item The falsity $\bot$ is equivalent to a disjunction normal form on $fs$.
  \item For any element $f\in fs$, it is equivalent to a disjunction normal form on $fs$.
\end{itemize}

Step case:

\begin{itemize}
  \item Under the assumption that $fs$ is finite and non-empty, if $f1,f2$ are boolean combination of the set $fs$ which are equivalent to $p1,p2$ of disjunction normal form respectively, then \HOLtm{DISJ f1 f2} is equivalent to a formula in disjunction normal form.
  \item With the same assumption on $fs$, if $f$ is a boolean combination of $fs$ and equivalent to $p$ in disjunction normal form, then \HOLtm{NOT f} is equivalent to a formula in disjunction normal form.
\end{itemize}


The first item of base case is trivial since $\bot$ itself is in disjunction normal form, we begin by proving the second item of the base case.

\subsubsection{Case for $f\in fs$}

We aim to prove:

\begin{holmath}
  \HOLthm{IBCDNFrevised.IBC_DNF_EXISTS_case4}
\end{holmath}

Let us consider what does the \HOLtm{DNF_OF} formula $p$ on $fs$ that is equivalent to and element of $fs$ look like: We require $p$ to be satisfied if and only if $f$ is satisfied. As $p$ is of disjunction normal form, $p$ is satisfied once some of its disjuncts is satisfied. Hence we require the satisfication of each disjuncts of $p$ to imply the satisfication of $f$, that is, $f$ is a conjunct of each disjunct of $p$. So up to rearrangement, $p$ is a disjunction of conjunctions $f\land f_1\cdots f_n$ where each formula in $fs/\{f\}$ or its negation appears exactly once in these $f_i$'s. Such a formula is equivalent to $f\land g$, where $g$ is the disjunction of the formulas obtained by taking $f$ out of each conjunct of $p$. And $f\land g$ is equivalent to $f$ if and only if $g$ is equivalent to $\top$. Hence, $g$ must be the disjunction of all the \HOLtm{CONJ_OF} formulas on $fs/\{f\}$. By conclusion, a disjunction normal form we need can be taken as the disjunction of conjunctions starting with $f$, with its tail ranging over all possible combination of negated and unnegated formulas in $fs/\{f\}$. Use the set $\{f_1,f_2,f_3\}$ as example again, an example of disjunction normal form equivalent to $f_1$ is the formula $(f_1\land f_2\land f_3)\lor (f_1\land\lnot f_2\land f_3)\lor (f_1\land f_2\land \lnot f_3)\lor (f_1\land \lnot f_2\land\lnot f_3)$, note that such a formula is equivalent to $f_1\land ((f_2\land f_3)\lor (\lnot f_2\land f_3)\lor (f_2\land \lnot f_3)\lor (\lnot n_2\land \lnot f_3))$, where $(f_2\land f_3)\lor (\lnot f_2\land f_3)\lor (f_2\land \lnot f_3)\lor (\lnot f_2\land \lnot f_3)$ is equivalent to \HOLtm{TRUE}.

To formalise the idea above, we want to be able to building disjunction normal form piece by piece. We use the following definitions as our tool:

\begin{holmath}
  \HOLthm[def]{IBCDNFrevised.negf_def}
  \HOLthm[def]{IBCDNFrevised.lit_list_to_form_def}
  \HOLthm[def]{IBCDNFrevised.lit_list_to_form2_def}
\end{holmath}

A pair $(f,tv)$ where $f\in fs$ and $tv$ is a truth value is called a literal, it encodes a formula in $fs$ or its negation. Such a pair is turned to a formula $f$ or $\lnot f$ by \HOLtm{negf}, depends on the truth value given in its second coordinate.  For a finite $fs$, we are interested in non-empty lists of literals with the condition that \HOLtm{set (MAP FST l) =fs} and \HOLtm{ALL_DISTINCT (MAP FST l)}, where \HOLtm{MAP} takes a function $f$ and a list $[a_1;\cdots,a_n]$, and return the list $[f(a_1);\cdots;f(a_n)]$. The function \HOLtm{set} takes a list and gives the set of its members, and \HOLtm{ALL_DISTINCT} takes a list and return the truth value of whether all the member of the list. These conditions precisely say that each member of $fs$ occurs exactly once in the list. As a consequence, we can build \HOLtm{CONJ_OF} formulas from such list using  \texttt{lit_list_to_form}. Conversely, each \HOLtm{CONJ_OF} formula can be obtained from such a list.

\begin{holmath}
  \HOLthm{IBCDNFrevised.list_to_CONJ_OF}
  \HOLthm{IBCDNFrevised.CONJ_OF_AND_lemma}
\end{holmath}

Under the same condition on the list, the corresponding result holds for \texttt{lit_list_to_form} and \HOLtm{DISJ_OF0}:

\begin{holmath}
  \HOLthm{IBCDNFrevised.list_to_DISJ_OF0}
  \HOLthm{IBCDNFrevised.DISJ_OF0_DISJ_lemma_EQ}
\end{holmath}

Put the two things together, we can build \HOLtm{DNF_OF} formulas using \texttt{lit_list_to_form} and \texttt{list_list_to_form2}

\begin{holmath}
  \HOLthm{IBCDNFrevised.list_to_DNF_lemma}
\end{holmath}

By induction on list, we can prove the distributivity and symmetry of \texttt{lit_list_to_form2}:

\begin{holmath}
  \HOLthm{IBCDNFrevised.list_demorgan}
  \HOLthm{IBCDNFrevised.lit_list_to_form2_SYM}
\end{holmath}



Use the lemmas above, by induction on finiteness, we prove the disjunction of all possible conjunctions is equivalent to the truth:

\begin{holmath}
  \HOLthm{IBCDNFrevised.ALL_POSSIBLE_VALUE_TRUE}
\end{holmath}

Now we launch on the proof of \texttt{IBC_DNF_EXISTS_case4}:

Given an $f\in fs$, the desired $p$ is given by $\phi:=$\HOLtm{lit_list_to_form}(\HOLtm{SET_TO_LIST} $\{f\land c\mid c\mid CONJ\_OF \ c \ (fs/\{f\})\}$. Here \HOLtm{SET_TO_LIST} is a function takes a set and form a list with all the elements of the set as members. There are two things to check: Using \HOLtm{CONJ_OF_AND_lemma} and \texttt{list_to_DNF_lemma}, it is immediate to prove $\phi$ is in disjunction normal form. To prove $\phi$ is equivalent to $f$, we have:

\HOLtm{lit_list_to_form}(\HOLtm{SET_TO_LIST} $\{f\land c\mid c\mid CONJ\_OF \ c \ (fs/\{f\})\}$

=\HOLtm{lit_list_to_form}(\HOLtm{MAP (\a. AND f a)}(\HOLtm{SET_TO_LIST} $\{c\mid CONJ\_OF \ c \ (fs/\{f\})\}$))

$\overset{\text{list\_demorgan}}\equiv f\land$ \HOLtm{lit_list_to_form}(\HOLtm{SET_TO_LIST}$\{c\mid CONJ\_OF \ c \ (fs/\{f\})\}$)

$\overset{\text{ALL\_POSSIBLE\_VALUE\_TRUE}}\equiv f \land \top$

$\equiv f$

Hence we are done with the base case of \texttt{IBC_DNF_EXISTS}.

\subsubsection{Case for disjunction}

The following lemma directly implies our goal by the fact that if $f1$ is equivalent $p1$ and $f2$ is equivalent to $p2$, then $f1\lor f2$ is equivalent to $p1\lor p2$ and the transitivity of being equivalent.

\begin{holmath}
  \HOLthm{IBCDNFrevised.DNF_OF_DISJ_equiv0}
\end{holmath}

Expanding the definition of \HOLtm{DNF_OF} and \HOLtm{DISJ_OF0} gives four cases, the only interesting one among them is stated as this lemma:

\begin{holmath}
  \HOLthm{IBCDNFrevised.DNF_OF_DISJ_equiv0_case4}
\end{holmath}

Proof:
By induction on \HOLtm{DISJ_OF0}, the base case is by a straightfoward two-layer induction, for the step case, suppose \HOLtm{f1 IN fs} and \HOLtm{DISJ_OF0 p1 (fs DELETE f1)} and \HOLtm{DISJ_OF0 p2 fs}, we are asked to prove:

 \HOLtm{∃f. DISJ_OF0 f fs ∧ equiv0 μ f (DISJ (DISJ f1 p1) p2)}
from the inductive hypothesis 

\HOLtm{∀p2.
            DISJ_OF0 p2 (fs DELETE f1) ⇒
            ∃f. DISJ_OF0 f (fs DELETE f1) ∧ equiv0 μ f (DISJ p1 p2)}

If \HOLtm{DISJ_OF0 p2 (fs DELETE f1)}, then we are done by inductive hypothesis, otherwise we need a trick: If \HOLtm{DISJ_OF0 p2 fs} but \HOLtm{¬DISJ_OF0 p2 (fs DELETE f1)}, it must be the case that $f_1$ appears in $p_2$, hence we can extract $f_1$ out of $p_2$ to split $p_2$ as a disjunction $t\lor f_1$, using the following lemma proved by induction on \HOLtm{DISJ_OF0}:

\begin{holmath}
  \HOLthm{IBCDNFrevised.DISJ_OF0_split}
\end{holmath}
Applying the lemma above allows us to finish the proof by using the inductive hypothesis.


\subsubsection{Case for negation}

Let us consider our last case, which amounts to prove:

\begin{holmath}
  \HOLthm{IBCDNFrevised.IBC_DNF_EXISTS_case3}
\end{holmath}

The idea of this proof is to use the concept `complement'. Consider a disjunction normal form $p$ on a finite set $fs$, we find a formula of disjunction normal form $f$ which is its negation, that is, we require $f$ to be satisfied if and only if $\lnot p$ is satisfied. As $p$ is a disjunction, $\lnot p$ is satisfied once none of $p$'s conjuncts is satisfied. As a disjunction normal form, all of $p$'s disjuncts are taken from the set of all of the \HOLtm{CONJ_OF} formulas on $fs$, and these disjuncts form a subset of $ss\subseteq\{c\mid CONJ\_OF \ c \ fs\}$. Since none of these conjunctions is satisfied, it must be the case that the satisfied conjunction is in $\{c\mid CONJ\_OF \ c \ fs\}/ss$. Again, let $fs = \{f_1,f_2\}$ and $p:= (f_1\land f_2)\lor (\lnot f_1\land f_2)$ is in disjunction normal form. For $\lnot p$ is satisfied, neither $f_1\land f_2$ nor
$ f_1\land\lnot f_2$ is satisfied, so it must be the case that either $\lnot f_1\land\lnot f_2$ or $\lnot f_1\land f_2$. We take the conjunction of the elements in the set $\{\lnot f_1\land\lnot f_2,\lnot f_1\land f_2\}$ formed by taking out the disjuncts appear in $p$ from the total set $\{f_1\land f_2, (\lnot f_1\land f_2,\lnot f_1\land\lnot f_2,\lnot f_1\land f_2\}$, it gives the formula $(\lnot f_1\land\lnot f_2)\lor (\lnot f_1\land f_2)$, which is equivalent to the negation of $p$.

Although it may be possible to stick to using our former tools \texttt{lit_list_to_form} and \texttt{list_list_to_form2}, it is much more natural to directly use the completement of set to deal with our issue here. Again, for a finite set $fs$, we will use literals to encode formulas in $fs$ or its negation. But instead of using list of literals, we will use sets of literals this time.

We define satisfication of a literal as:

\begin{holmath}
  \HOLthm[def]{IBCDNFrevised.lsatis_def}
\end{holmath}

That is, for a model \HOLtm{M} and a world \HOLtm{w}, a literal $(f,T)$ is satisfied at $w$ if \HOLtm{satis M w f}, and $(f,F)$ is satisfied at $w$ if \HOLtm{satis M w (NOT f)}. We want to construct \HOLtm{CONJ_OF} formulas from well-formed sets of literals, such a well-formed set is called an `lset':

\begin{holmath}
  \HOLthm[def]{IBCDNFrevised.is_lset_def}
\end{holmath}

Note the condition of being an \texttt{lset} corresponds the condition on the list as in the story about the base case. An \texttt{lset} corresponds a conjunction, for instance, $ls:=\{(f_1,T),(f_2,T)\}$ corresponds to the formula $f_1\land f_2$. We care about when all the literals in the set are satisfied, and call a set $c$-satisfied for this situation. 

\begin{holmath}
  \HOLthm[def]{IBCDNFrevised.csatis_def}
\end{holmath}

If two \texttt{lset}s are different, the union of them must contains a literal of opposite sign, hence the union of two distinct \texttt{lsets} can never be $c$-satisfied:

\begin{holmath}
  \HOLthm{IBCDNFrevised.NEQ_lsets_FALSE}
\end{holmath}

By induction on \HOLtm{CONJ_OF} and the finiteness of \texttt{lset} respectively, we prove for any \texttt{lset}, it is $c$-satisfied at a world in a model iff its corresponding \HOLtm{CONJ_OF} formula is satisfied at the same point. Conversely, for any \HOLtm{CONJ_OF} formula, there is an \texttt{lset} that corresponds to it: 

\begin{holmath}
  \HOLthm{IBCDNFrevised.CONJ_OF_lset}
  \HOLthm{IBCDNFrevised.is_lset_CONJ_OF_EXISTS}
\end{holmath}

A disjunction of \HOLtm{CONJ_OF} formula is captured by sets of literal sets. For instance, the set $\{\{(f_1,T),(f_2,T)\},\{(f_1,F),(f_2,T)\}\}$ encodes the formula $(f_1\land f_2)\lor (\lnot f_1\land f_2)$ of disjunction normal form on the set $\{f_1,f_2\}$. And the satisfication of \HOLtm{DISJ_OF0} formulas is captured by $d$-satisfication:

\begin{holmath}
  \HOLthm[def]{IBCDNFrevised.dsatis_def}
\end{holmath}

There is a set-version of the the previous proposition \texttt{ALL_POSSIBLE_VALUE_TRUE}, looks like:

\begin{holmath}
  \HOLthm{IBCDNFrevised.dsatis_ALL_POSSIBLE_VALUE}
\end{holmath}

Using this as a lemma, we can prove the a critical statement about our idea of `complement', saying that a set of \texttt{lset}s are $d$-satisfied iff its complement in the `total set' of all the \texttt{lset}s is not $d$-satisfied.

\begin{holmath}
  \HOLthm{IBCDNFrevised.dsatis_is_lset_complement}
\end{holmath}

Proof:
For the implication from left to right, suppose both \HOLtm{dsatis M w cs} and \HOLtm{dsatis M w}$\{c\mid is\_lset\ cfs\}/cs$, then by definition of \HOLtm{dsatis}, it means two distinct \texttt{lset}s are $c$-satisfied at the same point, which contradicts \texttt{NEQ_lsets_FALSE}. For the implication from right to left, suppose \HOLtm{¬dsatis M w cs}, by \texttt{dsatis_ALL_POSSIBLE_VALUE_TRUE}, the \texttt{lset} which holds on $w$ must lies in $\{c\mid is\_lset\ cfs\}/cs$. This completes the proof.



And we have a correspondence of set of \texttt{lset}s and \HOLtm{DISJ_OF0} formulas. 

\begin{holmath}
  \HOLthm{IBCDNFrevised.DISJ_OF0_cset}
\end{holmath}  

Altoghther, there are the correspondence results of set of \texttt{lset}s and \HOLtm{DNF_OF} formulas. The first one, which is a immediate consequence of \texttt{DISJ_OF0_cset}, says each \HOLtm{DNF_OF} formula corresponds a set of \texttt{lset}s.

\begin{holmath}
  \HOLthm{IBCDNFrevised.DNF_OF_cset}
\end{holmath}


The second one says each set of \texttt{lset}s gives a \HOLtm{DNF_OF} formula:

\begin{holmath}
  \HOLthm{IBCDNFrevised.is_lset_DNF_OF_EXISTS}
\end{holmath}

Proof:
The proof is by induction on \HOLtm{FINITE s}. For the base case that $s=\emptyset$, the required formula $f$ is obviously $\bot$. Suppose for $s$ a finite set of \texttt{lset}s and there exists a formula $f$ in disjunction normal form such that \HOLtm{satis M w f <=> dsatis M w s} for any model \HOLtm{M} and any \HOLtm{w IN M.frame.world}, we find a formula $g$ such that \HOLtm{satis M w g <=> dsatis M w (e INSERT s)}. By \texttt{is_lset_CONJ_OF_EXISTS}, there is a \HOLtm{CONJ_OF} formula $f'$ on $fs$ with the property that \HOLtm{satis M w f' <=> csatis M w e} for arbitary \HOLtm{M}. If $f$ is equivalent to $\bot$, then $f'$ is the $g$ we want, and vice versa. If both of them are not equivalent to $\bot$, we can take $f'\lor f$ as the $g$ we want. The first desired condition is easy to check, it remains to prove $f'\lor f$ is in disjunction normal form, which is suffices by proving \HOLtm{DISJ_OF0 f} $\{c\mid CONJ\_OF\ c\ fs\}/ \{f'\}$. Suppose not, then there exists a $p$ such that \HOLtm{DISJ_OF0 p} $\{c\mid CONJ\_OF\ c \ fs\}/\{f'\}$ and \HOLtm{equiv0 μ f (DISJ f' p)} by \texttt{DISJ_OF0_split}. To obtain a contradiction, we find a model with a world satisfies $f'$ but not $f$. With the equivalence conditions on $f$ and $f'$, it amounts to find a modal \HOLtm{M} with a world \HOLtm{w IN M.frame.world} such that \HOLtm{csatis M w e} but \HOLtm{¬dsatis M w s}. The claim is any world $c$-satisfying $e$ cannot $d$-satisfy $s$, otherwise it contradicts \texttt{dsatis_is_lset_completment}. Also since $f'$ is not equivalent to $\bot$, a model satisfying $f'$ exists, so we are done. 

Now we have all the ingredients to prove our last case.

Proof:
As \HOLtm{DNF_OF p fs}, by \texttt{DNF_OF_cset} we obtain a \texttt{lset} $cs$ such that \HOLtm{satis M w p <=> dsatis M w cs} for any \HOLtm{M} and $w$. Consider its complement $\{c\mid is\_lset\ c\ fs\}/cs$, by \texttt{is_lset_DNF_OF_EXISTS} we obtain a formula $f$ such that \HOLtm{DNF_OF f fs} and \HOLtm{satis M w f} iff \HOLtm{dsatis M w} $\{c\mid is\_lset\ c\ fs\}/cs$ for any \HOLtm{M} and $w$. By \texttt{dsatis_is_lset_complement}, \HOLtm{dsatis M w} $\{c\mid is\_lset\ c\ fs\}/cs$ iff \HOLtm{¬dsatis M w cs}, so $f$ is equivalent to $\lnot p$.


Here we are done with the proof of \texttt{prop_2_29_strengthen}. This is the end of the interlude.

This is time to return to discussion about the proof of finite model property. Recall in the last chapter, we have seen that a bisimulation gives arise to modal equivalence, modal equivalence is `satisfiying exactly the same formulas', but when we are building a finite model for a formula $\phi$, we do not care about the satisfication of any formula of degree above \HOLtm{DEG phi}, since such formula cannot affect the satisfication of $\phi$. Therefore, a finite approximation of bisimulation is enough, a finite approximation of depth $n$ is called an $n$-bisimulation. Let \HOLtm{w IN M.frame.world} and \HOLtm{w' IN M'.frame.world}, $w$ and $w'$ are $n$-bisimilar if there exists a sequence of relations $Z_n\subseteq \cdots\subseteq Z_0$ such that:
\begin{itemize}
  \item $w$ and $w'$ are related by $Z_n$
  \item If \HOLtm{v IN M.frame.world} and \HOLtm{v' IN M'frame.world} are related by $Z_0$, then $v$ and $v'$ satisfy the same propositional letters.
  \item If \HOLtm{v IN M.frame.world} and \HOLtm{v' IN M'frame.world} are related by $Z_{i+1}$ and we have \HOLtm{M.frame.rel v u} for \HOLtm{u IN M.frame.world}, then there exists \HOLtm{u' IN M'.frame.world} such that \HOLtm{M'.frame.rel v' u'} with $u$ and $u'$ related by $Z_i$.
  \item If \HOLtm{v IN M.frame.world} and \HOLtm{v' IN M'frame.world} are related by $Z_{i+1}$ and we have \HOLtm{M'.frame.rel v' u'} for \HOLtm{u' IN M.frame.world}, then there exists \HOLtm{u IN M.frame.world} such that \HOLtm{M.frame.rel v u} with $u$ and $u'$ related by $Z_i$.
\end{itemize}

Such a sequence of $Z_i$ is a family of relations indexed by natural numbers. When the world set of \HOLtm{M} has type $\beta$ and the world set of \HOLtm{M'} has type $\gamma$, we encode such a family using functions $f:num\to \beta\to\gamma\to bool$. Such a function assigns each natural number a relation, so the \HOLtm{f i} is the relation $Z_i$ in the usual mathematical definition, and \HOLtm{nbisim M M' f n w w'} means $w$ and $w'$ are worlds in \HOLtm{M} and \HOLtm{M'} respectively which are $n$ bisimilar via the family of relations given by $f$.

\begin{holmath}
  \HOLthm[def]{chap2_3.nbisim_def}
\end{holmath} 


By induction on $n$, we see if two worlds \HOLtm{w IN M.frame.world} and \HOLtm{w' IN M'.frame.world} are related by an $n$-bisimulation, then they agree on all modal formulas up to degree $n$:

\begin{holmath}
  \HOLthm{chap2_3.prop_2_31_half1}
\end{holmath}

The converse of the above holds when our modal language is defined on a finite set of propositional letters and the type of world sets of our models are infinite. It can be proved by an argument analogue to the proof of Hennessy-Milner theorem, with \HOLtm{λn n1 n2. (!(phi: 'a chap1$form). DEG phi <= n ==> (satis M n1 phi <=> satis M' n2 phi))} gives an $n$-bisimulation relation linking $w$ and $w'$:

\begin{holmath}
  \HOLthm{chap2_3.prop_2_31_half2}
\end{holmath} 


\HOLtm{DEG} is a concept that measure the depth of a formula, we also want a concept that measure the depth of a model, as `depth' is a relative concept measuring the distance of two points. To talk about the depth of a world \HOLtm{w IN M.frame.world}, we need \HOLtm{M} to be naturally equipped with a base point, so the `height' of a world only makes sense to rooted model. To tell the HOL about this definition, we start by defining \HOLtm{heightLE}:

\begin{holmath}
  \HOLthm{chap2_3.heightLE_rules}
  \HOLthm{chap2_3.heightLE_ind}
  \HOLthm{chap2_3.heightLE_cases}
\end{holmath}

Recall how we defined rooted model: \HOLtm{rooted_model M x M'} means `\HOLtm{M} is a rooted model generated by the world $x$ in the ambient model \HOLtm{M'}'. As \HOLtm{heightLE} is designed to be only make sense for rooted models, we encode the information about the rootedness of the model we are talking about into this definition. \HOLtm{heightLE M x M' w n} reads `for the rooted model \HOLtm{M} generated by the root $x$ in \HOLtm{M'}, the distance from the world \HOLtm{w} to the root $x$ is less or equal to $n$. The height of such a world $w$ is the smallest natural number $n$ such that \HOLtm{heightLE M x M' w n}. And a height of model is the maximum $n$ such that there is a world of height $n$ in the model.

\begin{holmath}
  \HOLthm[def]{chap2_3.height_def}
  \HOLthm[def]{chap2_3.model_height_def}
\end{holmath}

Obviously, the root of any rooted model have height $0$. We are particularly interested in talking about heights in tree-like model. When \HOLtm{M} is tree-like, if \HOLtm{w IN M.frame.world} has height $n$, then any world \HOLtm{w' IN M.frame.world} such that \HOLtm{M.frame.rel w w'} will have height $n+1$, this is proved using the induction principle \texttt{RTC_INDUCT_RIGHT1}:

\begin{holmath}
  \HOLthm{chap2_3.tree_height_rel_lemma}
\end{holmath}

The restriction of a rooted model \HOLtm{M} to the height $k$ is the submodel consisting of all the worlds in \HOLtm{M} of height up to $k$. The restriction of a tree-like model is again a tree-like model:

\begin{holmath}
  \HOLthm[def]{chap2_3.hrestriction_def}
  \HOLthm{chap2_3.tree_hrestriction_tree}
\end{holmath}

Restriction of rooted model gives arise of $n$-bisimulation: If we restrict a rooted model \HOLtm{M} to height $k$, then a world $w$ of height $m$ in the restricted model is $k-m$-bisimilar to itself in the original model:

\begin{holmath}
  \HOLthm{chap2_3.lemma_2_33}
\end{holmath}

Proof:
The $n$-bisimilar relation is give as \HOLtm{λn w1 w2. w1 = w2 /\ height M x M' w1 <= k - n}.

Now we can start building a finite model via selection:

\begin{holmath}
  \HOLthm{chap2_3.thm_2_34}
\end{holmath}

Proof: Suppose \HOLtm{satis M1 w1 phi} where $w_1:\beta,\phi:\alpha\ form$, then by \texttt{prop_2_15_corollary}, there exists a tree-like model \HOLtm{M2} with \HOLtm{phi} satisfied at its root \HOLtm{w2}. Such an \HOLtm{M2} obtained from \texttt{prop_2_15_corollary} has its world set of type $\beta\ list$, so all the lemmas proved before with a infinite universe assumption applies for any model with its world set a subset of \HOLtm{M2.frame.world} . Define $M_3:=$\HOLtm{hrestriction M2 w2 M2 k} to be the restriction of \HOLtm{M2} to height $k$, then $M_3$ is rooted and there is a \HOLtm{nbisim M3 M2 f k w2 w2} by \texttt{lemma_2_33}. Hence \HOLtm{satis M3 w2 phi} by \texttt{prop_2_31_half1}. By \texttt{exercise_1_3_1} proved in the first chapter, if a propositional letter does not appear in $\phi$, then it has no effect to the satisfication of $\phi$, so we can discard all the propositional letters in \HOLtm{M3} which does not occur in $\phi$ to obtain the model \HOLtm{M3' =
   <| frame := <| world := M3.frame.world ;
                    rel := M3.frame.rel ;
                |>;
       valt := \p v. if ((VAR p) IN (subforms phi)) then (M3.valt p v) else F |>}, and still have \HOLtm{satis M3' w2 phi}. We select a finite model inductively from \HOLtm{M3'}.

Let $s$ denote the set of propositional letters used by $\phi$, so $s$ is finite. By \texttt{prop_2_29_strengthen}, there are only finitely many non-equivalent formulas of degree less or equal to $k$ which only use propositional letters in $s$, that is, the set $distfp:=\{f \mid DEG\ f \le k \land \forall a. VAR\ a \in subforms\ f \implies a \in s\}//E\ \mu$ is a finite. We care about the equivalence classes in $distfp$ which are equivalence classes of formulas starting with a $\Diamond$. For such a equivalence class, taking the intersection with the set $\{d \mid ?d0. d = \Diamond d0\}$ does not give the empty set. Take the image of $distfp$ under the function $\lambda s. s\cap \{d \mid ?d0. d = \Diamond d0\}$ and delete the empty set from the image, we obtain a set $fs$ of sets of formulas, where for each $x\in fs$, $x$ consists of equivalent formulas of degree less or equal to $k$, only use propositional letters in $s$, and starts with diamond. Hence 
$rs:=(IMAGE\ CHOICE ((IMAGE \ (\lambda s. s \cap \{d \mid ?d0. d = \Diamond d0\}) \ distfp) \ DELETE \ \{\})$ can be taken as the set of representatives of formulas with desired properties, it is finite as an image of a finite set. 

We will construct sets $S_0,\cdots S_k$ of worlds in \HOLtm{M3'}, where the points in $S_n$ have height $n$. Start with $S_0:=\{w_2\}$, and inductively, assume $S_0,\cdots S_n$ has been defined, construct $S_{n+1}$ as follows: Consider an element in $v\in S_n$, for each $\Diamond \phi\in rs$ such that \HOLtm{satis M3' w2 (DIAM phi)}, pick a world \HOLtm{u IN M3'.frame.world} such that \HOLtm{M3'.frame.rel v u} and \HOLtm{satis M3' u phi}. Do the same thing to all the $v\in S_n$, then $S_{n+1}$ is the set of all the such $u$'s which are seleted in this way. 

The we we taken to formalise the definition of such $S_i$'s is to define a primitive recursive function: $ss:= PRIM_REC\ \{w2\}
                 (\lambda s0:\beta\ list\ set\ n. 
                      \{CHOICE\ uset \mid
	              ?phi \ v. satis\ M3'\ v\ (\Diamond phi) \land 
	              ((\Diamond phi) \in 
                       (IMAGE\ CHOICE\
                             ((IMAGE\ 
                               (\lambda s. s \cap \{d \mid ?d0. d = \Diamond d0\})
                               distfp) 
                               DELETE \emptyset)) \land
                      v \in s0 \land
		      uset = \{ u \mid M3'.frame.rel\ v\ u \land u \in M3'.frame.world \land
		                   satis\ M3'\ u\ phi\})\})$

For each $i\le k$, $ss\ i$ will be our $S_i$. By induction on $i$, we can prove each $ss\ i$ is finite, so the set $W4 := \bigcup_i \{ss\ i\mid i \le k\}$ is finite. The resultant finite model we select is: \HOLtm{M4 = <| frame:= <| world := W4;
                                  rel := M3.frame.rel |>;
		        valt:= M3'.valt |>}
To prove \HOLtm{satis M4 w2 phi}, it suffices to give a $k$-bisimulation between \HOLtm{M4} and \HOLtm{M3'} relating $w2$ to itself. Such a $k$-bisimulation is: \HOLtm{\n a1 a2. a1 IN M4.frame.world /\ a2 IN M3'.frame.world /\
                 height M3' w2 M3' a1 = height M3' w2 M3' a2 /\
		 height M3' w2 M3' a1 <= k - n /\
                 (!phi. (DEG phi <= n /\ (∀a. VAR a ∈ subforms phi ⇒ a ∈ s))
                     ==> (satis M3' a1 phi <=> satis M3' a2 phi))}
The rest of the proof amounts to check the above indeed gives a $k$-bisimulation, the proof is not hard using a similar argument as we proved the Hennessy-Milner theorem.

As we took a detour through \texttt{prop_2_15_corollary}, this construction of finite model changes the type of model. 


\section{Reaching out to the world of first order logic}

Modal logic is not an isolated formal system, in this chapter, we start linking modal logic with the wider logical world by discussing about the relation to first order logic. In the first half of the chapter, we define standard translation as our link between modal logic and first order logic, and in the second half of the chapter, with the help of standard translation, we introduce another construction on models which will give modal equivalence, and lead to an elegant result about bisimulation: modal equivalence implies bisimilarity-somewhere-else.

\subsection{Standard Translation}

To discuss the relationship between modal logic and first order logic, firstly we need to build some basics of first order logic in the HOL. First order logic is formalised in HOL light in 1998 as in (reference), we take our construction of first-order model theory as in the paper.

For a first order language, a term is either a variable letter $x$ or a function symbol $f$ applied on a list of terms, which looks like $f(t_1,\cdots,t_n)$, where the $t$'s can either be variable letters or itself a function applied on some terms. To avoid specifying the type every where, we restrict our scope to countable language, by using only natural numbers to denote variable and function symbols:

\begin{holmath}
  \HOLthm{folLang.datatype_term}
\end{holmath}

Hence our terms will look like \HOLtm{fV 6}, \HOLtm{Fn 1 [fV 1; fV 2]}, \HOLtm{Fn 2 [Fn 0 []]}, etc. A constant is just a nullary function symbol.

Our formulas are defined inductively as well, using minimal amount of logical connectives, by choosing the falsity, atoms, implication and universal quantification as primitive, predicate symbols are also represented by natural numbers. In particular, an $n$-ary relation symbol is a predicate symbol that takes lists of length $n$:

\begin{holmath}
  \HOLthm{folLang.datatype_form}
\end{holmath}

A quantified variable is called a bounded variable, otherwise it is called free. We define a function that returns the set of free variables of the formula, starting by collecting variables occur in the terms of formulas, and then delete the bounded ones:

\begin{holmath}
  \HOLthm[def]{folLang.FVT_def}
  \HOLthm[def]{folLang.FV_def}
\end{holmath}
%add bounded ones?
Here \HOLtm{LIST_UNION} is a function that takes a list of sets, and give us the union of all the sets in the list:

\begin{holmath}
  \HOLthm[def]{folLang.LIST_UNION_def}
\end{holmath}

Similarly, we have functions called \texttt{form_functions} and \texttt{form_predicates}, that take a formula and give the set of functions and predicates appear in the formula respectively.


The non-primitive connectives are defined in the canonical way:

\begin{holmath}
  \HOLthm[def]{folLang.Not_def}
  \HOLthm[def]{folLang.True_def}
  \HOLthm[def]{folLang.Or_def}
  \HOLthm[def]{chap2_4revised.fAND_def}
  \HOLthm[def]{folLang.Exists_def}
\end{holmath}

To interpret these formulas, we need models for first order logic. A first order model of type $\alpha$ is a triple consists of an $\alpha$-set which is its domain, a interpretation of function symbols, and a interpretation of predicate symbols.

\begin{holmath}
  \HOLthm{folModels.datatype_model}
\end{holmath}

Given a first order model \HOLtm{M}, we can interpret formulas or terms by assigning each variable symbol an element in \HOLtm{M.Dom}. Such an assignment is given by a valuation, which is a function from the universe of natural numbers to the domain of \HOLtm{M}:

\begin{holmath}
  \HOLthm[def]{folModels.valuation_def}
\end{holmath} 

Interpretation of terms and formulas are given as \HOLtm{termval} and \texttt{feval}, where \HOLtm{termval} takes a model, an assignment of variable letters and a term, gives us an element of \HOLtm{M.Dom}. And \texttt{feval} takes a model, an assignment of variable letters and a first order formula, gives us the truth value whether the formula we give holds on the model under the current assignment of variable letters, we only care about when the an assignment of variable letters is indeed a valuation as defined above, when $\sigma$ is a valuation and \HOLtm{feval M σ fform}, we say `$fform$ is satisfied in \HOLtm{M} under the valuation $\sigma$'.

\begin{holmath}
  \HOLthm[def]{folModels.termval_def}
  \HOLthm[def]{chap2_4revised.fsatis_def}
\end{holmath}

 (Why the holds def not work?!)

By induction on first order formula, we show that the truth value of a first order formula only depends on where the valuation sends the free variables to:

\begin{holmath}
  \HOLthm{folModels.holds_valuation}
\end{holmath}


Models for modal language can be viewed as a first order model and hence be used to interpret some first order formula, and a first order model can be also viewed as a modal model. These conversions can be done using the following two functions:

\begin{holmath}
  \HOLthm[def]{chap2_4revised.mm2folm_def}
  \HOLthm[def]{chap2_6.folm2mm_def}
\end{holmath}

Note that the above constructions are not inverses in general, since by viewing a first order model as a modal model, we lose all the function symbols and predicate symbols except for the unary ones, and the binary one denoted by $0$. Also the range of formulas which makes sense to first order model obtained by converting a modal model is quite limited, we can only use these model to interpret formulas with only one binary predicate symbol corresponds to the relation in the model, denoted by $0$, and no function symbol. A first order model which do not have `superfluous' symbols contains the same amount of information as a modal model. For such a first order model, converting it to a modal model and then to a first order model again get the original model back, in the sense of the resultant model satisfied exactly the same first order formulas without function symbols. The fact that we that we need the assumption \HOLtm{form_functions f = ∅} is not a real constrain, but merely an assumption for well-formedness, since any formulas with function symbol does not make sense to both the original model and the resultant model we get by conversion:

\begin{holmath}
  \HOLthm{chap2_6.mm2folm_folm2mm_feval}
\end{holmath}

Let us build intuition about how does modal formulas corresponds to first order formulas. Observe that unlike modal formulas which atomic formulas are propositional letters standing alone, even the atomic first order formula have a variable symbols involved. Hence to translate a modal formula into a first order formula, we must get variables involved as well. This variables is used to mark the state we are looking at. And moreover, once we see a $\Diamond$ in a modal formula, we start talking about some other state which is related to the current state, so we will need another variable symbol to mark the new state of interest. Hence in mathematical language, the natural correspondence of modal and first order formulas is given by:

$ST_x(p)= Px$

$ST_x(\bot)=\bot$

$ST_x(\lnot \phi)=\lnot ST_x(\phi)$

$ST_x(\phi\lor \psi) =ST_x(\phi)\lor ST_x(\psi)$

$ST_x(\Diamond\phi)=\exists y(Rxy\land ST_y(\phi))$



We can read $ST_x \phi$ as `the standard translation of $\phi$ at $x$'. In the following definition, the $x$, which is a variable symbol in our construction, is a natural number. Each time we see a $\Diamond$, we come with a fresh variable denotes by $x+1$:
\begin{holmath}
  \HOLthm{chap2_4revised.ST_def}
\end{holmath}

Here \HOLtm{fP} is the abbrevation of \HOLtm{λp t. Pred p [t]}, and \HOLtm{fR} is the abbrevation of \HOLtm{λw1 w2. Pred 0 [w1; w2]}. Any formula obtained by standard translation only has one free variable $x$, and a standard translation can never have function symbols:

\begin{holmath}
  \HOLthm{chap2_6.ST_FV_singleton}
  \HOLthm{chap2_6.ST_FC_EMPTY}
\end{holmath}

We can conjunct standard tranalations to get a standard translation. And the negation of standard translation is again a standard translation:

\begin{holmath}
  \HOLthm{chap2_6.ST_BIGCONJ}
  \HOLthm{chap2_6.ST_fNOT}
\end{holmath}



Standard translation defined like this can be regarded as a first-order reformulation of modal satisfication, since we have the precise correspondence of modal satisfication and first-order satisfication for standard translations. A modal formula is satisfied a point $w$ in a modal model iff its standrad translation at $x$ is satisfied at the same modal viewed as a first order model when $x$ is valuated to $w$:

\begin{holmath}
  \HOLthm{chap2_4revised.prop_2_47_i}
\end{holmath}

Hence we say the current definition of standard translation makes good semantical sense, but it has syntactical deficiency. The formula \HOLtm{DIAM (DIAM f)} with $a_1$ marking its state is translated to $\exists a_2(R a_1 a_2\land\exists a_3(Ra_2a_3 \land ST_{a_3}(f)))$, it uses three variables $a_1,a_2$ and $a_3$, which is unnecessary: the formula above is equivalent to $\exists a_2(R a_1 a_2\land\exists a_1(Ra_2a_1\land ST_{a_1}(f)))$. With this observation, we conclude that we do not need to always come up with a variable symbol for each \HOLtm{DIAM}, instead, we can use only two variable symbols alternating in each layer. As a consequence, we can redefine standard translation as follows:

\begin{holmath}
  \HOLthm[def]{chap2_4revised.ST_alt_def}
\end{holmath}

(prove only two variables?)

Note that the above definition is designed to only use $0$ or $1$ as the $x$. It is evident from the follow proposition that our new definition of translation is equally nice from the semantical aspect as the former one:

\begin{holmath}
  \HOLthm{chap2_4revised.prop_2_47_i_alt}
\end{holmath}

By conclusion, every modal formula is equivalent to a first order formula containing only two variables.

\subsection{Modal Saturation via ultrafilter extensions}

In the second chapter, we have seen bisimilarity implies modal equivalence, but only proved the converse for image finite models. In this section, we are interested in another particular class of models which modal equivalence implies bisimilarity, which is the class of m-saturated models. 

A set of formulas \HOLtm{Σ} is called satisfiable in a set of worlds $X$ of a model \HOLtm{M} if there exists a world in $X$ such that all the formulas in \HOLtm{Σ} are satisfied, and is called finitely satisfiable if any finite subset of \HOLtm{Σ} is satisfiable:

\begin{holmath}
  \HOLthm[def]{chap2_5.satisfiable_in_def}
  \HOLthm[def]{chap2_5.fin_satisfiable_in_def}
\end{holmath}

A model \HOLtm{M} is called m-saturated if for each \HOLtm{w IN M.frame.world} and any set \HOLtm{Σ} of formulas, if \HOLtm{Σ} is finitely satisfiable in the set of successors of $w$, then it is satisfiable in the set of successors of $w$. 

\begin{holmath}
  \HOLthm[def]{chap2_5.M_sat_def}
\end{holmath}

In fact, a class of model where modal equivalence implies bisimilarity has a name, it is called a Hennessy-Milner class. If we want to formalise the definition of Hennessy-Milner class in the HOL, we could write:

\begin{holmath}
  \HOLthm{chap2_5.HM_class_def}
\end{holmath} 
  
But in fact, such a definition is useless, since we are not allowed to have a `class' in the HOL, we can only have set, and any set is only allowed to have elements of the same type. Hence if we use this definition, we will only be allowed to talk about bisimulations between models with the same type. As a consequence, we do not make usage of this definition in the following formalisation of the proposition which says the class of m-saturation has the Hennessy-Milner property, instead, we state it as:

\begin{holmath}
  \HOLthm{chap2_5.prop_2_54_DIST_TYPE}
\end{holmath}

Proof: Let \HOLtm{M} and \HOLtm{M'} be $(\alpha,\beta),(\alpha,\gamma)$ models respectively. Under the assumptions, the bisimulation relation is given by \HOLtm{λn1 n2. (!form. satis M n1 form <=> satis M' n2 form)}. To only non-trivial clause of being a bisimulation to check is that for worlds $w,v$ of \HOLtm{M} and world $w'$ of \HOLtm{M'} such that \HOLtm{M.frame.rel w v} and $w$ and $w'$ are modal equivalent, we can find a world $v'$ of \HOLtm{M'} such that \HOLtm{M'.frame.rel w' v'} and $v$ and $v'$ are modal equivalent. 

Let \HOLtm{Σ} denote the set of formulas satisfied by $v$, it suffices to find a successor of $w'$ that realises \HOLtm{Σ}. As \HOLtm{M'} is m-saturated, it suffices to prove each finite subset $\Delta\subseteq \Sigma$ is satisfied in some successor of $w'$. Take such a $\Delta$, then it is satisfied at $v$. As $\Delta$ is finite, we can prove that there exists a formula $ff$ such that for all $(\alpha,\beta)$-models, $ff$ is satisfied at a world if and only if all elements in $\Delta$ are satisfied:

\begin{holmath}
  \HOLthm{chap2_5.BIGCONJ_EXISTS_2}
\end{holmath}

We have \HOLtm{satis M v ff}, and therefore \HOLtm{satis M w (DIAM ff)}. By modal equivalence of $w$ and $w'$, we then get \HOLtm{satis M w' (DIAM ff)}, so there exists a successor of $w'$ that satisfies $ff$. 

But it is not what we want! Instead, we need a successor of $w'$ which satisfies all elements in $\Sigma$, but we cannot get it if we just use the lemma above, since the equivalence of the set of formulas and its big conjunction we proved only works for $(\alpha,\beta)$ models, but we are in \HOLtm{M'} which is an $(\alpha,\gamma)$-model. By embedding any arbitary model into a common infinite type, it may possible to prove that under some condition on universe, if a big conjunction works for a model of one type, then it works for any other types. But it is way too complicated and will involve an ugly assumption. The key observation is that what we need is no more than a big conjunction formula that simutinously works for two distinct types. Therefore, it suffices to prove:

\begin{holmath}
  \HOLthm{chap2_5.BIGCONJ_EXISTS_DIST_TYPE}
\end{holmath}

This lemma works perfectly, so we will not get stuck at the former point and we are done with the proof.

Since m-saturated models are nice, here is a natural question: How can we get such models. It turns out that every models can give arise to a m-saturated model, by taking its ultrafilter extension. In order to talk about ultrafilter extesnions, we need to build a theory of ultrafilers in HOL.

\subsection{Interlude II: Ultrafilters}

As its name suggests, an ultrafilter is a special kind of filter. Given a non-empty set $W$, a set $F$ which is a subset of the power set of $W$, written as $POW(W)$ in the HOL, is called a filter if it contains $W$ itself, closed under binary intersection, and closed upward.

\begin{holmath}
  \HOLthm[def]{ultrafilter.filter_def}
\end{holmath}

By induction, closure under binary intersection implies that a filter is closed under finite intersection.

\begin{holmath}
  \HOLthm{ultrafilter.BIGINTER_IN_filter}
\end{holmath}

Obviously for any set $W$, $POW(W)$ is a filter on $W$. By upward closure, any filter which contains the empty set must be $POW(W)$.

\begin{holmath}
  \HOLthm{ultrafilter.POW_filter}
  \HOLthm{ultrafilter.empty_improper_filter}
\end{holmath}

But $POW(W)$ is very boring as a filter, we are mainly interested in filters which are not the whole power set, these filters are called proper filer:

\begin{holmath}
  \HOLthm{ultrafilter.proper_filter_def}
\end{holmath}

If we have a set proper filters such that for any two members $A,B$ of it, either $A\subset B$ or $B\subseteq A$, the union of this set is a proper filter.

\begin{holmath}
  \HOLthm{ultrafilter.UNION_proper_proper}
\end{holmath}

Another important kind of filter is the generated filter. For $W\ne \emptyset$ and $F_0\subseteq POW(W)$, the generated filter is the minimal filter on $W$ containing $F_0$.

\begin{holmath}
  \HOLthm{ultrafilter.generated_filter_def}
\end{holmath}

The advantage of the above definition is that we get the fact that a generated filter is indeed a filter for free.

But sometimes we want to explicitly talk about elements in generated filter, then we can just spell out the its construction: We put any subset $W$ that contains a finite intersection of elements in $F$ in the generated filter of $F$, such subsets are precisely the ones that are required by the definition. We can prove generated filter is indeed a filter under this definition:

\begin{holmath}
  \HOLthm{ultrafilter.generated_filter_alt_filter}
\end{holmath}

%modify the theorem to remove extra?

%prove all the three definitions agree?

For any element $w\in W$, the set of all the subset containing $w$ forms a filter, it is called the principle filter generated by $w$. In fact, principle filters are filter generated by singletons.

\begin{holmath}
  \HOLthm{ultrafilter.principle_UF_def}
\end{holmath}

 An ultrafilter on a set $W$ is a proper filter $F$ such that for any $S\subseteq W$, either $S$ or $W/S$ is in $F$, but not both.

\begin{holmath}
  \HOLthm[def]{ultrafilter.ultrafilter_def}
\end{holmath}

Principle filters are examples of the type of filters of our main interest, that is, the ultrafilters. 

\begin{holmath}
  \HOLthm{ultrafilter.principle_UF_UF}
\end{holmath}

Since ultrafilter are important, we may ask when can we get an ultrafilter on $W$ from a subset of $POW(W)$. We will prove later that the answer is for any subset of $POW(W)$ with finite intersection property, we can extend it into an ultrafilter. A subset of $POW(W)$ has finite intersection property if it is closed under finite intersection:

\begin{holmath}
  \HOLthm{ultrafilter.FIP_def}
\end{holmath}

Any proper filter $U$ has the finite intersection property. Moreover, for $B\subseteq W$ such that neither $B$ nor $W/B$ is in $U$, then inserting $B$ to $U$ does not destory the finite intersection property of $U$.

\begin{holmath}
  \HOLthm{ultrafilter.proper_filter_FIP}
  \HOLthm{ultrafilter.proper_filter_INSERT_FIP}
\end{holmath}

Proof: \texttt{proper_filter_FIP} is immediate from closure under finite intersection. We prove \texttt{proper_filter_INSERT_FIP}. Take a finite subset $S\subseteq \{B\}\cup U$, if $B\notin S$, then we are done by \texttt{proper_filter_FIP}. Otherwise, if we have $\bigcap S = B \cap (\bigcap U')$ for some finite $U'\subseteq U$, which implies $\bigcap U'\subseteq W/ B$, hence $W/B\in U$ by upward closure, contradicting the assumption that $W/B\notin U$.

Towards the goal of extending a set with finite intersection property, we firstly prove that such sets can be extended into a proper filter.

\begin{holmath}
  \HOLthm{ultrafilter.FIP_PSUBSET_proper_filter}
\end{holmath}

Proof: The desired proper filter is given by the generated filter of $S$, checking its property is straightfoward.

A proper filter which is not properly contained by any proper filter is called a maximal filter.
We can readily check ultrafilters are maximal. With the last two lemmas about finite intersection property, we can prove maximal filters are ultrafilters, so maximal filters and ultrafilters turns out to be the same thing.
% add a lemma about iff?
\begin{holmath}
  \HOLthm{ultrafilter.maximal_ultrafilter}
\end{holmath}

Proof: If a maximal filter $U$ on $W$ is not an ultrafilter, then for some $A$, either $A\in U\land W/A\in U$ or $A\notin U\land W/A\notin U$. In the first case we have $\emptyset\in U$, contradicts the properness of maximal filter. In the second case, by \texttt{proper_filter_INSERT_FIP}, the set $U\cup \{A\}$ has the finite intersection property, hence extends to a proper filter $U'$ by \texttt{FIP_PSUBSET_proper_filter}. But then $U$ is properly contained in $U'$, contradicts the maximality of $U$. This completes the proof. 

Together with the Zorn's lemma which is already in the HOL library, now we have all ingredients of the proof of ultrafilter.
%talk about Zorn's lemma in the HOL?

\begin{holmath}
  \HOLthm{ultrafilter.ultrafilter_theorem}
\end{holmath}

Proof:Given a property filter $F$, we will find out a ultrafilter containing it. Consider the set $S$ of all the proper filters containing $F$, ordered by inclusion, we will apply Zorn's lemma on $S$. The Zorn's lemma in the HOL looks like:

\begin{holmath}
  \HOLthm{set_relation.zorns_lemma}
\end{holmath}

Here $s$ is a set, $r$ is a relation that takes a pair of elements $(a,b)$ with $a,b\in s$ and return the truth value whether $a$ and $b$ are related. For a set $t$ with the same type as $s$, we have \HOLtm{chain t r} if for any $a,b\in t$, we have either $(a,b)\in r$ or $(b,a)\in r$. Here our $s$ is the set $S$ defined above. $r$ is defined by inclusion. For $A,B\in S$, $(A,B)\in r$ iff $A\subseteq B$, so a chain $T$ on $S$ is a subset of $S$ such that $A\subseteq B$ or $B\subseteq A$ for any $A,B\in T$.

The thing to check is that any chain $T$ on $S$ has an upper bound. If the chain is empty, then the upper bound is clearly $F$. Otherwise, we claim the union of the chain is the upper bound. To prove the claim, it amounts to check:

\begin{itemize}
  \item $\bigcup T$ is a proper filer containing $F$.
  \item Any element in $T$ is a subset of $\bigcup T$.
\end{itemize}
  The second item is trivial, the first one is by \texttt{UNION_proper_proper}.

Applying the Zorn's lemma gives a proper filter $X\in S$ which is an maximal element of $S$, it suffices to prove $X$ is an ultrafilter. The fact that $X$ is the maximal element of $S$ proves $X$ is a maximal filter, hence we are done by \texttt{maximal_ultrafilter}.

As a corollary, we can extend any set with finite intersection into an ultrafilter:

\begin{holmath}
  \HOLthm{ultrafilter.ultrafilter_theorem_corollary}
\end{holmath}

Proof: For $S\subseteq POW(W)$ with finite intersection property, by \texttt{FIP_PSUBSET_proper_filter}, we have a proper filter $P$ containing $S$, and $P$ extends to an ultrafiler $S\subseteq P\subseteq U$ by \texttt{ultrafilter_theorem}.

%A special kind of ultrafilters, called countably incomplete ultrafilters, will play an important role in our discussion about ultraproducts in the next interlude, so we also give some basics about countably incomplete ultrafilters here. Firstly, the definition is:

As an application of \texttt{ultrafilter_theorem_corollary}, we prove the existence of countably incomplete ultrafilters. A countably incomplete ultrafilter is an ultrafilter which is not closed under countably infinite intersection.

\begin{holmath}
  \HOLthm[def]{ultrafilter.countably_incomplete_def}
\end{holmath}

It is not hard to see any ultrafilter $U$ on the natural numbers $\mathbb N$ which does not contain any singleton is countably incomplete, since the countable intersection of the sets $\mathbb N/\{n\}$ which are members of $U$ yields the empty set.

\begin{holmath}
  \HOLthm{ultrafilter.example_2_72}
\end{holmath}

We find out an ultrafilter on $\mathbb N$ which does not contain any singleton, we will done if we can prove the existence of an ultrafilter on $\mathbb N$ which does not contain any finite set. By \texttt{ultrafilter_theorem_corollary}, it suffices to prove:

\begin{holmath}
  \HOLthm{ultrafilter.exercise_2_5_4_a}
\end{holmath}

Proof: By unfolding the definition of finite intersection property and induct on finiteness of the set we are intersecting.

A countably incomplete ultrafilter has useful features, one of them is that such an ultrafilter $U$ has a chain $I=I_0\supseteq I_1\supseteq I_2\supseteq\cdots$ such that each $I_i$ is in $U$, and $\bigcap_{n\in \mathbb N}I_n=\emptyset$.

\begin{holmath}
  \HOLthm{ultrafilter.countably_incomplete_chain}
\end{holmath}

Proof: By definition of countably incompleteness, there exists a family $X_n$ in $U$ indexed by natural numbers such that $\bigcap_{n\in \mathbb N}X_n=\emptyset$. Define $J_n:=\bigcap_{m\le n}X_n$, so $J_{n+1}\supseteq J_n$ for all $n\in\mathbb N$, and moreover $\bigcap_{n\in \mathbb N}I_n=\emptyset$. In the HOL, the family $J_n$ is defined using a primitive recursive function, defined by \HOLtm{ PRIM_REC (X 0) (\Xn n. Xn ∩ (X (n + 1)))}. We get the desired chain $I_n$ by inserting $I$ at the begining of $J_n$.

 
Our theory of ultrafilters built above is to enable us to talk about ultrafilter extensions. Ultrafilter extension is defined as a function that takes a model \HOLtm{M}, and give the extended model. The world set of \HOLtm{UE M} is the set of all the ultrafilters on the world set of \HOLtm{M}. And the relation of these worlds requires some explaination. For \HOLtm{X ⊆ M.frame.world}, there comes two interesting sets of worlds, one is the set of worlds that is linked to some world in $X$, and the other one is the set of worlds that are only linked to worlds in $X$. These two sets are dual to each other:

\begin{holmath}
  \HOLthm[def]{chap2_5.can_see_def}
  \HOLthm[def]{chap2_5.only_see_def}
  \HOLthm{chap2_5.can_only_dual}
  \HOLthm{chap2_5.only_can_dual}
\end{holmath}

Directly from their definitions, the worlds satisfying \HOLtm{DIAM phi} are the worlds that can see a world satisfying $\phi$. And the worlds satisfying \HOLtm{BOX phi} are the worlds that can only see worlds that satisfies $\phi$, and the set of worlds which only see $X\cap Y$ is the intersection of worlds only see $X$ and worlds only see $Y$:

\begin{holmath}
  \HOLthm{chap2_5.valt_can_see}
  \HOLthm{chap2_5.valt_only_see}
  \HOLthm{chap2_5.only_see_INTER}
\end{holmath}



We define two ultrafilter $u,v$ to be related if any world set of \HOLtm{M} in $v$ can only see world sets in $u$. Such a definition has a reformulation: for any world set of \HOLtm{M}, if the set of worlds that it can only see is in $u$, then this set is in $v$:

\begin{holmath}
  \HOLthm[def]{chap2_5.UE_rel_def}
  \HOLthm{chap2_5.exercise_2_5_5}
\end{holmath}

The ultrafilter extension is defined as follows:

\begin{holmath}
  \HOLthm[def]{chap2_5.UE_def}
\end{holmath}

The ultrafilter extension also changes the type of model, namely, it change the type of world set from $\beta$ to $(\beta\to bool)\to bool$, it is indeed an extension, in the sense that \HOLtm{M} is embedded in \HOLtm{UE M} by the function sending \HOLtm{w IN M.frame.world} to the principle ultrafilter \HOLtm{principle_UF w M.frame.world} generated by $w$. In general, this embedding does not necessarily give a generated submodel, nevertheless, we have an invariance result for this embedding:

\begin{holmath}
  \HOLthm{chap2_5.prop_2_59_ii}
\end{holmath}

This is actually a special case of the following proposition, where $u$ is taken as \HOLtm{principle_UF w M.frame.world}. This proposition captures the idea that ultrafilters are used to describe the sense of `most of', where the sets in the ultrafilters can be regarded as `sets which are large enough'. From this aspect, the proposition says that a formula $\phi$ is satisfied in an ultrafilter $u$ iff $\phi$ is satisfied at most of worlds in \HOLtm{M}, where the sense of `most of' is measured by $u$.

\begin{holmath}
  \HOLthm{chap2_5.prop_2_59_i}
\end{holmath}

Proof:
By induction on \HOLtm{phi}. Everything except for the diamond case is by unwinding the definitions of \HOLtm{UE M} and ultrafilter. We only give the proof of the diamond case. 

From right to left: Suppose \HOLtm{satis (UE M) u (DIAM phi)}, then \HOLtm{satis (UE M) u' psi} for some \HOLtm{UE_REL M u u'}. By inductive hypothesis, \HOLtm{satis (UE M) u' phi} implies $\{w\mid w \in M.frame.world\land satis \ M \ w \ phi\}\in u'$. And then by definition of \HOLtm{UE_rel M}, this implies \HOLtm{can_see M} $\{w\mid w \in M.frame.world\land satis \ M \ w \ phi\}\in u$. But this set is exactly the set $\{w | w \in M.frame.world \land satis\ M\ w\ (\Diamond \phi)\}$ by the observation in \texttt{valt_can_see}.

From left to right: Suppose  $\{w | w \in M.frame.world \land satis\ M\ w\ (\Diamond \phi)\}\in u$, we need to find out an ultrafilter $u'$ such that \HOLtm{UE_rel M u u'} and \HOLtm{satis (UE M) u' phi}. Using \texttt{exercise_2_5_5}, \HOLtm{UE_rel M u u'} is equivalent to $s:=\{Y\mid only\_see(Y)\in u\land Y\subseteq M.frame.world\}\subseteq u'$. We prove $s\cup\{w\mid  w \in M.frame.world\land satis \ M \ w \ phi\}$ has finite intersection property. It suffices to check (1) $s$ is closed under intersection, and (2) The interesection of any element in $s$ with $\{w\mid  w \in M.frame.world\land satis \ M \ w \ phi\}$ is non-empty. 

For (1), if $a,b\in s$, then both \HOLtm{only_see M a} and \HOLtm{only_see M b} are in $u$, and hence there intersection. By \texttt{only_see_INTER}, \HOLtm{only_see M a ∩ only_see M b = only_see M (a INTER b)}, hence $a\cap b\in u$.

For (2), let $Y\in s$, then \HOLtm{(only_see M Y) IN u}, as also $\{w | w \in M.frame.world \land satis\ M\ w\ (\Diamond \phi)\}\in u$, by closure under intersection for an ultrafilter, $only\_see(Y)\cap \{w | w \in M.frame.world \land satis\ M\ w\ (\Diamond \phi)\}\ne \emptyset$, we obtaine an element of $Y\cap \{w\mid  w \in M.frame.world\land satis \ M \ w \ phi\}$ from any element $x$ of it. As $x\in \{w | w \in M.frame.world \land satis\ M\ w\ (\Diamond \phi)\}$, there exists \HOLtm{y IN M.frame.world} such that \HOLtm{satis M y phi}, as $x\in only\_see(Y)$, we have $y\in Y$.

The rest of the proof of finite intersection property is done by induction. Hence by \texttt{ultrafilter_theorem_corollary}, there exists an ultrafilter $u'$ such that $s\cup\{w\mid  w \in M.frame.world\land satis \ M \ w \ phi\}\subseteq u'$. This is the $u'$ we want: We have \HOLtm{UE_rel M u u'} since $\{Y\mid only\_see(Y)\in u\}=s\subseteq u'$, and $\{w\mid w \in M.frame.world\land satis \ M \ w \ phi\}\in u'$, we get \HOLtm{satis (UE M) u' phi} by inductive hypothesis.

The above proposition leads to a proof of m-saturatedness of ultrafilter extensions.

\begin{holmath}
  \HOLthm{chap2_5.prop_2_61}
\end{holmath}

Proof:
Suppose \HOLtm{Σ} is a set of formulas which is finitely satisfiable in the set of successors of a world \HOLtm{u IN (UE M).frame.world}, we need to find a world \HOLtm{u' IN (UE M).frame.world} such that \HOLtm{UE_rel M u u'} and \HOLtm{satis (UE M) u' phi} for all \HOLtm{phi IN Σ}. By \texttt{exercise_2_5_5} and \texttt{prop_2_59_i}, it amounts to find an ultrafilter $u'$ on \HOLtm{M.frame.world} such that $\{Y\mid only\_see(Y)\in u\}\subseteq u'$ and $\{w\mid w \in M.frame.world\land satis \ M \ w \ phi\}\in u'$ for all \HOLtm{phi IN Σ}.

Consider the set $\Delta:= \{\{w\mid w \in M.frame.world \land \forall \phi.\phi\in s\implies satis \ M \ w\ \phi\}\mid FINITE \ s \land s\subseteq \Sigma\}\cup \{Y\mid only\_see\ M \ Y \in w\land Y\subseteq M.frame.world\}$. Similar as in the proof of \texttt{prop_2_59_i}, we check $\Delta$ has the finite intersection property. The only nontrivial thing to check is that for $a\in \{\{w\mid w \in M.frame.world \land \forall \phi.\phi\in s\implies satis \ M \ w\ \phi\}\mid FINITE \ s \land s\subseteq \Sigma\}$ and $b\in \{Y\mid only\_see\ M \ Y \in w\land Y\subseteq M.frame.world\}$, we have $a\cap b\ne\emptyset$.

Suppose $s \subseteq\Sigma$ is finite, and $b$ is a set of worlds in \HOLtm{M} such that \HOLtm{(only_see M b) IN u}, we show $\{w\mid w \in M.frame.world \land \forall\phi.\phi\in s\implies satis \ M \ w \phi\}\cap b\ne\emptyset$. Recall \HOLtm{Σ} is finitely satisfiable in the set of successors of $u$, we have a world $u''$ such that \HOLtm{UE_rel M u u''} and \HOLtm{satis (UE M) u'' phi} for all $\phi \in s$, in other worlds, $\{w\mid w \in M.frame.world\land satis \ M \ w \ phi\}\in u''$ for all $\phi\in s$. Then $\{w\mid w \in M.frame.world \land \forall\phi.\phi\in s\implies satis \ M \ w \phi\}\cap b\ne\emptyset$ is a big intersection of sets in $u''$, and hence is in $u''$. By \texttt{exercise_2_5_5} again, \HOLtm{UE_rel M u u''} gives $\{Y\mid only\_see (Y)\in u\land Y\subseteq M.frame.world\}\subseteq u''$, so $b\in u''$ as well. As two elements in $u''$ has nonempty intersection, we are done.

Hence by \texttt{ultrafilter_theorem_corollary}, there exists an ultrafilter $u'$ contains $\Delta$, it is trivial to check $u'$ is what we want.


Finally, as claimed at the begining of this chapter, we arrive at the characterisation of modal equivalence as bisimilarity somewhere else:

\begin{holmath}
  \HOLthm{chap2_5.thm_2_62}
\end{holmath}

Proof:Bisimulation implies modal equivalence by \texttt{thm_2_20}. For the reverse direction, if \HOLtm{w IN M.frame.world} and \HOLtm{w' IN M'.frame.world} are modal equivalence, then \HOLtm{(principle_UF w M.frame.world) IN (UE M).frame.world} is modal equivalent to \HOLtm{(principle_UF w' M'.frame.world) IN (UE M').frame.world}. As \HOLtm{UE M} and \HOLtm{UE M'} are m-saturated by \texttt{prop_2_61}, the result follows by \texttt{prop_2_54_DIST_TYPE}.

\section{Invariant under bisimulations and simulations}


           
\end{document}

% Local variables:
% mode: latex
% End:
