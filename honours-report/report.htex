\documentclass[a4paper,12pt,openany]{book}

\renewcommand{\baselinestretch}{1.2}
\newcommand{\blanknonumber}{\newpage\thispagestyle{empty}}
\usepackage{graphics}
%--------

%\setlength{\voffset}{-0.5in}
%\setlength{\textheight}{710pt} old setting

%\usepackage[margin=1in,footskip=0.25in]{geometry}
\usepackage{holtexbasic}
\usepackage{stmaryrd}
\usepackage{hyperref}
\usepackage{amsthm}
\usepackage{proof}
\usepackage{tikz}
\usetikzlibrary{arrows,calc,positioning,shapes,fit}




\newtheorem{thm}{Theorem}[chapter]
\newtheorem{defn}{Definition}[chapter]
\newtheorem{lm}[thm]{Lemma}
\newtheorem{coro}[thm]{Corollary}
\newtheorem{prop}[thm]{Proposition}
\renewcommand{\HOLConst}[1]{{\textsf{\upshape\small #1}}}
\renewcommand{\HOLinline}[1]{\ensuremath{#1}}
\renewcommand{\HOLFieldName}[1]{\HOLConst{#1}}
\renewcommand{\HOLTokenLeftrec}{\ensuremath{\langle\!\langle}}
\renewcommand{\HOLTokenRightrec}{\ensuremath{\rangle\!\rangle}}
\newcommand{\holthmenv}[1]{\begin{array}[t]{l}#1\end{array}}
\renewcommand{\HOLKeyword}[1]{\texttt{#1}}
\renewcommand{\HOLTokenBar}{\mbox{$|$}}

\setlength{\voffset}{-1in}
\setlength{\hoffset}{-1in}
\setlength{\oddsidemargin}{4cm}
\setlength{\evensidemargin}{2.5cm}
\setlength{\textwidth}{14.5cm}
\setlength{\textheight}{22.5cm}
\setlength{\topmargin}{2.5cm}


%\newcommand{\holref}[3]{\href{Https://github.com/u5943321/Modal-Logic/blob/5b0350b067222d3b8b435bde496518bb30744c32/#2Script.sml\#L#3}{#1}}
%\newcommand{\holreff}[3]{\href{Https://github.com/u5943321/Modal-Logic/blob/dbfbba74de0af276f982867714fcd6eee221196e/#2Script.sml\#L#3}{#1}}



%Mention term size somewhere?

\newcommand{\holref}[3]{\href{Https://github.com/u5943321/Modal-Logic/blob/14eba6e9c055ab77018ee5afe2b1323ffe415793/#2Script.sml\#L#3}{#1}}

\newenvironment{holmath}{\begin{displaymath}\begin{array}{l}}{\end{array}\end{displaymath}\ignorespacesafterend}
\newenvironment{solution}{\begin{proof}[Solution]}{\end{proof}}
%\renewcommand{\baselinestretch}{1.4}
%\setcounter{section}{-1}
\title{Modal Logic Mechanisation in HOL4}
\author{Yiming Xu}
\date{15/6/2018}


%simply type theory
%inductive types
%Record type.
%introduce syntax when use it.
%(\beta,\alpha) model
%how to read this thesis
%HM thm one direction 

\begin{document}
\frontmatter

\begin{titlepage}
\begin{center}

\vspace*{\fill} \Huge
                        Modal Logic Formalization in HOL4
\\
\vfill\vfill\Large
                          Yiming Xu
\\
\vfill\vfill
                          October 2019
\\
\vfill\vfill \normalsize
         A thesis submitted for the degree of Bachelor of Science (Honours)\\
 of the Australian National University
\vfill
         \includegraphics{ANU.eps}

\end{center}

\end{titlepage}


\blanknonumber\ \blanknonumber

\vspace*{\fill}

\begin{center}\emph{
%
For the four supervisors/lecturers who have been teaching me for no less than a whole year, namely: \\
Michael Norrish\\
Scott Morrison\\
James Borger\\
Vigleik Angeltveit
%
}
\end{center}

\vfill\vfill\vfill

\chapter*{Declaration}\label{declaration}
\thispagestyle{empty}
The work in this thesis is my own except where otherwise stated.

\vspace{1in}


\hfill\hfill\hfill
%
Yiming Xu
%
\hspace*{\fill}

\chapter*{Acknowledgements}\label{acknowledgements}
\addcontentsline{toc}{chapter}{Acknowledgements}

Firstly, big thanks to my project main supervisor Michael Norrish and co-supervisor Scott Morrison, as well as the two supervisors/lecturers James Borger and Vigleik Angeltveit who have provided me significant amount of guidance on my studying. The whole list of specific things which I need to thank you about is too long to be displayed here. But overall, I feel that I am the luckiest person in the world for having all of you teaching me all these interesting stuff and helping me developing all these useful skills. I will definitely try my best in my further studying to prove that I deserve all the good education from you.  

Secondly, thanks to all the honours students. Special thanks to Ameilia Han, Fredrick Yuan, Chris Hone, Mitchell Rowett, Josh Tomlin, Keeley Hoek, Michael Howes, Kelly Maggs, Ben Leedom, for both collaborating on assignments and chatting. 

Moreover, thanks for Robert Culling, for being my tutor from Algebra 1 to Algebra 3, and proofreading. I would also thank Zoey Chen for feeding me. 


Finally, thanks to my parents for supporting my studying through all these years. 
\tableofcontents

\mainmatter

\chapter{Introduction}
\label{chapter1}


There are four questions to answer to make sense of our title:
\section{What is modal logic?}

It is hard to find a concise answer to this question. As stated in the textbook `Modal Logic' by Blackburn et al, if you ask three modal logicians, you are likely to get at least three different answers. Therefore, we will begin by asking what is modality. Let us consider first-order logic for a moment. Suppose $x$ is a person. When we say `$x$ is happy', we are applying the predicate `is happy' to the person $x$. But also in our daily conversation, we may say something like `perhaps $x$ is happy' or `$x$ must be happy'. Here, `perhaps' and `must' are used to describe the `mode' of the predicate `is happy', and they are examples of  \emph{modalities}. The modalities `perhaps' and `must', which are canonically called `possibly' and `necessarily' in formal modal logic, are denoted as `$\Diamond$' and `$\Box$' respectively. Let $P$ denote the predicate `is happy'. In formal language, we can then write `perhaps $x$ is happy' as `$\Diamond Px$', and write `$x$ must be happy' as `$\Box Px$'. 

In the above discussion, we introduced modalities by considering their semantic meanings. But historically, when logicians start thinking about capture modalities using formal logic, they enriched propositional logic by adding a collection of extra symbols, called modal operators, together with some axioms describing their behavior, but there was no satisfactory way of defining a formal semantics of those modal operators. Before they realized the usefulness of the semantic tools, modal logicians had a hard time attempting to solve problems of distinguishing different systems of axioms. But more than 40 years after the concept of modal logic was established, the usage of Kripke models brought many interesting result to this subject. The results on modal logic using Kripke models are conventionally called `modal model theory'. The work on modal model theory is exactly what we are formalizing in this project. 

Nowadays, modal logic is widely adopted in many disciplines, including, but not limited to, mathematics, philosophy, linguistics, and economics. In particular, the development of modal logic and computer science support each other. With the topics taken from computer science and everywhere else, modal logic is growing rapidly, and we have great chance to see more and more interesting application of this subject to both theoretical research and daily life.


\section{What is HOL4?}

For a short answer, HOL4 is a theorem prover which is used to prove theorems interactively on a computer. Here we stress the fact that we need to interact with the machine rather than let it prove theorems automatically. In fact, for a decidable system, where there exists an algorithm that decides if the given statement is true, theorems can be proved automatically in the sense that we can give a statement to a machine and let the machine give the answer that whether the given statement holds. However, according to Godel's incompleteness theorem, it is no algorithm that can determine the truth value of every mathematical statement. Hence to prove mathematical theorem, we do need to interact with the machine. Interactive theorem provers can use automatic techniques. For instance, as first-order logic and Peano arithmetic are both decidable, there is an automatic first-order solver implemented in HOL4, and simplifiers in HOL4 can automatically prove theorems about basic arithmetic. 

There are many theorem provers based on various foundation systems: HOL4 is based on simple type theory, and there exist other theorem proves based on dependent type theory (e.g. Lean, Coq) and set theory (Mizar, metamath). Each of these systems has their advantages, but there is a trade-off: Simple type theory is widely considered as less expressive but rather easy to understand and to be implemented, whereas for more expressive systems, it takes longer for the machine to execute a proof step. 

%HOL4 is on the sweet spot of the trade-off, We will identify where the lack of expressiveness cause problems. 

\section{Why is the combining of the two interesting?}

As discussed above, modal model theory has a long history and many theorems in modal model theory have been proved since the usage of Kripke model became popular. Nevertheless, none of these theorems have been machine checked. By formalizing modal model theory in a computer, we will make sure that we have    understood every detail of the formalized theorems, find out hidden assumptions, and correct minor errors in the statements. And by formalizing it in HOL4, we will demonstrate that although simple type theory is a rather weak foundation system and does lack on express, it is still capable of capturing most of the theorems we are interested in. We will identify where the lack of expressiveness causes problems.


\section{What have we done?}

My project is to formalize some theorems of modal model theory, based on the first two chapters of the textbook `Modal Logic' Blackburn et al. At the beginning of the textbook, the authors give three slogans of this subject:

\begin{description}
\item [Slogan 1:] Modal languages are simple yet expressive languages for talking about relational structures.
\item [Slogan 2:] Modal languages provide an internal, local perspective on relational structures.
\item [Slogan 3:] Modal languages are not isolated formal systems.
\end{description}

A reader will see evidence of the three slogans consecutively in this thesis. The first and second chapter is about formalizing basic properties of modal formulas and their semantical behaviour on models of propositional modal logic. In the fourth chapter, we prove the locality of a modal language by proving the finite model property of modal formulas. From the fifth chapter onwards, we begin putting modal logic and first-order logic together. 


In summary: 
\begin{itemize}
\item  By now, every theorem proved in the book up to section 2.7 that can be captured by the basic modal language and the HOL4 are formalised. We take the proofs of those theorems from the textbook, and our definitions, theorems and proofs are taken to be as close as possible to the original version of the mathematical statements appear in the book. 


\item There are some results which are only used but not proved in the textbook. To be safe when using them, we formalize them all. The most significant part is the work on ultraproducts which only depend on the work of John Harrison on first-order logic. We will discuss about ultraproducts as a interlude in this thesis when we are about to use them. 


\end{itemize}




\chapter{Getting Started}

\section{HOL4 syntax}

Our theorem prover HOL4 is based on simple type theory. This makes most of statements in HOL4 straightforward to be read. We can read off the conjunctions, disjunctions and implications in the statement directly. However, there are some special syntax for HOL4 which is worthwhile to be explained first. 
\begin{itemize}
\item Inductive types: When defining inductive types, we write bars between the constructors of the type.

\item Record types: We put the fields of a record type into `$\HOLTokenLeftrec\cdots \HOLTokenRightrec$', and separate the fields using `:'. For instance, if define a type with `$\sf Mytype := \HOLTokenLeftrec\ \sf field1 := \cdots; field2 :=\cdots \HOLTokenRightrec$', where the `$\cdots$' will be a type. If $\sf Eg$ is of type $\sf Mytype$, we can write $\sf Eg.field1$ to get the $\sf field1$ of $\sf Eg$. 

\item Function application: Unless in what we write in common mathematical textbooks, when we apply a function $f$ of type $\alpha\to \beta$ on a term $a$ of type $\alpha$, we write $f \ a$ instead of $f(a)$. For the application of a functions $f$ that takes a pair, we write $f \ a \ b$ instead of $f(a,b)$, which we usually do when writing mathematical arguments. 

\item $\lambda$-abstraction: We can use $\lambda$-abstraction to define functions. For instance, the function \HOLtm{\i. f i} is the same as the function $f$, since it means that `for each $i$, send $i$ to $f\ i$'. 

\item Primitive recursive function: We can use primitive recursion to define functions from the type $num$ of natural numbers. That is, defining function by induction. We write \HOLtm{PRIM_REC x f}, where $f$ is of type $\alpha\to num\to\alpha$, for the function from $num$ to a type $\alpha$ defined by sending $0$ to $x$, and sending the successor \HOLtm{SUC m} of a natural number $n$ to \HOLtm{f (PRIM_REC x f m) m}. 

\item Quantification: When using quantifier in HOL4, we put a dot after the thing that we are quantifying on. For example, \HOLtm{!x. P x} reads `for all $x$, $P x$'  and \HOLtm{?x. P x} reads `exists an $x$ such that $P x$', where $P$ is a predicate. When quantifying over multiple things, we only write one quantifier at the very beginning. For example, `\HOLtm{!x y. R x y}' reads `for all $x$, for all $y$, we have $R x y$' and `\HOLtm{?x y. R x y}' reads `exists $x$ and $y$ such that $R x y$', where $R$ is a relation.

\item Useful functions:
\begin{itemize}
\item \HOLtm{CARD}: The function \HOLtm{CARD} takes a set, and gives the natural number which is its cardinality.

\item \HOLtm{count}: The function \HOLtm{count} takes a natural number $n$, and gives the set $\{0,1,\cdots,n-1\}$.

\item \HOLtm{BIJ}: The function \HOLtm{BIJ} takes a term of type $f:\alpha\to \beta$, an $\alpha$-set $A$ and a $\beta$-set $B$, and gives the boolean value \HOLtm{T} if and only if $f$ is a bijection form $A$ to $B$, similar for the functions \HOLtm{INJ} and \HOLtm{SURJ}.

\item \HOLtm{CHOICE}: The function \HOLtm{CHOICE} is just the choice function. For a non-empty set $X$, the only thing we know about \HOLtm{CHOICE X} is that \HOLtm{(CHOICE X) IN X}.

\item \HOLtm{RESTRICT}: The function \HOLtm{RESTRICT} takes a relation on terms of type $\alpha$ and an $\alpha$-set $A$, and gives a relation \HOLtm{RESTRICT R A} defined as for any term $x$ and $y$ of type $\alpha$, we have \HOLtm{(RESTRICT R A) x y}, which reads `$x$ and $y$ are related by the relation \HOLtm{RESTRICT R A}', if and only if \HOLtm{x IN A} and \HOLtm{y IN A} and \HOLtm{R x y}. 

\item \HOLtm{R^*} and \HOLtm{R^+}: For a relation \HOLtm{R} on $\alpha$-terms, we use \HOLtm{R^*} to denote its reflexive and transitive closure, and use \HOLtm{R^+} to denote its transitive closure. 

\end{itemize}


\item Lists: There are some functions which deal with lists:
\begin{itemize}
\item \HOLtm{LENGTH}: The function \HOLtm{LENGTH} takes a list and gives its length, which is a natural number.

\item \HOLtm{HD}: The function \HOLtm{HD} takes a list and give the first member of it. 

\item \HOLtm{EL}: The function \HOLtm{EL} takes a list, a natural number $n$, and give the $n$-th member of it.

\item \HOLtm{LAST}: The function \HOLtm{LAST} takes a list and give the last member of it. 

\item \HOLtm{MAP}: The function \HOLtm{MAP} takes a function of type $\alpha\to\beta$ and an $\alpha$-list $l$ and gives the $\beta$-list such that the $n$-th member is $f\ a$, where $a$ is the $n$-th member of $l$.


\end{itemize}

\end{itemize}

\section{The basic setups}
In our formalisation, we only consider the basic modal language, in which the only one primitive modal operator is the `$\Diamond$'. For a type $\alpha$, an $\alpha$-modal formula is either of form \HOLtm{VAR p}, where $p$ is of type $\alpha$, or a disjunction $\phi\lor \psi$ of two $\alpha$-modal formulas, or the falsity $\bot$, or a negation $\lnot \phi$ of an $\alpha$-modal formula $\phi$, or else in the form $\Diamond \phi$ where $\phi$ is an $\alpha$-modal formula.


In HOL4, we create a data type called `form' of the formulas of this modal language. To define a new type, we give a list of ways to construct terms of the type, separated with the symbol `$\mid$'. 




\begin{defn}[\holref{Modal formulas as a type}{chap1}{13}]
An $\alpha$-modal formula as described above is specified formally in HOL4 as:
\begin{holmath}
  \HOLthm{chap1.datatype_form}
\end{holmath}
\end{defn}

Note that \HOLtm{DISJ} is of type $\alpha \ form \to (\alpha \ form \to \alpha\ form)$, which means that it can be regarded as a function that takes two $\alpha$-modal formulas and gives an $\alpha$-modal formula. In particular, once \HOLtm{DISJ} appears, the two arguments after it are always $\alpha$-modal formula, otherwise it does not make sense. We will write `\HOLtm{DISJ phi1 phi2}' for `\HOLtm{DISJ} $\phi_1 \ \phi_2$' afterwards. We can also regard $\lnot$ and $\Diamond$ as functions of type $\alpha \ form\to \alpha \ form$. The functions \HOLtm{VAR}, \HOLtm{DISJ}, \HOLtm{NOT}, \HOLtm{DIAM} together with \HOLtm{FALSE} are called the \emph{constructors} of the type of $\alpha$-modal formulas. For abbreviation, we will write $\phi_1\lor \phi_2$ for \HOLtm{DISJ phi1 phi2} throughout this thesis. From now on, when we talk about $\alpha$-modal formula, we will call a term of type $\alpha$ a \emph{propositional letter}. We will just call an $\alpha$-modal formula an $\alpha$-formula if no confusion arises. 

The non-primitive connectives, the conjunction `$\land$', the implication `$\to$', and the truth `$\top$', are defined in a standard way as $\phi_1\land \phi_2:=\lnot (\lnot \phi_1\lor \phi_2)$, $\phi_1\to \phi_2 := \lnot \phi_1\lor \phi_2$ and $\lnot\bot$ respectively.


We have a modal operator that is dual to the diamond: the box $\Box \phi:= \lnot\Diamond \lnot \phi$, as an analogue of the duality between the universal quantifier and the existential quantifier, in the sense that $\exists$ is defined to be $\lnot\forall\lnot$ in classical logic. 

Having defined the syntax of formulas, we can now define their \emph{semantics}. It is easy to come up with a way to interpret formulas which are no more than combinations of propositional letters using the connectives `$\lor$' and `$\lnot$'. However, to interpret a modal formula that involves diamonds, we need to assign the syntactical notation `$\Diamond$' an `actual meaning'. For a first example, consider a two-point set $\{a,b\}$, and let the relation be $\{(a,b)\}$. Let the propositional $p$ to be true on both $a$ and $b$. Now consider the modal formula \HOLtm{DIAM (VAR p)}. We say \HOLtm{DIAM (VAR p)} is true at $a$, since $b$ is a point that is related to $a$, where the formula \HOLtm{VAR p} holds there. On the other hand, \HOLtm{DIAM (VAR p)} does not hold at $b$, since there is no world related to $b$. In general, we say a modal formula \HOLtm{DIAM phi} holds at a world if there exists a world it is related to, where \HOLtm{phi} is satisfied. 
 
Therefore, to interpret modal formulas, we need a \emph{relational structure}. A relational structure consists of a set and a binary relation on it, such a relational structure is called a \emph{frame} in the rest of the thesis. If in addition, for each element of the underlying set of the relational structure, it is equipped with an assignment of truth values on propositional letters, then we will have enough information to interpret every modal formula by interpreting $\Diamond \phi$, where $\phi$ is a modal formula, as above. Accordingly, `\HOLtm{BOX phi}' will be interpreted as `for every point that is related to the current state, \HOLtm{phi} is true'. 

Returning to our formalization, we call a frame together with an assignment of truth values on propositional letters at each point a \emph{model}, or a \emph{Kripke model} of modal formulas. The underlying set of a model is called the `set of worlds' of the model.  

\begin{defn}[\holref{Modal model as a type}{chap1}{76}]
A $\beta$-frame consists of a world and a relation, where the world has type $\beta\to bool$ and the relation has type $\beta\to \beta\to bool$. 
A model for modal logic is a frame together with a function called $\sf valt$, which assigns truth values of propositional letters at each world. 
\begin{holmath}
  \HOLthm[:'b/:'a]{chap1.datatype_frame}\\
  \HOLthm[:'b/:'a,:'a/:'b]{chap1.datatype_model}
\end{holmath}
\end{defn}
Here the $\HOLTokenLeftrec\cdots\HOLTokenRightrec$ is the notation for defining a structure. When we say a $(\alpha,\beta)$-model, we mean a model for $\alpha$-formulas with a $\beta$-set as its underlying set.
 For a model \HOLtm{M}, \HOLtm{M.valt} will be called the \emph{valuation} in the discussion afterwards.  
In the rest of the thesis, we use the notation \HOLtm{M.frame.world}, \HOLtm{M.frame.rel} and \HOLtm{M.valt} to denote the world set, the relation, and the valuation of the model \HOLtm{M}. 

In HOL4, a $\beta$-set is the same as the function that takes a term $a$ of $\beta$ and gives the truth value $\sf T$ if and only if $a$ is in the set, and hence is of type $\beta\to bool$. 
Note that in a $(\alpha,\beta)$-model \HOLtm{M}, \HOLtm{M.valt} is a function takes a propositional letter $p$ of type $\alpha$ and $w$ of type $\beta$, and give a truth value. It can be regarded as assigning each propositional letter $p$ an assignment of truth value on terms of type $\beta$, where a term $w$ of type $\beta$ is assigned \HOLtm{T} if and only if \HOLtm{M.valt p w}. Alternatively, it can be regarded as assigning each term $w$ of type $\beta$ an assignment of truth value on terms of type $\alpha$, where a term $p$ of type \HOLtm{α} is assigned \HOLtm{T} if and only if \HOLtm{M.valt p w}. 

%For a model \HOLtm{M}, \HOLtm{M.valt} will be called the \emph{valuation} in the discussion afterwards.  In the rest of the thesis, we use the notation \HOLtm{M.frame.world}, \HOLtm{M.frame.rel} and \HOLtm{M.valt} to denote the world set, the relation, and the valuation of the model. 

%As for the interpretation of modal formulas, it is again an inductively-defined predicate, which takes a model, a world in the model, a modal formula, and give the truth value of the formula interpreted in the model \HOLtm{M} at the world $w$. We say a formula $\phi$ is satisfied at the world $w$ in a model \HOLtm{M} when the formula is true under our semantical interpretation. Here `\HOLtm{satis M w phi}' reads `$\phi$ is satisfied at the world $w$ in \HOLtm{M}'.
We interpret modal formulas using the function called `satisfaction'. 
\begin{defn}[\holref{Satisfaction}{chap1}{94}]
Satisfaction is an inductively-defined predicate on modal formulas, which takes a model, a world in the model, a modal formula, and give the truth value of the formula interpreted in the model \HOLtm{M} at the world $w$. `\HOLtm{satis M w phi}' reads `$\phi$ is satisfied at the world $w$ in \HOLtm{M}'. For \HOLtm{w IN M.frame.world}, a propositional letter $p$ is satisfied at $w$ if \HOLtm{M.valt p w} is the boolean value $\sf T$. Falsity is never satisfied, a negation of a formula $\phi$ is satisfied if $\phi$ is not satisfied, a disjunction is satisfied if at least one of its disjuncts is satisfied, and a $\Diamond \phi$ is satisfied if there exists a world in the model that $w$ is related to where $\phi$ is satisfied. 
\begin{holmath}
\begin{array}{rcl}
  \HOLthm[aligneddef,phi/form]{chap1.satis_def}
\end{array}
\end{holmath}
\end{defn}

Observe that instead of defining the satisfaction of \HOLtm{VAR p} at $w$ to be \HOLtm{w IN M.valt p}, we include the extra condition that $w$ must live in the underlying set of \HOLtm{M}. It is because HOL4 allows us to write \HOLtm{satis M w phi}, for every $w$ of the correct type, even if it does not belong to the underlying set of \HOLtm{M}. A reader may think that we can define our satisfaction predicate as a function that takes a model \HOLtm{M}, and make sure that `satisfaction on the model \HOLtm{M}' is a function from the worlds set of \HOLtm{M} and the set of modal formulas to the set \HOLtm{{T;F\}}. We can do this in dependently typed language, but actually, it is not allowed in HOL4: we cannot make the domain and the codomain an intrinsic property of a function. The notion of a function from an $\alpha$-set $A$ to a $\beta$-set $B$ is not primitive. Such a function is a term $f$ of type $\alpha\to \beta$, which the additional property that \HOLtm{!a. a IN A ==> (f a) IN B}. So to specify such a function, we must define the function on all the terms of $\alpha$. 


On each model, the truth value of each modal formula is completely determined by the truth values of the propositional letters appear in it. 

\begin{prop}[\holref{\texttt{exercise_1_3_1}}{chap1}{621}]\label{2.1}
If two models \HOLtm{M1} and \HOLtm{M2} have the same frame and agree on the valuation on all the propositional letters in \HOLtm{phi}, then \HOLtm{phi} is satisfied at a world $w$ in \HOLtm{M1} if and only if $\phi$ is satisfied at $w$ in \HOLtm{M2}.
\begin{holmath}
  \HOLthm{prettyPrinting.ppexercise_1_3_1}
\end{holmath}
\end{prop}

For two modal formulas using the same type of propositional letters, we have the notion of being \emph{equivalent}. 
\begin{defn}[\holref{Equivalence}{IBCDNFrevised}{17}]
If \HOLtm{phi1}, \HOLtm{phi2} are \HOLtm{α} formulas, \HOLtm{equiv0 (:β) phi1 phi2} means for every $(\beta,\alpha)$-model \HOLtm{M} and every world \HOLtm{w} in it, we have \HOLtm{satis  M w phi1 <=> satis M w phi2}.
\begin{holmath}
  \HOLthm[def,showtypes,(:'b)/μ,width=70]{prettyPrinting.ppequiv0_def}\\[3mm]
\end{holmath}
\end{defn}

A notable thing is that we need to refer to the type of models when talking about equivalence of formulas. We are not allowed to omit the type parameter \HOLtm{(:β)} in the definition, since then there will be a type, namely the type of the underlying set of the models we are talking about, that only appears on the right-hand side but not on the left-hand side of the definition, which is not allowed in HOL4. Also, we are not allowed to quantify over types, so it is also impossible to define the equivalence to be \HOLtm{!μ. equiv μ phi1 phi2}, where $\mu$ denotes a type. Therefore, because of such a specific problem in HOL4 (actually, in simple type theory), this definition is not encoding the equivalence in mathematical sense precisely, since when we mention equivalence of formulas in usual mathematical language, we are implicitly referring to the class of all models, but the constraint here bans us from talking about all models of all possible types at once. Such a constraint give arise to some problems in our formalization, as we will see in later chapters. 

We can immediately prove that for every type $\alpha$, if \HOLtm{equiv0 (:β) phi1 phi2} then \HOLtm{equiv0 (:β) (DIAM phi1) (DIAM phi2)}. If we use set theory as our foundation, then the converse can be proved very easily: If two diamond formulas \HOLtm{DIAM phi1} and \HOLtm{DIAM phi2} are equivalent, then for a contradiction, suppose that $\phi_1$ and $\phi_2$ are not equivalent, then there exists a model \HOLtm{M} and a world $w$ such that $w$ satisfies $f$ but not $g$. We can add a world $v$ to the world set of \HOLtm{M} that is only related to $w$, then $v$ will be a witness of the fact that \HOLtm{DIAM (phi1)} and \HOLtm{DIAM (phi2)} are not equivalent. But under our definition in the HOL4, if the \HOLtm{(:β)} is a finite type, the proof is blocked: since we cannot make sure that we can come up with a world $v$ which is not already being used by \HOLtm{M}, and add a fresh world to add to \HOLtm{M} which is only related to $w$. However, for every model, regardless of its world set is of a finite type or not, we can always create a copy of the model in an infinite type. So it is harmless to only play with equivalence of formulas for models whose underlying set is of an infinite type. 


\begin{prop}[\holref{\texttt{equiv0_DIAM}}{chap2_3}{980}]\label{2.2}
For two modal formulas \HOLtm{phi1} and \HOLtm{phi2}, \HOLtm{phi1} and \HOLtm{phi2} are equivalent on models with $\beta$-world sets where $\beta$ is an infinite type if and only if $\Diamond \phi_1$ and $\Diamond \phi_2$ are equivalent on models with $\alpha$-world sets. 
\begin{holmath}
  \HOLthm[phi1/f,phi2/g,:'b/:'a]{prettyPrinting.ppequiv0_DIAM}
\end{holmath}
\end{prop}




\chapter{Invariant results and bisimulations}


The key concept we are interested in this chapter is called `modal equivalence'.

\begin{prop}[\holref{\texttt{modal_eq_tau}}{chap2_5}{54}]
Two worlds \HOLtm{w IN M.frame.world} and \HOLtm{w' IN M'.frame.world} are called to be `modal equivalent' (notation: \HOLtm{modal_eq M M' w w'}) if they satisfy the same set of modal formulas. 
\begin{holmath}
  \HOLthm[phi/form,M'/Mp]{chap2_5.modal_eq_tau}
\end{holmath}
\end{prop}

The three sections in this chapter are about three ways to get modal equivalence, namely via generated submodels, bounded morphisms, and bisimulation. The first two construction will be proved to be special cases to be the third.  


\section{Submodels and generated submodels}


Given a model, we have an operation allows us to restrict our scope to a smaller model without changing satisfaction of modal formulas, this is called the `generated submodel' construction. When we say `\HOLtm{M1} is a submodel of \HOLtm{M2}', we mean all the information of \HOLtm{M1} is inherited from that of \HOLtm{M2}. 
\begin{defn}[\holref{Submodel}{chap2_1}{60}]
By \HOLtm{SUBMODEL M1 M2}, we mean:
\begin{itemize}
\item The world set of \HOLtm{M1} is a subset of the world set of \HOLtm{M2}.
\item For two worlds $w_1,w_2$ in \HOLtm{M1}, we have \HOLtm{M1.frame.rel w1 w2} iff \HOLtm{M2.frame.rel w1 w2}. 
\item For every world of \HOLtm{M1}, its valuation of propositional letters is exactly the same as that in \HOLtm{M2}.
\end{itemize}
\begin{holmath}
  \HOLthm[def,width=60]{prettyPrinting.ppSUBMODEL_def}
\end{holmath}
\end{defn}

It is not necessary that submodel construction preserves modal satisfaction. Although the clause about relation says that for every pair of worlds $w_1,w_2$ in \HOLtm{M1}, they are related in \HOLtm{M1} iff they are related in \HOLtm{M2}, it can be the case that $w_1,w_2$ are worlds in \HOLtm{M2} such that \HOLtm{M2.frame.rel w1 w2}, where $w_2$ is the only world that $w_1$ is related to, but \HOLtm{w1 IN M1.frame.world} whereas \HOLtm{w2 NOTIN M1.frame.world}. As a consequence, if we have \HOLtm{satis M2 w2 phi}, then we will have \HOLtm{satis M2 w1 (DIAM phi)} but not \HOLtm{satis M1 w1 (DIAM phi)} since there is no world in \HOLtm{M1} which has a relation from \HOLtm{w1}. To avoid such situation, we can add an extra constraint to make sure that for each world $w$ in \HOLtm{M2}, if it is included in the world set of \HOLtm{M1}, then every world \HOLtm{w' IN M2.frame.world} such that \HOLtm{M2.frame.rel w w'} must also be included to the world set of \HOLtm{M1}. A submodel which satisfies this extra condition is called a generated submodel (notation: `\HOLtm{GENSUBMODEL M1 M2}' reads `\HOLtm{M1} is a generated submodel of \HOLtm{M2}').

%(Give an easy example?)!!!!!4

\begin{defn}[\holref{Generated submodel}{chap2_1}{68}]
\begin{holmath}
  \HOLthm[def,width=60]{prettyPrinting.ppGENSUBMODEL_def}
\end{holmath}
\end{defn}

Note that for a model \HOLtm{M1} to be a generated submodel of \HOLtm{M2}, if \HOLtm{w1 IN M1.frame.world}, we only require all the worlds $w_2$ which have a link from a world $w_1$ in \HOLtm{M2} to be also included in the world set of \HOLtm{M1}. But if $w_1,w_2$ are in \HOLtm{M2} and \HOLtm{w2 IN M1.frame.world}, we are allowed not to include \HOLtm{w1} into \HOLtm{M1}. This is because the `$\Diamond$' operator in modal formulas cannot `look back', in the sense that adding extra connections or discard connections \emph{towards} a world $w$ does not change the satisfaction of modal formulas at $w$.
 
Generated submodels do preserve modal satisfaction:
\begin{prop}[\holref{\texttt{prop_2_6}}{chap2_1}{75}]\label{3.2}
\begin{holmath}
  \HOLthm[w/n]{chap2_1.prop_2_6}
\end{holmath}
\end{prop} 


\section{Morphisms between models}

In this section, we introduce `morphisms' between models. Similar as in category theory, the notion of `morphisms' here is used to describe maps that preserve structures. For instance, `homomorphism' is the weakest notion of `structure-preserving map':
\begin{defn}[\holref{Homomorphism}{chap2_1}{120}]
A homomorphism from a model \HOLtm{M1} to a model \HOLtm{M2} (notation: \HOLtm{hom M1 f M2}) is a function from the world set of \HOLtm{M1} to the world set of \HOLtm{M2} that preserves relation and valuation of propositional letters.
\begin{holmath}
  \HOLthm[def]{prettyPrinting.pphom_def}
\end{holmath}
\end{defn}

We should point out that the last clause only says `relations in the source model is preserved by a homomorphism', and we are allowed to have relations in the target model which is not from a relation in the source model. Because of this, we cannot guarantee every world and its image in the target to satisfy exactly the same set of modal formulas. Actually, there exists more than one notions of morphisms which gives equivalences, but most of these notions are too strong to be interesting. The only one among these notions that we are interested in here is \emph{bounded morphism}. 


\begin{defn}[\holref{Bounded morphism}{chap2_1}{213}]
A bounded morphism between two models \HOLtm{M1} and \HOLtm{M2} is a function $f$ between their world sets such that:
\begin{itemize}
\item For every world $w$ of \HOLtm{M1}, $w$ and \HOLtm{f w} satisfies the same propositional letters.
\item If $w,v$ are worlds in \HOLtm{M1} such that \HOLtm{M1.frame.rel w v}, then we require \HOLtm{f w} and \HOLtm{f v} to be worlds in \HOLtm{M2} such that \HOLtm{M2.frame.rel (f w) (f v)}.
\item If \HOLtm{w IN M1.frame.world} and we have \HOLtm{M2.frame.rel (f w) v'} for some \HOLtm{v' IN M2.frame.world}, then we can find a world \HOLtm{v} in \HOLtm{M1} such that \HOLtm{M1.frame.rel w v} and \HOLtm{f v = v'}.
\end{itemize}
\begin{holmath}
   \HOLthm[def,M1/M,M2/M']{chap2_1.bounded_mor_def}
\end{holmath}
\end{defn}

From above, the notion of  bounded morphism is a strengthen of homomorphism. For a homomorphism, we only need propositional letters to be preserved, but for bounded morphism, we strengthen the condition on propositional letters to be an `if and only if'. Moreover, we added a `backward condition' on relations. 

Bounded morphism preserved modal satisfaction, in the following sense:

\begin{prop}[\holref{\texttt{prop_2_14}}{chap2_1}{227}]\label{3.3}
If \HOLtm{f} is a bounded morphism from \HOLtm{M1} to \HOLtm{M2}, then for each modal formula \HOLtm{phi} and each world \HOLtm{w} in \HOLtm{M1}, \HOLtm{satis M1 w phi <=> satis M2 (f w) phi}.
\begin{holmath}
  \HOLthm[M1/M,M2/M',phi/form]{chap2_1.prop_2_14}
\end{holmath}
\end{prop}


The above result is very useful. As an application, now we use it to prove the \emph{tree-like property} of the basic modal language. The tree-like property says that for each formula $\phi$ satisfied on some point in some model, there exists a tree-like model such that $\phi$ is satisfied at the root of the tree. As the name indicates, a tree-like model is a model such that its underlying frame is a tree. 
\begin{defn}[\holref{Tree}{chap2_1}{319}]
The predicate \HOLtm{tree} takes a frame $H$ and a point $r$, and \HOLtm{tree H r} means that $H$ is a tree with root $r$.  A frame \HOLtm{H} is a tree with root $r$ if:
\begin{itemize}
\item We have $r$ is a world in of $H$.
\item For any world \HOLtm{w IN H.world}, we have $r$ is related to $w$ via the reflexive and transitive closure of \HOLtm{H.rel}. 
\item For any world \HOLtm{w IN H.world}, it cannot be linked back to the root $r$ via the reflexive and transitive closure of \HOLtm{H.rel}. 
\item For any world \HOLtm{w IN H.world}, it has a unique predecessor. 
In HOL4:
\end{itemize}
\begin{holmath}
   \HOLthm[def,H/S,w/t,w/r0,w0/t0]{chap2_1.tree_def}
\end{holmath}
\end{defn}

A tree has no loop:

\begin{lm}[\holref{\texttt{tree_no_loop}}{chap2_1}{346}]
Every world in a tree cannot be linked back to itself via the transitive closure of the relation defined on the tree. 
\begin{holmath}
  \HOLthm[H/s,w'/t0,w/t]{prettyPrinting.pptree_no_loop}
\end{holmath}
\end{lm}

Every tree-like model is \emph{rooted}, where rooted models are just submodel generated by a singleton set. As an instance of generated models, a rooted model needs to be sitting in an ambient model. 

\begin{defn}[\holref{Rooted model}{chap2_1}{380}]
The predicate `\HOLtm{rooted_model}' takes three parameters: The model itself, the point that generates it, and the ambient model that it is sitting in. We read `\HOLtm{rooted_model M1 x M2}' as \HOLtm{M1} is a rooted model at root $x$ sitting in the ambient model \HOLtm{M2}. 
\begin{holmath}
  \HOLthm[def,M1/M,M2/M',width=60]{prettyPrinting.pprooted_model_def}
\end{holmath}
\end{defn}

We now prove the tree-like property of modal formulas:
\begin{prop}[\holref{\texttt{prop_2_15_corollary}}{chap2_1}{818}]\label{3.5}
\begin{holmath}
  \HOLthm[M1/M,M/M',phi/form,r/s,showtypes]{prettyPrinting.ppprop_2_15_corollary}
\end{holmath}
\end{prop}
\begin{proof}
Suppose \HOLtm{satis M1 w phi}. Let \HOLtm{M2} be the rooted model generated by \HOLtm{w}, then \HOLtm{satis M2 w phi} by Proposition \ref{3.2}. To find a tree-like model satisfying \HOLtm{phi}, by Proposition \ref{3.3}, it suffices to prove \HOLtm{M2} is the image of some bounded morphism from some tree-like model \HOLtm{M3} where the root of the tree is mapped to $w$, then \HOLtm{M3} will be the \HOLtm{M} we want. We construct \HOLtm{M3} as follows: Take the set of worlds to be the finite sequences [$w;u_1;\cdots ;u_n$] such that \HOLtm{M1.frame.rel} $u_i\ u_{i+1}$ for all $i$. Define \HOLtm{M3.frame.rel} $[w;u_1;\cdots ;u_n]\ [w;v_1;\cdots ;v_m]$ iff $m=n+1$, $u_i=v_i$ for $1\le i\le n$, and \HOLtm{M1.frame.rel} $u_n\ v_m$. The valuation is given by $[w;u_1;\cdots;u_n]\in$ \HOLtm{M3.valt p} iff $u_n\in$ \HOLtm{M1.valt p}. Such a model in HOL4 looks like:


\begin{holmath}
  \HOLthm[def,M2/M,w/x]{chap2_1.bounded_preimage_rooted_def}
\end{holmath}  

The map \HOLtm{LAST} that sends a list [$w;u_1;\cdots ;u_n$] in \HOLtm{M3.frame.world} to its last member is a bounded morphism, and the root $[w]$ of \HOLtm{M3} is sent to $w$ in \HOLtm{M2}, as desired.

\end{proof}

\section{Bisimulation}

The two approaches to obtain modal equivalence has a common feature: both of them leads to a relation between models such that related states satisfy exactly the same set of propositional letters, and once we can make a transition in one model, we can make a corresponding transition in the other. This observation leads us to the concept of bisimulation: 
\begin{defn}[\holref{Bisimulation}{chap2_2}{19}]
A bisimulation $Z$ between models \HOLtm{M1} and \HOLtm{M2} (notation: \HOLtm{bisim M1 Z M2}) is a relation between their world sets, such that for worlds \HOLtm{w1 IN M1.frame.world} and \HOLtm{w2 IN M2.frame.world} which are related by $Z$, we have:
\begin{itemize}
\item For every propositional letter $p$, it is satisfied at $w_1$ if and only if it is satisfied at $w_2$.
\item If we have a world \HOLtm{v1 IN M1.frame.world} such that $w_1$ is related to $v_1$ by the relation in \HOLtm{M1}, then we can find a world $v_2$ in \HOLtm{M2} such that $v_1$ and $v_2$ are related by $Z$ where $w_2$ is related to $v_2$ in \HOLtm{M2}.
\item If we have a world \HOLtm{v2 IN M2.frame.world} such that $w_2$ is related to $v_2$ by the relation in \HOLtm{M2}, then  we can find a world $v_1$ in \HOLtm{M1} such that $v_1$ and $v_2$ are related by $Z$ where $w_1$ is related to $v_1$ in \HOLtm{M1}.
\end{itemize}
In HOL4:
\begin{holmath}
  \HOLthm[def,M1/M,M2/M',w1/w,w2/w',v1/v,v2/v',p/a,width=65]{chap2_2.bisim_def}
\end{holmath}
\end{defn}

 Both generated submodels and bounded morphic image give arise to bisimulations:

\begin{prop}[\holref{\texttt{prop_2_19_iii}}{chap2_2}{63}, \holref{\texttt{prop_2_19_iv}}{chap2_2}{81}]
\begin{holmath}
  \HOLthm[M1/M,M2/M']{chap2_2.prop_2_19_iii}\\[3mm]
 \HOLthm[M1/M,M2/M']{chap2_2.prop_2_19_iv}
\end{holmath}
\end{prop}
\begin{proof}
 The bisimulation relations are given by  \HOLtm{λw1 w2. w1 = w2} and \HOLtm{λw1 w2. (w2 = f w1)} respectively.

\end{proof}

Two worlds which are bisimilar are always modal equivalent. 

\begin{thm}[\holref{\texttt{thm_2_20}}{chap2_2}{124}]\label{3.7}
\begin{holmath}
  \HOLthm[M1/M,M2/M',w1/w,w2/w']{chap2_2.thm_2_20}
\end{holmath}
\end{thm}

Now we ask if the converse of the above holds: is that the fact that a modal equivalence always give a bisimulation? The answer is no. For example, consider models \HOLtm{M} and \HOLtm{N} defined as the picture below, where the arrows denote relations (non-transitive). Both \HOLtm{M} and \HOLtm{N} have infinitely many branches, from their roots \HOLtm{w}, \HOLtm{w'} respectively. The difference is that \HOLtm{N} has an infinitely long branch, whereas all the branches in \HOLtm{M} are of finite length. Let valuation in \HOLtm{M} and \HOLtm{N} both be such that at every point, there is no propositional letter which is satisfied. 
By induction, the worlds \HOLtm{w} and \HOLtm{w'} can be shown to be modal equivalent, but they are not bisimilar. Suppose, in order to get a contradiction, that \HOLtm{bisim M Z N} and \HOLtm{Z w w'}, then there exists \HOLtm{v0 IN M.frame.world} such that \HOLtm{Z v0 v0'}, where \HOLtm{v0'} is the first world on the infinite branch in \HOLtm{N} such that \HOLtm{N.frame.rel w' v0'}. The branch that \HOLtm{v0} lies on is finitely long, say, the worlds $w,v_0,\cdots, v_{n}$ are all the worlds on this branch. Then by clause on `forward condition' in the definition of bisimulation, there are worlds $v_1',\cdots,v_{n}'$ on the infinite branch of \HOLtm{N} such that $Z\ v_i \ v_i'$ for each $1\le i\le n$. The world $v_n'$ has a successor $v_{n+1}'$ in \HOLtm{N}, so the backward clause on relation requires the existence of a world in \HOLtm{M} which is related to $v_n$ and is related to $v_{n+1}'$ by $Z$. But such a world does not exist since $v_n$ is at the end of the branch it lies on. 

\begin{center}
\begin{tikzpicture}[scale=1.5,baseline=0]
\node [label={right:$w$}] at (0,0) {\Huge.};
%\filldraw[black] (0,0) circle (0.5pt);

\draw[->] (0,0) to (-0.7,0);

\draw[->] (0,0) to (-0.5,-0.5);
\draw[->] (-0.5,-0.5) to (-1,-1);

\draw[->] (0,0) to (-0.4,-0.65);
\draw[->] (-0.4,-0.65 ) to (-0.8,-1.3 );
\draw[->] (-0.8,-1.3) to (-1.2 ,-0.65 * 3 );

\node at (-0.5* 1/2, -1.2) {\Huge...};

\node at (-0.2, -1.8) {\HOLtm{M}};

\end{tikzpicture}
\qquad
\begin{tikzpicture}[scale=1.5,baseline=0]

\node [label={right:$w'$}] at (0,0) {\Huge.};

%\filldraw[black] (0,0) circle (0.5pt) [label={right:$w$}]{};

\draw[->] (0,0) to (-0.7,0);

\draw[->] (0,0) to (-0.5,-0.5);
\draw[->] (-0.5,-0.5) to (-1,-1);

\draw[->] (0,0) to (-0.4,-0.65);
\draw[->] (-0.4,-0.65 ) to (-0.8,-1.3 );
\draw[->] (-0.8,-1.3) to (-1.2 ,-0.65 * 3 );

\node  at (-0.5* 1/2, -1.2) {\Huge...};


\draw[->] (0,0) to (0.5,-0.5);
\draw[->] (0.5,-0.5) to (1,-1 );
\draw[->] (1,-1) to (1.5 ,-1.5 );
\draw[->] (1.5,-1.5) to (2 ,-2 );


\node at (2.2,-2.2) {\Huge.};
\node at (2.3,-2.3) {\Huge.};
\node at (2.4,-2.4) {\Huge.};

\node at (-0.2, -1.8) {\HOLtm{N}};

\end{tikzpicture}
\end{center}

 Nonetheless, the converse of Theorem \ref{3.7} does hold on \emph{image finite} models.
\begin{defn}[\holref{Image finite}{chap2_2}{158}]
 A model \HOLtm{M} is called image finite if for every world \HOLtm{w IN M.frame.world}, there are only finitely many worlds in \HOLtm{M} related to \HOLtm{w}.
\begin{holmath}
  \HOLthm[def]{chap2_2.image_finite_def}
\end{holmath}
\end{defn}

Our main theorem is called Hennessy-Milner theorem:
\begin{thm}[Hennessy-Milner Theorem, \holref{\texttt{thm_2_24}}{chap2_2}{328}]
For image finite models, modal equivalence and bisimulation are indeed the same thing.
\begin{holmath}
  \HOLthm[M1/M,M2/M',w1/w,w2/w']{chap2_2.thm_2_24}
\end{holmath}
\end{thm}

\begin{proof}
We prove the implication from left to right. Given \HOLtm{w1} and \HOLtm{w2} are worlds in \HOLtm{M1} and \HOLtm{M2} which are modal equivalent, we prove the relation \HOLtm[phi/form]{λn1 n2. (!form. satis M1 n1 form <=> satis M2 n2 form)} gives a bisimulation. The only non-trivial thing to check is that assume \HOLtm{modal_eq M1 M2 n1 n2} and \HOLtm{M1.frame.rel n1 n1'} for some \HOLtm{n1' IN M1.frame.world}, we need to prove the existence of the world \HOLtm{n2' IN M2.frame.world} such that \HOLtm{M2.frame.rel n2 n2'} and \HOLtm{modal_eq M1 M2 n1' n2'}. Suppose such a \HOLtm{n2'} does not exist, we derive a contradiction. Consider the set \HOLtm{S0 = { u' | (u' IN M2.frame.world /\ M2.frame.rel n2 u') \}}
, the first claim is that $S_0$ is finite and nonempty. Finiteness comes from the fact that \HOLtm{M2} is image finite, and if the set is empty, then \HOLtm{BOX FALSE} will be a formula satisfied at \HOLtm{n2} but not at \HOLtm{n1}, contradicts the modal equivalence between \HOLtm{n1} and \HOLtm{n2}. By assumption, for each world in $S_0$, there is a formula \HOLtm{phi} such that \HOLtm{satis M1 n1' phi} but \HOLtm{¬satis M2 n2' phi}. As the set $S$ is finite, the set of such \HOLtm{phi}s is finite. Then we can take the conjunction of such \HOLtm{phi}s to obtain a formula \HOLtm{psi}. Then we will have \HOLtm{satis M1 n1 (DIAM psi)} but \HOLtm{¬satis M1 n2 (DIAM psi)}.
\end{proof}


\chapter{Finite model property}

In this chapter, we tell the story about the Slogan 2 as stated in the introduction: Modal formulas can only capture local information. It follows that there does not exist a modal formula which can capture information about points which are $n$-steps from the current state for every $n$. To see this, we will prove the \emph{finite model property} of modal formulas, which says if a modal formula is satisfied on an arbitrary model, then it can be satisfied on a finite model, where finite model means a model whose world set is finite. There are classically two methods of building finite models for satisfiable modal formulas, namely via filtration and selection. Although we have formalized both of them in HOL4, the former is almost a direct translation of the mathematical proof and hence is not interesting from the formalizing aspect. We will only talk about finite model property via selection in this chapter. 

In this method, to build a finite model of a satisfiable modal formula \HOLtm{phi}, we start with a model that the formula $\phi$ is satisfied, delete worlds from the model and only leaves finitely many worlds in it. The intuition behind this approach is that every modal formula can only contain finitely many diamonds, each can `see' one step from the current state. Therefore, each formula can only capture the information of finitely depth. To make the notion of `depth' precise, we define the degree of a modal formula, which counts the number of diamonds appear in a model formula, in the sense that a modal formula \HOLtm{phi} has degree $n$ means there are $n$ `$\Diamond$'s in \HOLtm{phi}. In particular, a modal formula of degree zero is a modal formula with no diamond. Such a formula is precisely a propositional formula. 
\begin{defn}[\holref{Degree of a modal formula}{chap2_3}{24}]
\begin{holmath}
\begin{array}{rcl}
  \HOLthm[aligneddef,phi/form]{chap2_3.DEG_def}
\end{array}
\end{holmath}
\end{defn}

The crucial fact we need about the degree of formulas is that for every finite $\alpha$-set $s$ and every natural number $n$, there are only finitely many non-equivalent modal formulas of $n$ which only use the propositional letters in $s$. In the textbook that we are following, the authors prove this fact basically `by observation', but the proof is long and tedious to formalize. We will not show the proof, but only show the statement that we have proved in HOL4:

\begin{lm}[\holref{\texttt{prop_2_29_strengthen}}{chap2_3}{989}]\label{4.1}
For a finite $\alpha$-set $s$, if $\beta$ is an infinite type, then for every natural number $n$, if we partition the set of $\alpha$-modal formulas using only propositional letters in $s$ of degree up to $n$ using the equivalence relation `being equivalent on models with $\beta$-world sets', then we get finitely many equivalence class. 
\begin{holmath}
  \HOLthm[phi/f]{prettyPrinting.ppprop_2_29_strengthen}
\end{holmath}
\end{lm}

Here the `$\{\phi\mid {\sf DEG} \ \phi \le n \land {\sf prop\_letters \ \phi \subseteq }\ s\} / \equiv_{(:\beta)}$' is the of equivalence classes obtained by partitioning the set \HOLtm[phi/f]{{f | DEG f <= n /\ prop_letters f ⊆ s\}} by the equivalence relation $\equiv_{(:\beta)}$. We require the assumption that the universe of $\beta$ is infinite since we used Proposition \ref{2.2} when proving the proposition above.


Recall in the last chapter, we have seen that a bisimulation gives arise to modal equivalence, modal equivalence between worlds means satisfying exactly the same formulas', but when we are building a finite model for a formula $\phi$, we do not care about the satisfaction of the formulas of degree above \HOLtm{DEG phi}, since such formula cannot affect the satisfaction of $\phi$. Therefore, we just need some relation such that related worlds satisfy the same modal formulas up to some degree $n$. It turns out that the notion of `finite approximation of bisimulation' is such a relation. For a `finite approximation of bisimulation up to depth $n$'. it is called an \emph{$n$-bisimulation}. Let \HOLtm[w1/w,M1/M]{w IN M.frame.world} and \HOLtm[w2/w',M2/M']{w' IN M'.frame.world}, $w_1$ and $w_2$ are $n$-bisimilar if there exists a sequence of relations $Z_n\subseteq \cdots\subseteq Z_0$ such that:
\begin{itemize}
  \item $w_1$ and $w_2$ are related by $Z_n$
  \item If \HOLtm{v1 IN M1.frame.world} and \HOLtm{v2 IN M2.frame.world} are related by $Z_0$, then $v_1$ and $v_2$ satisfy the same propositional letters.
  \item If \HOLtm{v1 IN M1.frame.world} and \HOLtm{v2 IN M2.frame.world} are related by $Z_{i+1}$ and we have \HOLtm{M1.frame.rel v1 u1} for \HOLtm{u1 IN M1.frame.world}, then there exists \HOLtm{u2 IN M2.frame.world} such that \HOLtm{M2.frame.rel v2 u2} with $u_1$ and $u_2$ related by $Z_i$.
  \item If \HOLtm{v1 IN M1.frame.world} and \HOLtm{v2 IN M2.frame.world} are related by $Z_{i+1}$ and we have \HOLtm{M2.frame.rel v2 u2} for \HOLtm{u2 IN M2.frame.world}, then there exists \HOLtm{u1 IN M1.frame.world} such that \HOLtm{M1.frame.rel v1 u1} with $u_1$ and $u_2$ related by $Z_i$.
\end{itemize}

Such a sequence of $Z_i$ is a family of relations indexed by natural numbers from $0$ to $n$. When the world set of \HOLtm{M1} has type $\beta$ and the world set of \HOLtm{M2} has type $\gamma$, we encode such a family using functions $f:num\to \beta\to\gamma\to bool$. Such a function assigns each natural number a relation between terms of type $\beta$ and $\gamma$, so the \HOLtm{f i} is the relation $Z_i$ in the usual mathematical definition, and \HOLtm{nbisim M1 M2 f n w1 w2} means $w_1$ and $w_2$ are worlds in \HOLtm{M1} and \HOLtm{M2} respectively which are $n$-bisimilar via the family of relations given by $f$, as shown below. 
\begin{defn}[\holref{$n$-bisimulation}{chap2_3}{1059}]
\begin{holmath}
  \HOLthm[def,M1/M,M2/M',w1/w,w2/w',v1/v,v2/v',u1/u,u2/u',width=60]{chap2_3.nbisim_def}
\end{holmath} 
\end{defn}


When we use set theory as the foundation, if there are only possibly many propositional letters, then it is true that two worlds in two models agree on all the modal formulas  with degree up to $n$ if and only if there exists an n-bisimulation between them. However, we are using simple type theory as our  foundation in HOL4, so we require assumption on infiniteness on type universe again. The thing we can prove in  HOL4 is that: 
Let $s$ be a finite $\alpha$-set, if we restrict our scope to the set $\Sigma$ of $\alpha$-formulas that only uses propositional symbols in $s$. Then for models \HOLtm{M1} and \HOLtm{M2} with underlying set type $\beta$, $\gamma$ respectively, where both $\beta$ and $\gamma$ has infinite universe, consider each \HOLtm{w1 IN M1.frame.world} and \HOLtm{w2 IN M2.frame.world}, \HOLtm{w1} and \HOLtm{w2} agree on formulas in $\Sigma$ up to degree $n$ if and only if there is an $n$-bisimulation relating them. By induction on $n$, we prove If two worlds \HOLtm{w IN M.frame.world} and \HOLtm{w' IN M'.frame.world} are related by an $n$-bisimulation, then they agree on all modal formulas up to degree $n$. And the other direction is by an argument similar to the proof of Hennessy-Milner theorem, using the  \HOLtm{λn w1 w2. (!(phi: 'a form). DEG phi <= n ==> (satis M w1 phi <=> satis M' w2 phi))} as the n-bisimulation relation. 

We also want a concept that measures the depth of a model. As `depth' is a relative concept measuring the distance of two points, to talk about the depth of a world \HOLtm{w IN M.frame.world}, we need \HOLtm{M} to be naturally equipped with a base point. Hence the `height' of a world only makes sense to rooted models. To tell the HOL about this definition, we start by defining \HOLtm{heightLE} as an inductive relation:


\begin{defn}[\holref{Upper bound of height}{chap2_3}{1429}]
\[
\begin{array}{c}
  \HOLthm[rule,conj1]{chap2_3.heightLE_rules}\\[4mm]
  \HOLthm[rule,conj2,width=120]{chap2_3.heightLE_rules}\\
\end{array}
\]
\end{defn}

Recall how we defined rooted model: \HOLtm{rooted_model M x M'} means `\HOLtm{M} is a rooted model generated by the world $x$ in the ambient model \HOLtm{M'}'. As \HOLtm{heightLE} is designed to only make sense for rooted models, we encode the information about the rootedness of the model we are talking about into this definition. Therefore, \HOLtm{heightLE M x M' w n} reads `for the rooted model \HOLtm{M} generated by the root $x$ in \HOLtm{M'}, the distance from the world \HOLtm{w} to the root $x$ is less or equal to $n$', and we will always have an assumption on rootedness of \HOLtm{M} whence this definition is involved. The above rules mean:
\begin{itemize}

\item The height of the root for each rooted model is less or equal to every natural number. 
\item For a world \HOLtm{v} of \HOLtm{M}, if there exists a world \HOLtm{w} of \HOLtm{M} such that $w$ is related to $v$ in \HOLtm{M}, then if the height of \HOLtm{w} is no more than $n$, the height of \HOLtm{v} is no more than \HOLtm{n + 1}.
\end{itemize}

We define the actual height of a world $w$ to be the smallest natural number $n$ such that \HOLtm{heightLE M x M' w n}. The height of a model is the maximum height of its worlds. 


We are particularly interested in talking about heights in tree-like model. 

\begin{lm}[\holref{\texttt{tree_height_rel_lemma}}{chap2_3}{1673}]
When \HOLtm{M} is tree-like, if \HOLtm{w IN M.frame.world} has height $n$, then every world \HOLtm{v IN M.frame.world} such that \HOLtm{M.frame.rel w v} will have height $n+1$.
\begin{holmath}
  \HOLthm[width=65]{prettyPrinting.pptree_height_rel_lemma}
\end{holmath}
\end{lm}


The restriction of a rooted model \HOLtm{M} to the height $k$ is the submodel consisting of all the worlds in \HOLtm{M} of height up to $k$.

\begin{defn}[\holref{Restriction a model up to some height}{chap2_3}{1442}]
We define a function \HOLtm{hrestriction} that takes a rooted model \HOLtm{M} sitting in an ambient model \HOLtm{M'} together with a natural number $n$, and give the model obtained by restricting \HOLtm{M} to the height \HOLtm{n}.
\begin{holmath}
  \HOLthm[def,p/phi,w1/n1,w2/n2,w/n,width=60]{chap2_3.hrestriction_def}
\end{holmath}
\end{defn}

The restriction of a tree-like model to every height is again a tree-like model. Moreover, restriction of every rooted model gives arise of $n$-bisimulation. 
\begin{lm}[\holref{\texttt{lemma_2_33}}{chap2_3}{1530}]\label{4.3}
If we restrict a rooted model \HOLtm{M} to height $k$, then a world $w$ of height $m$ in the restricted model is $k-m$-bisimilar to itself in the original model. 
\begin{holmath}
  \HOLthm{prettyPrinting.pplemma_2_33}
\end{holmath}
\end{lm}
\begin{proof}
The $n$-bisimilar relation is given as 
\begin{holmath}
\HOLtm{λn w1 w2. w1 = w2 /\ height M x M' w1 <= k - n}
\end{holmath}.
\end{proof}

Now we can start building a finite model via selection:
\begin{thm}[\holref{\texttt{thm_2_34}}{chap2_3}{1827}]
\begin{holmath}
  \HOLthm[M/FM]{chap2_3.thm_2_34}
\end{holmath}
\end{thm}

\begin{proof}
Suppose \HOLtm{satis M1 w1 phi} where $w_1$ is of type $\beta$ and $\phi$ is an $\alpha$-formula of degree $k$, then by Proposition \ref{3.5}, there exists a tree-like model \HOLtm{M2} with \HOLtm{phi} satisfied at its root \HOLtm{w2}. Such an \HOLtm{M2} has its world set of type $\beta\ list \to bool$, so all the lemmas proved before with an infinite-universe assumption applies for every model with its world set a subset of \HOLtm{M2.frame.world} . Define \HOLtm{M}${}_{3}:=$ \HOLtm{hrestriction M2 w2 M2 k} to be the restriction of \HOLtm{M2} to height $k$, then \HOLtm{M3} is rooted and we have \HOLtm{nbisim M3 M2 f k w2 w2} by Lemma \ref{4.3}, hence \HOLtm{satis M3 w2 phi}. By Proposition \ref{2.1}, if a propositional letter does not appear in $\phi$, then it does not effect the satisfaction of $\phi$. By discarding all the propositional letters in \HOLtm{M3} which does not occur in $\phi$, we obtain the model \HOLtm{M3'}, which looks like:
\begin{holmath}
\HOLtm{M3' =
   <| frame := <| world := M3.frame.world ;
                    rel := M3.frame.rel ;
                |>;
       valt := \p v. if ((VAR p) IN (subforms phi)) then (M3.valt p v) else F |>}
\end{holmath}
. We still have \HOLtm{satis M3' w2 phi}. We will select a finite model inductively from \HOLtm{M3'}.

Let $s$ denote the set of propositional letters used by $\phi$, so $s$ is finite. By Lemma \ref{4.1}, there are only finitely many non-equivalent formulas of degree less or equal to $k$ which only use propositional letters in $s$, that is, the set $\Delta=$ \HOLtm[phi/f]{{f | DEG f <= k /\ prop_letters f ⊆ s\}//E μ} is a finite. We care about the equivalence classes in $\Delta$ which are equivalence classes of formulas starting with a $\Diamond$. For such equivalence classes, taking the intersection with the set $\Gamma:=$\HOLtm{{phi | ?phi0. phi = DIAM phi0\}} does not give the empty set. Take the image of $\Delta$ under the function \HOLtm{\s. s ∩ Γ} and delete the empty set from the image, we obtain a set $\Sigma$ of sets of formulas, where for each set $\phi s\in \Sigma$, $\phi s$ consists of equivalent formulas of degree less or equal to $k$, only use propositional letters in $s$, and start with diamond. For each $\phi s\in \Sigma$, we choose a representative from $\phi s$ using the choice function, and collect these representatives into the set  
$R:= {\sf IMAGE} \ {\sf CHOICE} \ (\{s\cap \Gamma \mid s \in \Delta\}\setminus \{\emptyset\}) $.  The set $R$ is finite as the image of choice function of a finite set. 

We will construct sets $S_0,\cdots, S_k$ of worlds in \HOLtm{M3'}, where the worlds in $S_n$ have height $n$. Start with $S_0:=\{w_2\}$, and inductively, assume $S_0,\cdots, S_n$ has been defined, construct $S_{n+1}$ as follows: Consider an element in $v\in S_n$, for each $\Diamond \phi\in R$ such that \HOLtm{satis M3' w2 (DIAM phi)}, pick a world \HOLtm{u IN M3'.frame.world} such that \HOLtm{M3'.frame.rel v u} and \HOLtm{satis M3' u phi}. Do the same thing to all the $v\in S_n$, then take $S_{n+1}$ as the set of all the such $u$'s which are selected in this way. 

To formalise the definition of such $S_i$'s, we define a primitive recursive function $Sn$ as:

\begin{holmath}
\HOLtm[alltt,width=70]{Sn = PRIM_REC {w2\}
                 (\s0:β list set n. 
                      {CHOICE us |
	              ?phi v. satis M3' v (DIAM phi) /\ 
	              ((DIAM phi) IN 
                       R /\
                      v IN s0 /\
		      us = { u | M3'.frame.rel v u /\ u IN M3'.frame.world /\
		                   satis M3' u phi\})\})
}
\end{holmath}
For each $i\le k$, $Sn \ i$ will be our $S_i$. By induction on $i$, we can prove each $ss\ i$ is finite, so the set $W4 := \bigcup_i \{Sn\ i\mid i \le k\}$ is finite. The resultant finite model we select is: 

\begin{holmath}
\HOLtm{M4 = <| frame:= <| world := W4;
                                  rel := M3.frame.rel |>;
		        valt:= M3'.valt |>}.
\end{holmath}
To prove \HOLtm{satis M4 w2 phi}, it suffices to give a $k$-bisimulation between \HOLtm{M4} and \HOLtm{M3'} relating $w_2$ to itself. 
Such a $k$-bisimulation can be given as: For \HOLtm{a1 IN M4.frame.world} and \HOLtm{a2 IN M3.frame.world}, $a_1$ is related by the $n$-th relation in the $k$-bisimulation if and only if $a_1$ and $a_2$ satisfies the same modal formulas up to degree $n$ as worlds in \HOLtm{M3}. The relation in HOL4 looks like:
\begin{holmath}
\HOLtm[alltt,width=70]{\n a1 a2. a1 IN M4.frame.world /\ a2 IN M3'.frame.world /\
                 height M3' w2 M3' a1 = height M3' w2 M3' a2 /\
		 height M3' w2 M3' a1 <= k - n /\
                 (!phi. (DEG phi <= n /\ prop_letters phi ⊆ s)
                     ==> (satis M3' a1 phi <=> satis M3' a2 phi))}
\end{holmath}
The rest of the proof amounts to check the above indeed gives a $k$-bisimulation, the proof is again an analogue to Hennessy-Milner theorem.
\end{proof}

In the proof above, note that what we do to capture indexing of set: A family of sets indexed by $J$ is a function that takes an element in $J$ and gives a set. Here in our case, the $S$'s are indexed by natural numbers, so to define the family $S_n$ for $0\le n\le k$, we use the function $ss$ which take the index and gives the actual set indexed by it. We will treat indexing similarly afterwards. 


As we took a detour through Proposition \ref{3.5}, this construction of the finite model changes the type of model. If we start with an $(\beta,\alpha)$-model, then the finite model we build by selection will be a $(\beta \ list,\alpha)$-model. If we want to obtain a finite model without changing the type of the model, it can be done by using filtration. 

\chapter[\texorpdfstring{Reaching out to the world of first order logic
    }{Reaching out to the world of first order logic}
]{\chaptermark{Reaching towards FOL} Reaching out to the world of first order logic}
\chaptermark{Reaching towards FOL}


%\chapter[Reaching towards FOL]{Reaching out to the world of first order logic}

As claimed by Slogan 3 in the introduction, modal logic is not an isolated formal system, in this chapter, we start connecting modal logic with the wider logical world by discussing its relation to first-order logic. In the first half of the chapter, we define standard translation as our link between modal logic and first-order logic, and in the second half of the chapter, with the help of standard translation, we introduce another construction on models which give modal equivalence, and conclude this section by proving an elegant result about bisimulation: If we have a modal equivalence between worlds $w,v$ in two models \HOLtm{M} and \HOLtm{N}, although it may not the case that $w$ and $v$ are bisimilar, we can find a bisimulation in a pair of models constructed from \HOLtm{M} and \HOLtm{N}.

\section{Standard Translation}

To discuss the relationship between modal logic and first-order logic, firstly we need to build some basics of first-order logic in the HOL. First-order logic is formalised in HOL light in 1998 by John Harrison, we take our construction of first-order model theory as in the paper (reference) of him.
%explain everywhere???????????????????????????????
A term of the first-order language is either a variable letter $x$ or a function symbol $f$ applied on a list of terms, which looks like $f(t_1,\cdots,t_n)$, where the $t$'s can either be variable letters or itself a function applied on some terms. As we are working in type theory, the variable letter $x$ need to come with its type. To avoid specifying the type of terms and formulas everywhere, we choose to fix the type of our first-order terms formulas to only use variables of the type $(:num)$ of natural numbers. By this choice we made, we restrict our scope to countable language. The first-order terms are encoded in HOL4 as below. We decorate first-order terms with an `${}^{\sf f}$' in order to distinguish from the constructions on modal logic. We will use the similar decoration for first-order formulas, connectives and ultraproduct first-order models (which is to be introduced later) afterwards. 
\begin{defn}[First-order terms]
\begin{holmath}
  \HOLthm{folLang.datatype_term}
\end{holmath}
\end{defn}
Hence our terms will look like \HOLtm{fV 6}, \HOLtm{Fn 1 [fV 1; fV 2]}, \HOLtm{Fn 2 [Fn 0 []]}, etc. The role of the two occurrences of the natural number $1$ in the term \HOLtm{Fn 1 [fV 1; fV 2]} are different: the first one is a function symbol, and the second one is variable letter. In the first-order term \HOLtm{Fn 2 [Fn 0 []]}, we note the iterated application of function symbols, and also, \HOLtm{Fn 0 []} is the term obtained by applying the function symbol $0$ to the empty list. The $0$ here is a nullary function symbol, which is the same as a constant. We will write $\sf IMP \ \phi_1 \ \phi_2$ as $\phi_1 {}^{\sf f}\to \phi_2$. 

Our formulas are defined inductively as well. 

\begin{defn}[First-order formulas]
The primitive logical connectives we are using here are: the falsity `\HOLtm{fFALSE}', a predicate symbol applied on a list of variables, implication `\HOLtm{IMP}', and the universal quantification.
\begin{holmath}
  \HOLthm{folLang.datatype_form}
\end{holmath}
Note that we do not define a separate notion of relation symbol. An $n$-ary relation symbol is a predicate symbol that takes lists of length $n$. 
\end{defn}
A quantified variable is called a bounded variable, otherwise, it is called free. For instance, the $1$ in \HOLtm{Pred 4 [fV 1; fV 2]} is free, whereas the $1$ in \HOLtm{FALL 1 (Pred 4 [fV 1; fV 2])} is bounded. For a first-order formula \HOLtm{phi}, \HOLtm{FV phi} is the set of all its free variables and \HOLtm{BV phi} is the set of all its bounded variables. We also have functions \HOLtm{form_functions} and \HOLtm{form_predicates} which gives the set of function and predicate symbols of a first-order formula, respectively. For a function symbol, it is consists of two pieces of information: the natural number that represents it and its arity. For a function symbol denoted by $m$ of arity $n$, we use the pair $(n,m)$ to record the function symbol. For example, \HOLtm{term_functions (Fn 2 [fV 1;fV 3]) = {(2,2)\}} and \HOLtm{form_functions (Pred 1 [Fn 0 []; Fn 1 []]) = {(0,0); (1,0)\}}. Similarly, a predicate symbol denoted by natural number $m$ and arity $n$ is recorded as a pair $(m,n)$ as well. Hence both the function \HOLtm{form_functions} and \HOLtm{form_predicates} take a formula and give a set of pairs of natural numbers. 

%A set of function symbols together with a set predicate symbols, which are both sets of pairs, determines a \emph{language}. For instance. 


The non-primitive first-order connectives are defined in the canonical way:
\begin{defn}[Non-primitive first-order connectives]
\begin{holmath}
\begin{array}{rcl}
  \HOLthm[aligneddef,phi/f]{folLang.Not_def}\\
  \HOLthm[aligneddef]{folLang.True_def}\\
  \HOLthm[aligneddef,phi1/p,phi2/q]{folLang.Or_def}\\
  \HOLthm[aligneddef,phi1/p,phi2/q]{chap2_4revised.fAND_def}\\
  \HOLthm[aligneddef,phi/p]{folLang.Exists_def}
\end{array}
\end{holmath}
\end{defn}

To interpret these formulas, we need models for first order logic.

\begin{defn}[First order model]
A first order model \HOLtm{M} of type $\alpha$ is a triple consists of an $\alpha$-set \HOLtm{M.Dom} which is its domain, an interpretation \HOLtm{M.Fun} of function symbols, and an interpretation \HOLtm{M.Pred} of predicate symbols. Where an interpretation of function symbol is a function that assigns each function symbol an actual function, and an interpretation of predicate symbol is a function that assigns each predicate symbol an actual predicate. 
\begin{holmath}
  \HOLthm{folModels.datatype_model}
\end{holmath}
\end{defn}

Since we are using natural numbers as function symbols, an interpretation of function symbols is a function that takes a natural number and give a function that sends a tuple, which is a list, of variables of type $\alpha$ to an element of type $\alpha$. Similar for interpretation of predicate symbols. 

Given a first-order model \HOLtm{M}, we can interpret formulas or terms by assigning each variable symbol an element in \HOLtm{M.Dom}. As we are using natural numbers as variable symbols, such an assignment is a function from the universe of natural numbers. We are only interested in the case when a function from the universe of natural numbers does send each natural number to an element in \HOLtm{M.Dom}, such a function is called a \emph{valuation} of \HOLtm{M}. We write \HOLtm{valuation M v}, and read it as `$v$ is a valuation of the model \HOLtm{M}'. 

Interpretation of terms and formulas are given as \HOLtm{termval} and \HOLtm{feval}. The function \HOLtm{termval} takes an $\alpha$-model, a function $v$ of type $num\to \alpha$, gives us an element of type $\alpha$. We will only use evaluations for our function $v$, therefore, we can make sure that the element we obtain by evaluating a term is always in the domain of the model we are working with. If we give the function \HOLtm{feval} a model \HOLtm{M}, a valuation $v$ and a first-order formula $\phi$, it will give us the truth value of $\phi$ in \HOLtm{M} under the valuation $v$. When $\phi$ is true in \HOLtm{M} under \HOLtm{v}, we write \HOLtm{feval M v phi}.


%We only care about when the assignment of variable letters is indeed a valuation as defined above, when $\sigma$ is a valuation, each first order term is will be sent to an element of \HOLtm{M.Dom} under \HOLtm{termval}, and if in addition \HOLtm{feval M σ phi}, we say `\HOLtm{phi} is satisfied in \HOLtm{M} under the valuation $\sigma$', and write it as \HOLtm{fsatis M σ phi}. In particular, if there is only one free variable $x$ in $\phi$, then \HOLtm{fsatis M σ phi} just means that \HOLtm{phi} is satisfied at the point \HOLtm{σ x} in the model \HOLtm{M}.
%When \HOLtm{σ} is a valuation for the model \HOLtm{M}, then a formula $\phi$ is satisfied in \HOLtm{M} if and only if \HOLtm{feval M σ phi}. Hence throughout our discussion, if we have already assumed \HOLtm{valuation M σ}, we will not distinguish between \HOLtm{feval M σ} and \HOLtm{fsatis M σ} in our following discussion. 

It does not make sense for a first-order model to have functions that send a list of elements of its domain out of its domain. Hence unless we have no function symbols at all, we only consider the models \HOLtm{M} such that \HOLtm{M.Fun f l} is in \HOLtm{M} for every function $n$ and list \HOLtm{l}. For such a model, we write \HOLtm{wffm M}, means that `\HOLtm{M} is a well-formed first-order model'. 
We note the follows. 
%for a fixed model, the truth value of a first order formula only depends on what a valuation sends its free variable to. On the other hand, if the valuation is fixed, then two models are the same for evaluating a first order formula if they agree on all the functions and predicates appear in the formula. 

\begin{prop}[\texttt{holds_valuation}]
For a fixed model, the truth value of a first-order formula only depends on what a valuation sends its free variable to.
\begin{holmath}
  \HOLthm[phi/p]{folModels.holds_valuation}
\end{holmath}
\end{prop}
\begin{prop}[\holref{\texttt{holds_functions_predicates}}{chap2_6}{1872}]
If the valuation is fixed, then two models are the same for evaluating a first-order formula if they agree on all the functions and predicates appear in the formula.
\begin{holmath}
  \HOLthm[phi/p,width=65]{chap2_6.holds_functions_predicates}
\end{holmath}
\end{prop}


Therefore, although a valuation $v$ of \HOLtm{M} assigns every natural number an element in \HOLtm{M.Dom}, what it effectively does is to only control where does the free variables in a formula goes to. The advantage of using a valuation instead of assigning free variables values one by one is that a valuation can simultaneously control every number of free variables.

Let us start looking at how is modal logic related to first-order logic. Recall a modal model consists of three pieces of information: A set of worlds, a relation between these worlds, and a valuation of propositional letters at each world. A relation is a binary predicate, and for propositional letter $p$, it gives a unary predicate $P$ on the set of worlds such that $P \ w$ is true for a world if and only if \HOLtm{M.valt p w}. Hence for a $(num,\beta)$-modal model, the information it contains is actually enough for interpreting first-order formulas which contains no function symbol, only one binary predicate, some unary predicate, each corresponds to a propositional letter, and no predicate symbol of higher arity. For a formula satisfies these properties, we call it is in the \emph{language} $\mathcal L_{\tau}^1$ determined by our modal language. More generally, a language of first-order logic is determined by a set of function symbols and a set of predicate symbols, which both are sets of pairs. In our case, the two sets determine the language $\mathcal L_{\tau}^1$ are \HOLtm{{\}} and \HOLtm{(0,2) INSERT {(p,1) | p ∈ 𝕌(:num)\}}, for function and predicate symbols respectively. This means we fix the predicate symbol corresponds to the relation on the model to be $0$. In our formalization, the condition for a first-order formula to be in the language $\mathcal L_{\tau}^1$ is given as follows:
\begin{defn}[\holref{The language $\mathcal L_{\tau}^1$}{chap2_6}{29}]
\begin{holmath}
  \HOLthm[def,width=65]{chap2_6.L1tau_def}
\end{holmath}
\end{defn}

first-order formulas in the language $\mathcal L_{\tau}^1$ are of the main interest in the rest of the thesis. As mentioned above, such formulas can be interpreted by a modal model. But of course, we can not write \HOLtm{fsatis M σ phi} if \HOLtm{M} is not a first-order model but a modal model. Hence to interpret $\mathcal L_{\tau}^1$ formulas on modal models, the first thing to do is to formally convert a modal model into a first model. The function that takes a modal model and give the first model we will get by viewing it as a first-order model is \HOLtm{mm2folm}. 

\begin{defn}[\holref{Conversion from a modal model to a first-order model}{chap2_4revised}{19}]
\begin{holmath}
  \HOLthm[def]{chap2_4revised.mm2folm_def}
\end{holmath}
\end{defn}

As we can see from the above, there is no interesting information in the field $\sf Fun$ of a first model obtained by conversion from a modal model, and for the predicates, the only interesting information is for unary and the only binary one, and the others are constantly false.

 Conversely, we can view a first-order model as a modal model by fixing one binary predicate as the relation in the modal model and let the unary predicate symbols correspond to propositional letters. Here we fix the relation to determined by the binary predicate symbol $0$. We define the function converting a first-order model into a modal model as \HOLtm{folm2mm}. 

\begin{defn}[\holref{Conversion from a first-order model into a modal model}{chap2_6}{40}]
\begin{holmath}
  \HOLthm[def,M/FM]{chap2_6.folm2mm_def}
\end{holmath}
\end{defn}

Whereas the conversion from a modal model into a first-order model preserves all the information of the original model, the conversion from a general first-order model into a modal model will omit a lot of information: we will lose every function symbols, all except for one binary predicate symbols and all higher arity predicate symbols. Hence we cannot expect the functions \HOLtm{mm2folm} and \HOLtm{folm2mm} are inverses to each other. However, the conversion procedure will preserve $\mathcal L_{\tau}^1$-formulas.

\begin{prop}[\holref{\texttt{L1tau_mm2folm_folm2mm_comm_feval}}{chap2_6}{976}]\label{5.3}
An $\mathcal L_{\tau}^1$ formula is satisfied in \HOLtm{M} under $\sigma$ if and only iff it is satisfied under $\sigma$ in the model we obtain after we firstly convert \HOLtm{M} to a modal model, and then back to a first-order model.
\begin{holmath}
  \HOLthm[ϕ/f]{prettyPrinting.ppL1tau_mm2folm_folm2mm_comm_feval}
\end{holmath}
\end{prop}

With the setup on basics about first-order logic and how does it interact with modal logic, let us start building intuition about how do modal formulas correspond to first-order formulas. The first thing to note is that as every symbol in a first-order formula is represented by a natural number, without introducing cumbersome and complicated procedure, we can only translate $num$-modal formulas into first-order formulas. Observe that unlike modal formulas which atomic formulas are propositional letters standing alone, even the atomic first-order formulas (except \HOLtm{fFALSE}) have variable symbols involved. Hence to translate a modal formula into a first-order formula, we must get variables involved as well. For a model \HOLtm{M}, it is natural to regard each modal formula as a predicate to be evaluated at worlds of \HOLtm{M}, such that this predicate is true at a world $w$ if and only if the formula is satisfied at $w$. Hence to translate a modal formula into a first-order formula, the only natural thing to do is to get just one variable involved, and this variable will be later assigned to the state in a model by some valuation when we interpret the translated formula. 

Hence for the function \HOLtm{ST} which translates a modal formula to a first-order formula, the first parameter it takes is a variable symbol $x$, which is represented by a natural number, that we will introduce to mark the world we are looking at, as discussed above, and the second parameter is the $num$-modal formula which we want to translate. 


\begin{defn}[\holref{Standard Translation}{chap2_4revised}{58}]
Here `\HOLtm{ST x phi}' reads the standard translation of the modal formula $\phi$ at $x$. The translation is defined as:
\begin{itemize}
\item A propositional letter is translated into the unary predicate symbol represented by $p$ applied on the variable $x$. Here \HOLtm{fP p (fV x)} is the abbreviation of ${{}^{\sf f}\sf Pred} \  p \ [{}^{\sf f}{\sf V} \ x ]$.
\item The falsity in modal formula is translated into the falsity in first-order formula.

\item Inductively, the negation of a modal formula $\phi$ is translated into the first-order negation of the standard translation of $\phi$.

\item The disjunction of two modal formulas $\phi$ and $\psi$ is translated into the first-order disjunction of the standard translation of $\phi$ and the standard translation of $\psi$. 

\item A modal formula $\Diamond \phi$ is translated to the existential quantifier applied on the variable symbol $x+1$ and the first-order formula saying \HOLtm{fV x} is related to \HOLtm{fV (x + 1)} and \HOLtm{ST (x + 1) phi}. Here \HOLtm{fR (fV x) (fV (x + 1))} is the abbreviation of ${{}^{\sf f}\sf Pred} \  0 \ [({}^{\sf f}{\sf V} \ x ) ; ({}^{\sf f}{\sf V} \ (x + 1) ) ]$ (Recall that we have fixed $0$ as the predicate symbol which corresponds to relation on the modal model. ). 

% weird phrasing. 
\end{itemize}
\begin{holmath}
\begin{array}{rcl}
  \HOLthm[aligneddef]{chap2_4revised.ST_def}
\end{array}
\end{holmath}

\end{defn}

Note that for the last line, according to the semantical interpretation of the `\HOLtm{DIAM phi}', which is `exists a world related to the current state where \HOLtm{phi} is satisfied, we translate \HOLtm{DIAM phi} into the existential formula, to capture `there exists some world', we must come up with a fresh variable which is bounded by the existential quantifier. To make sure that we use a fresh variable symbol that is not the same as the variable $x$ which is marking the current state, we use $x+1$ as our new variable symbol, hence the standard translation of \HOLtm{DIAM phi} at $x$ says exactly the same thing as how do we interpret it in the model. 

Some syntactic properties of standard translation are immediate to prove. For instance:
\begin{itemize}
\item Every first-order formula obtained by standard translation is $\mathcal L_{\tau}^1$.
\item Every first-order formula obtained by standard translation has at most one free variable.

\item The negation of a standard translation is a standard translation.

\item Conjunctions and disjunctions of standard translations are equivalent to standard translations of big conjunction/disjunction formulas.
\end{itemize}

 On the other hand, standard translations have interesting semantical behavior as well. Their semantical features give a first-order reformulation of modal satisfaction. 
\begin{prop}[\holref{\texttt{prop_2_47_i}}{chap2_4revised}{76}]\label{5.4}
A modal formula is satisfied a point $w$ in a modal model iff its standard translation at $x$ is satisfied at the same modal viewed as a first-order model when $x$ is assigned $w$.
\begin{holmath}
  \HOLthm{prettyPrinting.ppprop_2_47_i}
\end{holmath}
\end{prop} 

There is a result corresponds to the above using \HOLtm{folm2mm}.


\begin{prop}[\holref{\texttt{prop_2_47_i'}}{chap2_7}{98}]\label{5.5}
If a first-order model \HOLtm{M} satisfies a standard translation \HOLtm{phi}, then if we view \HOLtm{M} as a modal model, the modal formula \HOLtm{phi} is satisfied at the state which is assigned $x$ by $\sigma$. 
\begin{holmath}
  \HOLthm{prettyPrinting.ppprop_2_47_i'}
\end{holmath}
\end{prop}

As an interesting consequence of the `equivalence' between a modal formula and its standard translation, we can prove formulas obtained by standard translation are \emph{invariant under bisimulation}. 





\begin{defn}[\holref{Invariant for bisimulation}{chap2_6}{1135}]
An $\mathcal L_{\tau}^1$ formula $\alpha(x)$ with at most one free variable $x$ is invariant for bisimulations if for all models \HOLtm{M} and \HOLtm{N}, with \HOLtm{w IN M.frame.world} and \HOLtm{v IN N.frame.world}, if there exists a bisimulation relation between \HOLtm{M} and \HOLtm{N} relating $w$ and $v$, then $\alpha(x)$ holds at \HOLtm{w} if and only if it holds \HOLtm{v} when both \HOLtm{M} and \HOLtm{N} are viewed as first-order models.
\begin{holmath}
  \HOLthm[def]{prettyPrinting.ppinvar4bisim_def}
\end{holmath}
\end{defn}

The predicate \HOLtm{invar4bisim} takes four parameters, the first one is the name of the only free variable in \HOLtm{phi} and the last one is the formula itself. For the second and third one. Recall the issue we meet when we define equivalence of modal formulas as in the first chapter, it needs to take a type as a parameter since we cannot have type variable which only appears on the right-hand side but not on the left-hand side. For the same reason, here we need to tell HOL4 explicitly about the type of the world set of the models which can serve as \HOLtm{M} and \HOLtm{N} in our definition. Although it is possible to prove theorems for different types $\alpha$ and $\beta$ in the above definition, we will only consider the case that $\alpha$ and $\beta$ are the same when proving things afterwards. 

\begin{prop}[\holref{\texttt{thm_2_68_half2'}}{chap2_6}{1899}]\label{5.6}
Standard translations are invariant for bisimulation.
\begin{holmath}
  \HOLthm[showtypes]{chap2_6.thm_2_68_half2'}
\end{holmath}
\end{prop}

\begin{proof}
By Theorem \ref{3.7} and Proposition \ref{5.5}.

\end{proof}

In fact, using set theory as the foundation, we can prove that every formula which is invariant under bisimulation arises as a standard translation of a modal formula, so formulas which are invariant under bisimulation coincides with standard translations. We can translate the set-theoretic proof into a simple type-theoretic proof. But the proof of the other direction requires more advanced tools, and also does not look the same as its mathematical statement as in set theory in HOL4 because of the lack of expressiveness of simple type theory. We will leave the other direction of the proof to the next chapter.


\section{Modal Saturation via ultrafilter extensions}

In the second chapter, we have seen bisimilarity implies modal equivalence, but only proved the converse for image finite models. In this section, we are interested in another particular class of models, called \emph{m-saturated} models, where worlds which are modal equivalent are bisimilar. 

Let us explain what is meant by `m-saturated' first. m-saturated is a sort of compactness property, which says `finite satisfaction implies satisfaction'. We need to give three definitions consecutively to finally get m-saturation to be formally defined in HOL4. 

\begin{defn}[\holref{Satisfiable}{chap2_5}{43}]
 A set of formulas \HOLtm{Σ} is called satisfiable in a set of worlds $X$ of a model \HOLtm{M} if there exists a world in $X$ such that all the formulas in \HOLtm{Σ} are satisfied. 
\begin{holmath}
  \HOLthm[def,phi/form]{chap2_5.satisfiable_in_def}
\end{holmath}
\end{defn}

\begin{defn}[\holref{Finitely satisfiable}{chap2_5}{47}]
A set of formulas \HOLtm{Σ} is called finitely satisfiable if every finite subset of \HOLtm{Σ} is satisfiable. 
\begin{holmath}
  \HOLthm[def]{chap2_5.fin_satisfiable_in_def}
\end{holmath}
\end{defn}

\begin{defn}[\holref{m-saturated}{chap2_5}{50}]
A model is called m-saturated if for every \HOLtm{w IN M.frame.world}, if a set \HOLtm{Σ} is finitely satisfiable in the set of  successors of $w$, then it is satisfiable in the set of successors of $w$.
\begin{holmath}
\HOLthm[def]{prettyPrinting.ppM_sat_def}
\end{holmath}
\end{defn}

The m-saturated models are useful because it is another kind of models that make bisimilarity and modal equivalence coincide. 

\begin{prop}[\holref{\texttt{prop_2_54_DIST_TYPE}}{chap2_5}{136}]\label{5.7}
For two worlds $w_1$ and $w_2$ living in m-saturated models \HOLtm{M1} and \HOLtm{M2} respectively, if $w_1$ and $w_2$ are modal equivalent, then they are bisimilar.
\begin{holmath}
  \HOLthm[M1/M,M2/M',w1/w,w2/w',width=60]{prettyPrinting.ppprop_2_54_DIST_TYPE}
\end{holmath}
\end{prop}

\begin{proof}
Let \HOLtm{M1} and \HOLtm{M2} be models. In fact, they can be $(\beta,\alpha),(\gamma,\alpha)$-models respectively, where $\beta$ and $\gamma$ not necessarily the same. Under the assumptions, the bisimulation relation is given by \HOLtm{λw1 w2. (!phi. satis M1 w1 phi <=> satis M2 w2 phi)}. To prove this relation is indeed a bisimulation, the only non-trivial clause to check is that for worlds $w_1,v_1$ of \HOLtm{M1} and world $w_2$ of \HOLtm{M2} such that $w_1$ and $w_2$ are modal equivalent, we can find a world $v_2$ of \HOLtm{M2} such that \HOLtm{M2.frame.rel w2 v2} and $v_1$ and $v_2$ are modal equivalent.

Under the assumptions above, let \HOLtm{Σ} denote the set of formulas satisfied by $v_1$, it suffices to find a successor of $w_2$ where each formula in \HOLtm{Σ} is satisfied. As \HOLtm{M2} is m-saturated, it suffices to prove each finite subset $\Delta\subseteq \Sigma$ is satisfied in some successor of $w_2$. Take such a $\Delta$, then it is satisfied at $v_1$ by its definition. As $\Delta$ is finite, we can conjunct all its elements to obtain a formula $\psi$. We have \HOLtm{satis M1 v1 psi}, and therefore \HOLtm{satis M1 w1 (DIAM psi)}. By modal equivalence of $w_1$ and $w_2$, we then get \HOLtm{satis M2 w2 (DIAM psi)}, so there exists a successor of $w_2$ that satisfies $\psi$. 

\end{proof}

Since m-saturated models are nice, here is a natural question: How can we get such models? In the following of this section, we will see the fact that for every model its \emph{ultrafilter extension} is an m-saturated model. In order to talk about ultrafilter extensions, we wrote a theory about ultrafilters in HOL4. We will not show the whole theory here, but will just give the ingredients we will need only for the sake of this section. 
%I am a dividing line -----------------------------------

As its name suggests, an ultrafilter is a special kind of filter. 


\begin{defn}[\holref{Filter}{ultrafilter}{18}]
 Given a non-empty set $J$, a set $L$ which is a subset of the power set of $J$, is called  filter if it contains $J$ itself, closed under binary intersection, and is closed upward. 
\begin{holmath}
  \HOLthm[def,L/FLT,J/W,width=60]{ultrafilter.filter_def}
\end{holmath}
\end{defn}
Note that by induction, closure under binary intersection implies closure under every finite intersection.

The simplest example of a filter is the power set \HOLtm{POW} $J$ itself. By upward closure, if a filter on $W$ contains the empty set, then the filter must be the whole power set \HOLtm{POW} $J$. A filter which is not a power set is called a \emph{proper filter}. 

For a set $J$ and an element $w\in J$, the filter generated by \HOLtm{{w\}} is the set of subsets of $J$ that contains $w$, it is trivial to check it is indeed a filter. Such a filter is called \emph{principal filters}. In HOL4, we define a function that takes an element $w\in J$ and a set $J$, and give the principle filter generated by $w$, which is denoted as \HOLtm{principle_UF w J}. Actually, principal filters are the simplest examples of ultrafilters: \emph{ultrafilters}. 
\begin{defn}[\holref{Ultrafilter}{ultrafilter}{34}]
 An ultrafilter on a set $J$ is a proper filter $U$ such that for every $X\subseteq J$, either $X$ or its complement $J\setminus X$ is in $U$, but not both.
\begin{holmath}
  \HOLthm[def,J/W,width=65]{ultrafilter.ultrafilter_def}
\end{holmath}
\end{defn}

There are two results about ultrafilter which will be used in this section, the first one is the \emph{ultrafilter theorem}:
\begin{thm}[\holref{\texttt{ultrafilter_theorem}}{ultrafilter}{361}]\label{5.11}
Every proper filter is contained in an ultrafilter. 
\begin{holmath}
  \HOLthm[L/f,J/w]{ultrafilter.ultrafilter_theorem}
\end{holmath}
\end{thm}

The other one is a corollary of the ultrafilter theorem. This corollary says that for every subset of \HOLtm{POW J} which has \emph{finite intersection property}, it can be extended to an ultrafilter on $J$. In HOL4, the definition of finite intersection property is given as:
\begin{defn}[\holref{Finite intersection property}{ultrafilter}{179}]
 A subset of $\mathcal P (J)$ has finite intersection property if once we take the intersection of finitely many elements in it, the resultant set is nonempty. We read `\HOLtm{FIP A J}' as $A$ is a set of subsets of $J$ with finite intersection property.
\begin{holmath}
  \HOLthm[J/W,A/S,B/S',width=65]{ultrafilter.FIP_def}
\end{holmath}
\end{defn}

Note that finite intersection property is a property of subsets of power sets, hence \HOLtm{FIP} defined below takes two parameters, a set of subsets of $J$, and an ambient set $J$. Every proper filter has finite intersection property. 

And the corollary is stated as:

\begin{prop}[\holref{\texttt{ultrafilter_theorem_corollary}}{ultrafilter}{417}]\label{5.12}
For every set $A$ of subsets of a non-empty set $J$, there exists an ultrafilter on $J$ which contains $A$.
\begin{holmath}
  \HOLthm[J/W,A/s]{ultrafilter.ultrafilter_theorem_corollary}
\end{holmath}
\end{prop}

Although the proof of both ultrafilter theorem and its corollary are interesting from the mathematical aspect, they are not technical from the formalization aspect. So we have omitted their proof. 

%(long long long dividing line- --------------------------)


We can now launch on the construction of the ultrafilter extension of a model. For a model \HOLtm{M}, the world set of its ultrafilter extension of \HOLtm{M} is simply the set of ultrafilters on the world set of \HOLtm{M}, whereas the relation defined on the set of ultrafilters require more explanation. 

Fix a model \HOLtm{M} and a subset $X$ of its world set, we can consider two set of worlds arises from $X$: One of them is the set of worlds of \HOLtm{M} which `can see' some world in $X$, an element of this set is a world $w$ of \HOLtm{M} such that there exists some \HOLtm{v IN X} such that \HOLtm{M.frame.rel w v}.  The other one is the set of worlds in \HOLtm{M} which `only see' the worlds in $X$, an element $w$ of this set is a world in \HOLtm{M} such that once we have \HOLtm{M.frame.rel w v} for some other world \HOLtm{v IN M.frame.world}, we must have \HOLtm{v IN X} as well. Formally, their definitions are given as:

\begin{defn}[\holref{`Can see'}{chap2_5}{189} and \holref{`Only see'}{chap2_5}{192}]
Given a model \HOLtm{M} and a set \HOLtm{X} of worlds of \HOLtm{M}, we define sets:

\begin{itemize}
\item The set of worlds that `can see' $X$ (notation \HOLtm{can_see M X}) is the set of worlds $w$ of \HOLtm{M} such that there exists some \HOLtm{v IN X} such that \HOLtm{M.frame.rel w v}.

\item The set of worlds that `only see' $X$ (notation \HOLtm{only_see M X}) is the set of worlds $w$ in \HOLtm{M} such that once we have \HOLtm{M.frame.rel w v} for some other world \HOLtm{v IN M.frame.world}, we must have \HOLtm{v IN X}.
\end{itemize}

\begin{holmath}
  \HOLthm[def]{chap2_5.can_see_def}\\[3mm]
  \HOLthm[def]{chap2_5.only_see_def}
\end{holmath}
\end{defn}

By definition of satisfaction, for every model formula \HOLtm{phi}, the worlds satisfying \HOLtm{DIAM phi} is exactly the set of worlds that can see a world where \HOLtm{phi} is satisfied, and the worlds that satisfy \HOLtm{BOX phi} are exactly the worlds that only sees the worlds where \HOLtm{phi} is satisfied. 


 The concept `can see' and `only see' are actually dual to each other.


\begin{prop}[Duality between \holref{`can see'}{chap2_5}{213} and \holref{`only see'}{chap2_5}{207}]\label{5.16}
The worlds that can see a world in $X$ is precisely a world that does not only see worlds that are not in $X$. Similarly, a world that can only see worlds in $X$ is precisely a world which can not see worlds which are not in $X$. 
\begin{holmath}
  \HOLthm{chap2_5.can_only_dual}\\[3mm]
  \HOLthm{chap2_5.only_can_dual}
\end{holmath}
\end{prop}

A world can see some world in the union of $X$ and $Y$ if and only if it can see a world in $X$ or a world in $Y$, hence ${\mathfrak M}_{\Diamond}$ distributes over union. Similarly, a world only sees the worlds in the intersection of $X$ and $Y$ if and only if it can only see worlds in $X$ and worlds in $Y$, therefore, ${\mathfrak M}_{\Diamond}^{\delta}$ distributes over intersections.


\begin{prop}[\holref{\texttt{can_see_UNION}}{chap2_5}{611}, \holref{\texttt{only_see_INTER}}{chap2_5}{273}]\label{5.17}
\begin{holmath}
  \HOLthm{prettyPrinting.ppcan_see_UNION}\\[3mm]
  \HOLthm{chap2_5.only_see_INTER}
\end{holmath}
\end{prop}


Return to the discussion about the definition of relation on the ultrafilter extension of \HOLtm{M}. We define:

\begin{defn}[\holref{Relation used in ultrafilter extension}{chap2_5}{221}]
Two ultrafilter $u,v$ on \HOLtm{M} to be related if for every $X\in u$, the set that $X$ can see is in $v$. 
\begin{holmath}
  \HOLthm[def,width=65]{chap2_5.UE_rel_def}
\end{holmath}
\end{defn}

 By the duality between `can see' and `only see', this relation has a reformulation:

\begin{prop}[\holref{\texttt{exercise_2_5_5}}{chap2_5}{237}]\label{5.18}
Two ultrafilters $u$ and $v$ on \HOLtm{M.frame.world} are related if and only if for every subset $Y$ of \HOLtm{M.frame.world}, if the set of worlds of \HOLtm{M} that it can only see $Y$ is in $u$, then $Y$ is in $v$.
\begin{holmath}
  \HOLthm[width=65]{prettyPrinting.ppexercise_2_5_5}
\end{holmath}
\end{prop}

\begin{proof}
Suppose \HOLtm{UE_rel M u v} and pick a set $Y$ of worlds such that \HOLtm{(only_see M Y) IN u}, we will prove $Y\in V$. As $v$ is an ultrafilter, it suffices to prove that \HOLtm{(M.frame.world DIFF Y) ∉ v}, by definition of \HOLtm{UE_rel M}, since we have \HOLtm{UE_rel M u v}, it suffices to prove \HOLtm{(can_see M (M.frame.world DIFF Y)) ∉ u}. As $u$ is also an ultrafilter, it suffices to prove \HOLtm{(M.frame.world DIFF (can_see M (M.frame.world DIFF Y))) IN u}. But we have \HOLtm{M.frame.world DIFF can_see M (M.frame.world DIFF Y) = only_see M Y} by duality, and hence we are done. The other direction is similar.


\end{proof}

In order to define the ultrafilter extension model, the only remaining issue is to define the valuation. We define a propositional letter $p$ to be satisfied at an ultrafilter $v$ if and only if the worlds in \HOLtm{M} which satisfies the $p$ is in $v$. Hence the full definition of ultrafilter extension is:

\begin{defn}[\holref{Ultrafilter extension}{chap2_5}{267}]
The ultrafilter extension is defined as a function that takes a model and given the extended model. We denote the ultrafilter extension of \HOLtm{M} by \HOLtm{UE M}.
\begin{holmath}
  \HOLthm[def]{chap2_5.UE_def}
\end{holmath}
\end{defn}
The ultrafilter extension also changes the type of the input model, namely, it changes the type of world set from $\beta$ to $(\beta\to bool)\to bool$, it is indeed an extension, in the sense that \HOLtm{M} is embedded in \HOLtm{UE M} as a submodel by the function sending \HOLtm{w IN M.frame.world} to the principle ultrafilter \HOLtm{principle_UF w M.frame.world} generated by $w$. In general, this embedding does not necessarily give a generated submodel, nevertheless, we have an invariance result for this embedding:
\begin{prop}[\holref{\texttt{prop_2_59_ii}}{chap2_5}{483}]\label{5.19}
For every model \HOLtm{M} and every world \HOLtm{w} of \HOLtm{M}, \HOLtm{w} is modal equivalent to the principle filter generated by \HOLtm{w} which is embedded in the ultrafilter extension of \HOLtm{M}. 
\begin{holmath}
  \HOLthm{chap2_5.prop_2_59_ii}
\end{holmath}
\end{prop}
This is actually a special case of the following proposition, where $u$ is taken as \HOLtm{principle_UF w M.frame.world}. This proposition below captures the idea that ultrafilters are used to describe the sense of `most'. More explicitly, for an ultrafilter $U$ on a set $W$, we can regard $U$ as the set of subset of $W$ where can be regarded as `most of' elements in $W$, then the closure property under intersection can be interpreted as `if two subsets of $W$ both contain most of the elements in $W$, then their intersection also contains most of  the elements in $W$'. The upward closure property can be regarded as `if a subset of $W$ contains most of the  elements in $W$, then every subset of $W$ that contains this subset also contain most of the elements in $W$', which consists with our intuition. Finally, if a subset of $W$ is regarded as `most of the elements in $W$', then we are regarding its complement as `a small part of elements in $W$', so its complement cannot also be in the ultrafilter. From this aspect, the proposition below says that a formula $\phi$ is satisfied in an ultrafilter $u$ on \HOLtm{M.frame.world} iff $\phi$ is satisfied at most worlds in \HOLtm{M}, where the sense of `most' is measured by $u$, as described above. 
\begin{prop}[\holref{\texttt{prop_2_59_i}}{chap2_5}{316}]\label{5.20}
A formula \HOLtm{phi} is satisfied at an ultrafilter $u$ in the ultrafilter extension of \HOLtm{M} if and only if in the unextended model, the set of worlds in \HOLtm{M} satisfying \HOLtm{phi} is in \HOLtm{u}. 
\begin{holmath}
  \HOLthm[width=60]{chap2_5.prop_2_59_i}
\end{holmath}
\end{prop}
\begin{proof}
By induction on \HOLtm{phi}. Three cases are straightforward. The diamond case requires some manipulation with the usage of Proposition \ref{5.18}, Proposition \ref{5.17} (2) and Proposition \ref{5.12}. 

\end{proof}

The above proposition leads to a proof of m-saturatedness of ultrafilter extensions.
\begin{prop}[\holref{\texttt{prop_2_61}}{chap2_5}{504}]\label{5.21}
The ultrafilter extension of each model is m-saturated. 
\begin{holmath}
  \HOLthm{chap2_5.prop_2_61}
\end{holmath}
\end{prop}
\begin{proof}
Suppose \HOLtm{Σ} is a set of formulas which is finitely satisfiable in the set of successors of a world \HOLtm{u IN (UE M).frame.world}, we need to find a world \HOLtm{u' IN (UE M).frame.world} such that \HOLtm{UE_rel M u u'} and \HOLtm{satis (UE M) u' phi} for all \HOLtm{phi IN Σ}. By Proposition \ref{5.18} and Proposition \ref{5.20}, it amounts to find an ultrafilter $u'$ on \HOLtm{M.frame.world} such that \HOLtm{{Y | (only_see M Y) IN u\} ⊆ u'} and \HOLtm{{w | w IN M.frame.world /\ satis M w phi\} IN u'} for all \HOLtm{phi IN Σ}.

Consider the set $\Delta:=$
\begin{holmath}
\HOLtm{{{w | w IN M.frame.world /\ !phi.phi IN s ==> satis M w phi\}| FINITE s /\ s ⊆ Σ\} ∪ {Y | (only_see M Y) IN w /\ Y ⊆ M.frame.world\}}
\end{holmath}
. We check $\Delta$ has the finite intersection property. The only nontrivial thing to check is that for $a$ in the first set of the union and $b$ in the second set of the union, we have $a\cap b\ne\emptyset$.

Suppose $s \subseteq\Sigma$ is finite, and $b$ is a set of worlds in \HOLtm{M} such that \HOLtm{(only_see M b) IN u}, we show \HOLtm{{w | w IN M.frame.world /\ !phi. phi IN s ==> satis M w phi\} ∩ b <> {\}}. Recall \HOLtm{Σ} is finitely satisfiable in the set of successors of $u$, we have a world $u''$ such that \HOLtm{UE_rel M u u''} and \HOLtm{satis (UE M) u'' phi} for all $\phi \in s$, in other worlds, \HOLtm{{w | w IN M.frame.world /\ satis M w phi\} IN u''} for all $\phi\in s$. Then as $s$ is finite, \HOLtm{{w | w IN M.frame.world /\ !phi.phi IN s ==> satis M w phi\}} is a big intersection of finitely many sets in $u''$, and hence is in $u''$. By Proposition \ref{5.18} again, \HOLtm{UE_rel M u u''} gives \HOLtm{{Y | (only_see M Y) IN u /\ Y ⊆ M.frame.world\} ⊆ u''}, so $b\in u''$ as well. As two elements in $u''$ has a nonempty intersection, we are done.

Hence by Proposition \ref{5.12}, there exists an ultrafilter $u'$ contains $\Delta$, it is easy to check $u'$ is what we want.
\end{proof}

Finally, as claimed at the beginning of this chapter, we arrive at the characterisation of modal equivalence as bisimilarity in the ultrafilter extensions:
\begin{thm}[\holref{\texttt{thm_2_62}}{chap2_5}{579}]
Given two models \HOLtm{M1} and \HOLtm{M2} with \HOLtm{w1 IN M1.frame.world} and \HOLtm{M2.frame.world}, \HOLtm{w1} and \HOLtm{w2} are modal equivalent if and only if the principle filters generated by \HOLtm{w1} in the ultrafilter extension of \HOLtm{M1} and the principle filter generated by \HOLtm{w2} in the ultrafilter extension of \HOLtm{M2} are bisimilar. 
\begin{holmath}
  \HOLthm[w1/w,w2/w',M1/M,M2/M',width=60]{chap2_5.thm_2_62}
\end{holmath}
\end{thm}
\begin{proof}Bisimulation implies modal equivalence by Theorem \ref{3.7}. For the reverse direction, if \HOLtm{w1 IN M1.frame.world} and \HOLtm{w2 IN M2.frame.world} are modal equivalent, then \HOLtm{(principle_UF w1 M1.frame.world) IN (UE M1).frame.world} is modal equivalent to \HOLtm{(principle_UF w2 M2.frame.world) IN (UE M2).frame.world} by Proposition \ref{5.19}. As \HOLtm{UE M1} and \HOLtm{UE M2} are m-saturated by Proposition \ref{5.21}, the result follows by Proposition \ref{5.7}. 
\end{proof}
\chapter{Two characterizing results}

In the last chapter, we presented the definition of `invariant for bisimulation', and mentioned that if we are working with set theory, then we can prove that first-order formulas that are invariant for bisimulation are precisely the ones which is equivalent to a formula that we can obtain from standard translation. We translated one direction of the set-theoretic proof of this result there. In the first section of this chapter, we will translate another half of the proof into HOL4, and explain why we cannot get the double implication when working with simple type theory.  In the second section, we translate a proof similar to the characterization of standard translations from set theory, which says a modal formula is \emph{preserved under simulation} if and only if it is \emph{positive existential}. The two new terminologies are to be introduced in the second section of this chapter.

%In this chapter we put everything we have developed so far together. Using the theory we have already constructed, we can characteristic two semantical behaviour by syntactical features. In the first section, we prove that an $\mathcal L_{\tau}^1$ formula is invariant under bisimulations precisely when it is equivalent to a first-order formula which is obtained by standard translation. In the second section, we prove that a modal formula is \emph{preserved under simulation} if and only if it is \emph{positive existential}, where the two concepts are to be introduced there. 


%With and use them to give syntactical characterisations of semantical properties `invariant for bisimulation' and `preserved under simulation'. 



%This whole chapter relies highly on first-order logic, and we will swap between modal models and first-order models very frequently. Hence when we talk about first-order models, we restrict our scope to the ones which contains the same amount of information as a modal model. And only talk about first-order formulas which makes sense to such models. So when we say `a first-order formula' in this chapter, we secretly refer to a first-order formula with no function symbols and only have unary predicate symbols and only one binary predicate symbol.

\section{The `modal' fragment of $\mathcal L_{\tau}^1$ formulas}

In the last chapter, we introduce the standard translation and proved that every modal formula is `equivalent to' a first-order formula. We mentioned that every first-order formula that corresponds to a modal formula is an $\mathcal L_{\tau}^1$ formula, but it is not the fact that every $\mathcal L_{\tau}^1$ formula is equivalent to the standard translation of a modal formula. For instance, the formula \HOLtm{fR (fV 1) (fV 2)} is not a standard translation. Here comes a natural question: what are the $\mathcal L_{\tau}^1$-formulas which is equivalent to a standard translation? In the last chapter, we have already given a short answer: an $\mathcal L_{\tau}^1$ formula is equivalent to a standard translation if and only if it is invariant under bisimulation. Also, recall that we have already proved that standard translations are invariant under bisimulation. In this section, we devote to translate the proof of the other direction, saying `every formula which is invariant under bisimulation is equivalent to a standard translation', into HOL4, which uses simple type theory as its foundation. The tools that this proof will use centered on saturated models, which we are introducing now:

Given a first-order model \HOLtm{M}, we can expand it by adding some new function symbols to it. In HOL4, it is easy to define such an operation when we are expanding a model \HOLtm{M} with no interesting information on function symbols. Fortunately, we are only interested in such easy case throughout the discussion below, even more, here we are only considering adding finitely many nullary function symbols, which are actually constants. Hence to keep things simple, the definition of expansion of models is taken to be as follows:

\begin{defn}[\holref{Expansion}{lemma2_73}{65}]
In HOL4, the function \HOLtm{expansion} is defined as a predicate, where the model \HOLtm{M} is the model we start with and \HOLtm{M'} is the resultant model after adding a finite number of constants, each corresponds to an element in \HOLtm{A}, which is a world in \HOLtm{M}.
\begin{holmath}
  \HOLthm[def,width=65]{lemma2_73.expansion_def}
\end{holmath}
\end{defn}

If we expand a model \HOLtm{M} by throwing in a finite set of constants corresponds to the elements in $A$, then we need to number the elements in $A$. In other words, we need to choose an order on $A$. There is no natural way of defining this order, and hence if we define expansion as a function that takes a model, a set of worlds, and gives an expanded model, this function will involve choice, which is less convenient to work with. This is the reason why we define expansion as a predicate instead of a function. However, as the choice of order on $A$ does not really matter, there is `up to isomorphism' only one expansion of a model using a set of worlds. So we can say `the expansion of \HOLtm{M} by the set $A$'. 

The expanded model has the same domain and the same predicate symbols as the unexpanded one, that are only the function symbols that make them different. Before the expansion, as there is no information contained in \HOLtm{M} about function symbols, once a first-order term  contains some function symbol, this term will not make sense to \HOLtm{M}, hence \HOLtm{M} can be used to interpret no formula with a function symbol. If $A$ has cardinality $m$, where $m$ is a natural number, after the expansion, every term \HOLtm{Fn t []} for $0\le t< m$ makes sense to \HOLtm{M'}, and is evaluated to the element \HOLtm{f t}. Therefore, the formulas which only uses these function symbols can be interpreted in the expanded model. The role of \HOLtm{f} here is to assign each $0\le t < m$ an element of the domain of \HOLtm{M}, where the term \HOLtm{Fn t []} will be evaluated to. 


A set \HOLtm{Σ} of first-order formulas is called \emph{consistent} with a model \HOLtm{M} if for every finite subset \HOLtm{Σ0 ⊆ Σ}, there exists a valuation of \HOLtm{M} such that all elements of \HOLtm{Σ0} are satisfied, in this case, we write \HOLtm{consistent M Σ}. A set \HOLtm{Γ} of first-order formula is called a \emph{type} if there is a variable symbol $x$ such that for each formula in \HOLtm{Σ}, the only free variable that it may contain is $x$, in this case, we write `\HOLtm{ftype x Γ}' in HOL4. When `\HOLtm{ftype x Γ}', we say \HOLtm{Γ} is \emph{realized} in \HOLtm{M} if there is an element in the domain of \HOLtm{M} such that all the elements in \HOLtm{Γ} are satisfied, and write `\HOLtm{frealizes M x Γ}'. 




\begin{defn}[\holref{$n$-saturated}{lemma2_73}{77} and \holref{countably saturated}{lemma2_73}{90}]
A first-order model \HOLtm{M} is called $n$-saturated if for every set \HOLtm{A ⊆ M.frame.world} where \HOLtm{CARD A < n} and for every \HOLtm{M'} and \HOLtm{f} assigning natural numbers elements in the domain of \HOLtm{M} such that \HOLtm{expansion M A M' f}, \HOLtm{M'} realizes every consistent set \HOLtm{Γ} such that \HOLtm{ftype x Γ}, where $x$ is an arbitrary variable symbol. A model is countably saturated if it is $n$-saturated for all $n$. In HOL4:
\begin{holmath}
  \HOLthm[def,Γ/G]{prettyPrinting.ppn_saturated_def}\\[3mm]
  \HOLthm[def]{lemma2_73.countably_saturated_def}
\end{holmath}
\end{defn}

Countably saturated models are interesting for us since for countably saturated models, when we view them as modal models, then bisimulation and modal equivalence coincides on those models. 

\begin{thm}[\holref{\texttt{thm_2_65_corollary}}{chap2_6}{407}]\label{6.1}
\begin{holmath}
  \HOLthm[w1/w,w2/w',M1/M,M2/M']{prettyPrinting.ppthm_2_65_corollary}
\end{holmath}
\end{thm}

By Proposition \ref{5.7}, to prove the above, it suffices to prove:
\begin{thm}[\holref{\texttt{thm_2_65}}{chap2_6}{168}]
If a modal model is countably saturated when we view it as a first-order, then this model is m-saturated.
\begin{holmath}
  \HOLthm{chap2_6.thm_2_65}
\end{holmath}
\end{thm}
\begin{proof}
 Suppose \HOLtm{countably_saturated (mm2folm M)}. Let \HOLtm{a IN M.frame.world} and \HOLtm{Σ} a set of modal formulas which is finitely satisfiable in the set of successors of $a$. We find a successor of $a$ in \HOLtm{M} realising all the formulas in \HOLtm{Σ}. 


Define \HOLtm{Σ' = {fR (Fn 0 []) (fV x)\} UNION {ST x phi | phi IN Σ\}} and let \HOLtm{M'} be the model obtained by expanding \HOLtm{(mm2folm M)} by adding a constant, which is a nullary function symbol represented by $0$, that corresponds to the world \HOLtm{a}. 
 We claim \HOLtm{consistent M' Σ'}. Take a finite set \HOLtm{Σ0 ⊆ Σ'}, we should find an element in \HOLtm{M'} where every formula in \HOLtm{Σ0} is satisfied. For each element in \HOLtm{Σ0} which is a standard translation, use \HOLtm{CHOICE} to choose a modal formula $p\in \Sigma$ that is translated to it. Collect the formulas we choose into a set \HOLtm{ps}, then \HOLtm{ps} is a finite subset of \HOLtm{Σ}. Recall we have assumed \HOLtm{Σ} is finitely satisfiable in the set of successors of \HOLtm{a}, hence there exists \HOLtm{b IN M.frame.world} and \HOLtm{M.frame.rel a b} such that \HOLtm{satis M b p} for every \HOLtm{p IN ps}. It follows by Proposition \ref{5.4} that no matter \HOLtm{fR (Fn 0 []) (fV x)} is in \HOLtm{Σ0} or not, we have \HOLtm{Σ0} is satisfied at \HOLtm{b} in \HOLtm{M'}.

This proves \HOLtm{consistent M' Σ'}. Since \HOLtm{(mm2folm M)} is countably saturated, the whole set \HOLtm{Σ'} itself is satisfied in some \HOLtm{b} in \HOLtm{M'}. The fact that \HOLtm{fR (Fn 0 []) (fV x)} holds at $b$ implies $b$ is a successor of $a$ in \HOLtm{M}, and \HOLtm{{ST x phi | phi IN Σ\}} holds at \HOLtm{b} implies that \HOLtm{satis M b phi} for every \HOLtm{phi IN Σ} by Proposition \ref{5.4}.
\end{proof}

As a reader may observe, we actually only need that \HOLtm{mm2folm M} is 2-saturated for the proof above. Knowing the interesting properties of countably saturated models, we now answer the question about where to obtain them. The canonical way to obtain such models involves the usage of ultraproducts, which we will discuss in the following interlude. 

\subsection{Interlude: Countably saturated models via ultraproducts}

Although we are ultimately interested in ultraproducts on models, we will begin by introducing the construction of ultraproducts of sets. 


\begin{defn}[\holref{Cartesian product}{ultraproduct}{20}]
 Suppose $J$ is a non-empty set indexing the family $\{A_j\}_{j\in J}$, where each $A_j$ is non-empty. The Cartesian product of the family  $\{A_j\}_{j\in J}$ is the set of functions with domain $J$ such that for all $j\in J$, $f(j)\in A_j$.
\begin{holmath}
  \HOLthm[def,j/i,J/I]{ultraproduct.Cart_prod_def}
\end{holmath}
\end{defn}
As before, in the definition above, \HOLtm{A} is encoded as a function, and hence for $j\in J$, \HOLtm{A j} is the set $A_j$ indexed by $j$. 

 
\begin{defn}[\holref{$U$-equivalence}{ultraproduct}{23} and \holref{ultraproduct}{ultraproduct}{43}]
If $U$ is an ultrafilter on $J$, for two functions $f,g$ in the Cartesian product \HOLtm{Cart_prod J A}, we say $f$ and $g$ are $U$-equivalent (notation: \HOLtm{Uequiv U J A f g}) if the set \HOLtm{{j | j IN J /\ f j = g j\}} (where the values of $f$ and $g$ agree) is in $U$. 
For an ultrafilter $U$ on a set $J$ and a family $A$ indexed by $J$, \HOLtm{Uequiv U J A} is an equivalence relation on the Cartesian product of the $A_j$'s. The ultraproduct of $A_j$ modulo $U$ is the set of equivalence classes partitioned by the relation \HOLtm{Uequiv U J A}. The ultraproduct of $A_j$ modulo $U$ is the set of equivalence classes obtained by partitioning \HOLtm{Cart_prod J A} using the relation \HOLtm{Uequiv U J A}.
\begin{holmath}
  \HOLthm[def,J/I]{ultraproduct.ultraproduct_def}
\end{holmath}
\end{defn}

In the case where $A_j = A$ for all $j\in J$, the ultraproduct is called the ultrapower of $A$ modulo $U$.

We also have notions of ultraproduct for both modal and first-order models. For modal models: 
\begin{defn}[\holref{Ultraproduct of modal models}{ultraproduct}{109}]
 Given a family \HOLtm{MS} of modal models indexed by $J$ and an ultrafilter $U$ on $J$, where \HOLtm{MS} is encoded as a function that takes an element of $J$ and gives a model, the ultraproduct model of \HOLtm{MS} modulo $U$ (notation : \HOLtm{ultraproduct_model U J MS}) is described as follows:

\begin{itemize}
  \item The world set is the ultraproduct of world sets of \HOLtm{MS} modulo $U$. 

  \item For two equivalence classes $f_U,g_U$ of functions in the ultraproduct, they are related iff there exist $f\in f_U,g\in g_U$, such that \HOLtm{{j IN J | (MS j).frame.rel (f j) (g j)\}} is in $U$.
  \item For a propositional letter $p$ and an equivalence class $f_U$, we have $p$ is satisfied at $f_U$ iff there exists $f\in f_U$ such that \HOLtm{{j | j IN J /\ (f j) IN (MS j).valt p\}} is in $U$.
\end{itemize} 
In HOL4:
\begin{holmath}
  \HOLthm[def,J/I,j/i,width=65]{ultraproduct.ultraproduct_model_def}
\end{holmath}
Here \HOLtm{models2worlds} is the function that takes a family of models to the family of their world sets:
\begin{holmath}
  \HOLthm[def,j/i]{ultraproduct.models2worlds_def}
\end{holmath}
\end{defn}


In the definition of the relation and valuation of the ultraproduct modal model, the occurrence of the existential quantifier is used to describe the existence of representatives of an equivalence class with a certain additional property. 
As we expect, because \HOLtm{Uequiv U J A} is an equivalence relation for every ultrafilter, the choice of representative does not matter, in the sense that if only one representative satisfies the required condition, then all the elements in the equivalence class will satisfy the condition. 
Therefore, if we replace all the existential quantifiers with universal quantifiers in the above definition, the construction is still valid, and will give the same model as the current definition. 


The critical result we will need about ultraproducts of modal models is a modal version of the fundamental theorem of ultraproducts, which is also called \L o\'s's theorem. 

%chained imp
\begin{thm}[\holref{\texttt{Los_modal_thm}}{ultraproduct}{193}]\label{6.3}
The modal version of \L o\'s's theorem states that for $U$, an ultrafilter on $J$, and \HOLtm{MS} a family of models, a modal formula $\phi$ is satisfied at an equivalence class \HOLtm{fc} in the ultraproduct if and only if there exists a function \HOLtm{f IN fc} such that the set indexing the worlds and models where $\phi$ is true is an element of $U$. %\HOLtm{{j | j IN J /\ satis (MS j) (f j) phi\} IN U}.
\begin{holmath}
  \HOLthm[MS/Ms,j/i,width=65]{prettyPrinting.ppLos_modal_thm}
\end{holmath}
\end{thm}
\begin{proof}
  Given an ultrafilter $U$ on $J$ and a family \HOLtm{MS} of modal models, we proceed by induction on \HOLtm{phi}. The base case for \HOLtm{phi = VAR p} is directly by definition, and the case for \HOLtm{phi = FALSE} is by the fact that the empty set is not in the ultrafilter. The boolean cases are by basic property of ultrafilters. We only spell out the proof for diamond case. The induction hypothesis gives for every equivalence \HOLtm{fc} in the ultraproduct, we have 
\begin{holmath}
\HOLtm{(satis (ultraproduct_model U (J:α-> bool) MS) fc phi ⇔
             ∃f. f ∈ fc ∧ {j | j ∈ J ∧ satis (MS j) (f j) phi\} ∈ U)}
\end{holmath}
Given a world $fc$ in \HOLtm{(ultraproduct_model U J MS)}, we will prove 
\begin{holmath}
\HOLtm{satis (ultraproduct_model U (J:α -> bool) MS) fc (◇ phi) ⇔
        ∃f. f ∈ fc ∧ {j | j ∈ J ∧ satis (MS j) (f j) (◇ phi)\} ∈ U}
\end{holmath}
Left to right: Assume the left-hand side, then there is an equivalence class $gc$ that is related to \HOLtm{fc} and satisfied \HOLtm{phi}. Suppose the equivalence class $gc$ is represented by a function $g$, and $fc$ is represented by the function $f$. We check the $f$ required above can be taken as our $f$ as above. By definition of satisfaction, our task is to check the set 
\begin{holmath}
\HOLtm[alltt,width=95]{A={j |
         j ∈ J ∧ 
         ∃v.
             (MS i).frame.rel (f j) v ∧ v ∈ (MS j).frame.world ∧
             satis (MS j) v phi\}} 
\end{holmath}
is in $U$.
By the inductive hypothesis, the fact that \HOLtm{phi} is satisfied at $gc$ implies the existence of an element $x$ in \HOLtm{gc} such that \HOLtm{ {j | j IN J /\ satis (MS j) (x j) phi\}} is in $U$, but as \HOLtm{Uequiv U J (models2worlds MS)} is an equivalence relation, this implies \HOLtm{ {j | j IN J /\ satis (MS j) (g j) phi\}} is in $U$. As we can check: Since $x$ and $g$ lives in the same equivalence class, \HOLtm{{j | j IN J /\ g j = x j\}} is in $U$. As ultrafilters are closed under finite intersection, \HOLtm[alltt,width=90]{{j | j IN J /\ g j = x j\} ∩ {j | j IN J /\ satis (MS j) (x j) phi\}} is in $U$, this is a subset of  \HOLtm{ {j | j IN J /\ satis (MS j) (g j) phi\}}, hence by upward closure, the result follows. As $fc$ and $gc$ are related, there exists representatives $f' \in fc, g' \in gc$ such that \HOLtm{{j | j IN J /\ (MS j).frame.rel (f' j) (g' j)\}} is in $U$. By the same procedure of checking the independence of representatives, we can show that the set \HOLtm{{j | j IN J /\ (MS j).frame.rel (f j) (g j)\}} is in $U$. Hence the intersection \HOLtm{{j | j IN J /\ (MS j).frame.rel (f j) (g j)\} ∩ {j | j IN J /\ satis (MS j) (g j) phi\}} is in $U$. As our $A$ is a supset of this set, $A$ is in $U$ as well.

Right to left: Suppose there is an $f\in fc$ such that
\begin{holmath}
 \HOLtm[alltt,width=90]{{j |  j ∈ J ∧
         ∃v.
             (MS j).frame.rel (f j) v ∧ v ∈ (MS j).frame.world ∧
             satis (MS j) v phi\}}
\end{holmath}
 is in $U$, we need to find an equivalence class which is related to $fc$ and satisfies $\phi$, which by definition of relation in the ultraproduct model, amounts to find a representative of such an equivalence class. The representative is given by :
\begin{holmath}
\HOLtm[alltt,width=90]{\j. if (?v.
          (MS j).frame.rel (f j) v /\ v IN (MS j).frame.world /\
          satis (MS j) v phi) then CHOICE {v | (MS j).frame.rel (f j) v /\ v IN (Ms j).frame.world /\ satis (MS j) v phi\}
	  else CHOICE (MS j).frame.world}
\end{holmath}

\end{proof}

In the case that we are taking the ultraproduct of a constant family of models with \HOLtm{MS j = M} for all $j\in J$, we get an ultrapower of \HOLtm{M}. Specializing Theorem \ref{6.3} to the case of ultrapowers yields:
\begin{coro}[\holref{\texttt{prop_2_71}}{ultraproduct}{490}]
The map sends a world \HOLtm{w IN M.frame.world} to the equivalence class represents by constant function at $w$ embeds the model \HOLtm{M} to its ultrapower on $U$, with the corresponding points satisfy the same modal formulas. 
\begin{holmath}
\HOLthm[j/i,MS/Ms,width=60]{ultraproduct.prop_2_71}\label{6.4}
\end{holmath}
\end{coro}
The construction of ultraproduct of first-order models is similar to the construction for modal models, but a bit more complicated, since we will have predicates and functions to deal with. 

\begin{defn}[\holref{Ultraproduct of first-order models}{ultraproduct}{551}]

Given a family \HOLtm{MS} of first-order models indexed by $J$ and an ultrafilter $U$ on $J$, the ultraproduct model of \HOLtm{MS} modulo $U$ (notation : \HOLtm{ultraproduct_folmodel U (J:α -> bool) MS}) is given by:

\begin{itemize}
\item The domain is the ultraproduct of the domains of \HOLtm{MS} over $U$ on $I$.
\item A function with its symbol denoted by natural number $n$ will send a list of equivalence class $lc$ to the equivalence class of a function that sending $i\in I$ to the element \HOLtm{(MS i).Fun n l}, where the $k$-th member of the list $l$ can be an arbitrary element of the equivalence class that appears as the $k$-th element of $lc$. 

%We can therefore check our function denoted by $n$

%\HOLtm{(FMS i).Fun n (MAP (λfc. CHOICE fc i) fs)}. That is, to see where does $i\in I$ goes to, evaluate each representative in the list $fs$ at $i$, collect them into a list, and use this list as the input of the function denoted by $n$ in the model \HOLtm{FMS i}.

\item A predicate with its symbol denoted by $p$ will hold for a list $zs$ of equivalence classes if an only if $zr$ is a list such that the $k$-th member is a representative of the $k$-th member of $zs$, which is an equivalence class, the set of elements in $J$ such that \HOLtm{(MS j). Pred p zr} is in $U$. 


%iff when we pick representatives in each member of $zs$ and evaluate these representatives at $i$, the predicate $p$ holds in \HOLtm{FMS i} when we evaluate it with the list \HOLtm{(MAP (λfc. CHOICE fc i) zs)} of the outputs. 
\end{itemize}
\begin{holmath}
  \HOLthm[def,J/I,j/i]{ultraproduct.ultraproduct_folmodel_def}
\end{holmath}
Here we fix the representative for each equivalence class $fc$ to be \HOLtm{CHOICE fc}. The function \HOLtm{folmodels2Doms} plays the same role as the function \HOLtm{models2worlds} as before. 
\end{defn}

Recall the discussion in a previous section, the \HOLtm{wffm M} here is just a well-formedness assumption that saying the functions in \HOLtm{M} never send a list out of the domain of \HOLtm{M}. We will include such an assumption throughout our discussion of semantical behavior of first-order ultraproduct models. We firstly ask where are first-order terms evaluated to by \HOLtm{termval}. 

\begin{thm}[\holref{\texttt{thm_A_19_i}}{ultraproduct}{632}]\label{6.5}
For an ultraproduct model of the family \HOLtm{MS} of first-order models, a valuation $\sigma$ assigns each natural number an equivalence class in the ultraproduct of the world sets of the family, for each natural number \HOLtm{n}, pick \HOLtm{CHOICE (σ n)} as the representative of the equivalence class \HOLtm{σ n} assigned $n$ by $\sigma$, then \HOLtm{CHOICE (σ n)} will be an element in the Cartesian product \HOLtm{Cart_prod J (folmodels2Doms MS)}, which means that for each \HOLtm{j IN J}, we have \HOLtm{((CHOICE (σ n)) j) IN (MS j).Dom}. Hence for each $j\in J$, the function defined on natural numbers that sends $n$ to \HOLtm{((CHOICE (σ n)) j)} is a valuation of the model \HOLtm{MS j}. For a term $t$, it will be evaluated to the equivalence class represented by the function that sends an element $j\in J$ to the element in \HOLtm{MS j} which we get by applying term evaluation on \HOLtm{t} in the model \HOLtm{MS j} using \HOLtm{\n. (CHOICE (σ n)) j} as assignment of free variables, in other words, such a representative function sends $j\in J$ to \HOLtm{termval (MS j) (\n. (CHOICE (σ n)) j) t}.
\begin{holmath}
  \HOLthm[J/I,j/i]{prettyPrinting.ppthm_A_19_i}
\end{holmath}
\end{thm}
\begin{proof}
 By complete induction on \HOLtm{term_size t}.
\end{proof}

The next theorem describes the evaluation of first-order formulas on ultraproduct models. This theorem, called \L o\'s's theorem, is unarguably  the most basic and famous result about ultraproduct models. It characterize satisfaction of first-order formulas on ultraproduct models:


\begin{thm}[\L o\'s's theorem, \holref{\texttt{thm_A_19_ii}}{ultraproduct}{986}]
For the ultraproduct of a family \HOLtm{MS} of first-order models over an ultrafilter \HOLtm{U} on $J$, a formula \HOLtm{phi} is satisfied under a valuation \HOLtm{σ} if and only if the set indexing the models \HOLtm{MS j} in the family where \HOLtm{phi} is true under the valuation \HOLtm{(\n. (CHOICE (σ n)) j)} is in the ultrafilter $U$. 
\begin{holmath}
  \HOLthm[J/I,j/i,n/x]{prettyPrinting.ppthm_A_19_ii}
\end{holmath}
\end{thm}

\begin{proof}
 By induction on \HOLtm{phi}. The base case for \HOLtm{fFALSE} comes from the fact that the empty set is not in an ultrafilter. The atomic case is a direct translation of its mathematical proof, which uses Theorem \ref{6.5}. The implication case is trivial from the inductive hypothesis. We only spell out the proof for the case for universal quantifier.
 
From left to right, suppose \HOLtm{FALL n phi} is satisfied under a valuation \HOLtm{σ} in the ultraproduct model for \HOLtm{FMS}. We need \HOLtm[alltt,width=90]{{j | j ∈ J ∧ feval (FMS j) (λx. CHOICE (σ x) j) (FALL n phi)\} ∈
                 U}. Suppose not, then as $U$ is an ultrafilter, the set
\begin{holmath}
 \HOLtm[alltt,width=90]{B={j | j ∈ J ∧ feval (FMS j) (λx. CHOICE (σ x) j) (fEXISTS n (fNOT phi))\}}
\end{holmath}
which is the complement of $A$, is in $U$. Using choice, define the function $f$ to send $j\in J$ to a chosen point in \HOLtm{(FMS j).Dom} where \HOLtm{phi} is not satisfied. Such a function in HOL looks like:
\begin{holmath}
\HOLtm[alltt,width=70,j/i]{f = \i. if 
                  (∃a. a ∈ (FMS i).Dom ∧
                       ¬feval (FMS i) (λx. CHOICE (σ x) i)⦇n ↦ a⦈ phi) then 
                  (CHOICE {a | a ∈ (FMS i).Dom ∧ 
                               ¬feval (FMS i) (λx. CHOICE (σ x) i)⦇n ↦ a⦈ phi\})
                 else (CHOICE (FMS i).Dom)}
\end{holmath}
.
Then \HOLtm{{j | j IN J /\ 
            ¬feval (FMS j) (λx. CHOICE (σ x) j)⦇n ↦ f j⦈ phi\} = B }, and hence  is in U. By the inductive hypothesis, we can show the equivalence class represented by $f$ does not satisfy \HOLtm{phi}, which contradicts our assumption. 

From right to left. It is straightforward to check 
\begin{holmath}
\HOLtm[j/i]{{i | i ∈ J ∧ feval (FMS i) (λx. CHOICE (σ x) i) (FALL n phi)\}}
\end{holmath}
 is a subset of
\begin{holmath} 
\HOLtm[j/i]{{i | i ∈ J ∧ feval (FMS i) (λx. CHOICE (σ⦇n ↦ a⦈ x) i) phi\}}
\end{holmath}, for every equivalence class $a$. So the assumption that former one is in $U$ implies the later one is in $U$, and we are done by the inductive hypothesis. 

\end{proof}

\L o\'s's theorem gives a classical corollary:

\begin{coro}[\holref{\texttt{corollary_A_21}}{ultraproduct}{1556}]
Every first-order model \HOLtm{M} is embedded in its ultrapower on an arbitrary ultrafilter $U$ on $J$ by sending a world to the equivalence class represented by the constant function on that world.
\begin{holmath}
  \HOLthm[J/I,j/i,width=70]{prettyPrinting.ppcorollary_A_21}
\end{holmath}
\end{coro}

The above corollary is straightforward to prove once we get the following lemma:


\begin{lm}[\holref{\texttt{ultraproduct_rep_independence_lemma}}{ultraproduct}{1471}]
Given a family \HOLtm{MS} of first-order models indexed over $J$ and $U$ is an ultrafilter on $J$. Let \HOLtm{σ} be a valuation to the ultraproduct model of \HOLtm{MS} over \HOLtm{U}, then for a first-order formula \HOLtm{phi}, if \HOLtm{rv} is a function that assigns each free variable $v$ in \HOLtm{phi} a representative in the equivalence class \HOLtm{σ v}, then for each \HOLtm{j IN J}, \HOLtm{\v. rv v j} will be a valuation. The set of elements $j$s in \HOLtm{J} such that \HOLtm{phi} holds in \HOLtm{MS j} under the valuation \HOLtm{(\v. CHOICE (σ v) j)} is in $U$ if and only if the set of elements $j$s in \HOLtm{J} such that \HOLtm{phi} holds in \HOLtm{MS j} under the valuation \HOLtm{(\v. rv v j)} is in $U$
\begin{holmath}
  \HOLthm[v/x,J/I,j/i,width=65]{prettyPrinting.ppultraproduct_rep_independence_lemma}
\end{holmath}
If the index set $J$ is an $\alpha$-set and the world of models in \HOLtm{FMS} are of type $\beta$, then \HOLtm{rv} here is of type $num\to\alpha\to \beta$. 

\end{lm} 

We will not show the proof of the above lemma since it actually amounts to check representative independence, which is of the same flavor of the second base case in the proof of \L o\'s's theorem.


The above `independence of representative' lemma is very helpful.  The lemma above enable us to be free of choice of representatives of equivalence classes in the ultraproduct when applying \L o\'s's theorem. 

\begin{prop}[\holref{\texttt{ultraproduct_suffices_rep}}{ultraproduct}{1643}]\label{6.9}
If we want to find a valuation of a ultraproduct model satisfying a first-order formula $\phi$, instead of assigning equivalence classes natural numbers directly, it suffices to assign representatives. 
\begin{holmath}
  \HOLthm[J/I,j/i,width=70]{prettyPrinting.ppultraproduct_suffices_rep}
\end{holmath}
\end{prop}


All the construction we did above serves to pave a way of getting a countably saturated model. For a family of non-empty models, their ultraproduct on a \emph{countably incomplete} ultrafilter is countably saturated. An ultrafilter $U$ on $J$ is countably incomplete if $U$ contains a countable infinite set of subsets of $J$ such that the intersection of these sets is empty. In HOL4:
\begin{defn}[\texttt{countably_incomplete_def}]
\begin{holmath}
  \HOLthm[SS/IFS]{ultrafilter.countably_incomplete_def}
\end{holmath}
\end{defn}

Countably incomplete does exists. To see this, first observe that the set $A$ of subsets of $\mathbb N$ of form ${\mathbb N}\setminus X$, where $X$ is a finite subset of $\mathbb N$, has finite intersection property, as we can prove by induction. Therefore, by \ref{5.12}, there exists an ultrafilter $U$ that contains $A$. The ultrafilter $U$ will not contain any finite set, otherwise, it will contain both a subset of $\mathbb N$ and its complement, contradicts the fact that $U$ is an ultrafilter. 


\begin{lm}[\holref{\texttt{lemma_2_73}}{lemma2_73}{1085}]\label{6.10}
For a family of non-empty models, their ultraproduct on a countably incomplete ultrafilter is countably saturated. 
\begin{holmath}
  \HOLthm[J/I,j/i]{prettyPrinting.pplemma_2_73}
\end{holmath}
\end{lm}

With all the setups about ultraproduct models, we may expect that this will be a consequence of \L o\'s's theorem. But if we take a closer look of the statement, we will find out \L o\'s's theorem cannot be directly applied here. The definition of countably saturated asks us to prove the realisation of a set of first-order formulas in an expanded first-order model, where the first-order model we expand is itself obtained from turning a modal model into a first-order model. The obstacles here will become clear when we compare what we want to prove to the statement of \L o\'s's theorem: \L o\'s's theorem tells us the result for an ultraproduct of first-order models, and says nothing about expansion. But we are proving a statement for an expanded model obtained from viewing an ultraproduct of modal models as a first-order model. However, as we shall see now, it cannot stop us from applying \L o\'s's theorem.%quote the goal?

The first issue is to remove the expansion on the outmost layer. The key observation is that we have an alternative approach to capture the idea of `constants'. Constants are nothing more than forcing some symbols to be sent to some point in a model under every valuation, hence rather than use nullary function symbols, we fixed a set of variable letters, each corresponds to a function symbol, and only consider the valuations that sends these variable letters to fixed certain points. With this idea, we can remove all the constants in a formula, and hence change our scope from an expanded model back to the unexpanded model. Recall when we defined expansion, we only consider adding finitely many constants. Hence in the following discussion, we will only interested in removing finitely many constants as well. To get rid of $n$-function symbols, we need to come up with $n$ fresh variable symbols which have not already appeared in the formula we are looking at to be sent to certain places. The easiest way to ensure that the variable symbols do not clash is to force those $n$-variable symbols to be represented by $0,\cdots, n-1$, and then add $n$ to all the variable symbols which is originally used in a formula. The construction of discarding constants in a formula can be done by two functions working on first-order terms and first-order formulas respectively. 
\begin{defn}[Shifting on \holref{terms}{lemma2_73}{349} and \holref{formulas}{lemma2_73}{356}]
\begin{holmath}
  \HOLthm[def,width=65]{lemma2_73.shift_term_def}\\[3mm]
\begin{array}{rcl}
  \HOLthm[aligneddef,phi/f]{lemma2_73.shift_form_def}
\end{array}
\end{holmath}
\end{defn}

We can talk about the shifting construction only when we are considering an expansion of a model. If we expand a model by throwing in constants corresponds to elements in a set $A$, then the $n$ will be taken as \HOLtm{CARD A}. As an example, if \HOLtm{M'} obtained by expanding \HOLtm{M} by adding one constant corresponds to the point \HOLtm{a IN M.Dom}, then after the expansion, the formulas involves the term \HOLtm{Fn 0 []} makes sense to \HOLtm{M'}. If we do not want to work with expansion, given a formula where the only function symbol that may occur is \HOLtm{(0,0)}, then we can firstly add $1$ to every variable symbol that appears in the formula, and then replace every occurrence of \HOLtm{Fn 0 []} by \HOLtm{fV 0}. The formula \HOLtm{fR (Fn 0 []) (fV 0)} will become \HOLtm{fR (fV 0) (fV 1)}, and the formula \HOLtm{fDISJ (Pred p [fV 1]) (Pred q [fV 2])} will become \HOLtm{fDISJ (Pred p [fV 2]) (Pred q [fV 3])}. 

After applying the shifting construction to a formula that only nullary function symbols which correspond to elements in $A$, there is no function symbol remaining in the resultant formula. Also, if we start with a formula with only free variables in $s$, then a free variable in the resultant formula is either of form \HOLtm{x + (CARD A)} for some $x\in s$, or an element in $\{0,\cdots , ({\sf CARD} \ A - 1)\}$ that is used to capture a constant.

Now if we still want to use an arbitrary valuation to evaluate a shifted formula, something may go wrong. Since $0,\cdots,n-1$ in the shifted formula are now designed to be sent to fixed place $f \ 0,\cdots,f \ (n-1)$, it does not make sense to assign these variable symbols anywhere else. Hence to talk about satisfaction of shifted formula, the first thing is to make sure that the valuation we are considering sends the variables which actually denotes constants to the right place. The job of ensuring a valuation we use to make sense to shifted formulas can be done by shifting the valuation accordingly:
\begin{defn}[\holref{Shifting on valuations}{lemma2_73}{363}]
\begin{holmath}
  \HOLthm[def]{lemma2_73.shift_valuation_def}
\end{holmath}
\end{defn}

Continue with the previous example. Formerly, we can use the valuation \HOLtm{\n.b} where \HOLtm{b IN M.Dom} and \HOLtm{b <> a} to evaluate the formula \HOLtm{fR (Fn 0 []) (fV 1)}. But after the shifting, it does not make sense to use the same valuation to evaluate \HOLtm{fR (fV 0) (fV 1)}. To turn this valuation into a valuation that makes sense to the shifted formula, we need to let $0$ to be sent to the correct place $a$, and let the variable symbol which is formerly sent to $b$ to be also sent to $b$. Formerly, the variable symbol $0$ is sent to $b$, but now the variable which plays the same role as the $0$ after the shifting is the variable symbol $1$, hence we need the $1$ in the shifted formula to be sent to $b$, as we can check, according to our definition, \HOLtm{shift_valuation 1 (\n.b) (\n.a) = \n. if n = 0 then a else b} does the correct thing. 

The shifting construction gives the desired semantic behavior on first-order formulas:


\begin{prop}[\holref{\texttt{expansion_shift_feval}}{lemma2_73}{382}]\label{6.11}
If \HOLtm{M'} is a model we get by adding a bunch of constants corresponds to elements in a set $A$ to a model \HOLtm{M}, then for a first-order formula \HOLtm{phi} such that the constants appear in \HOLtm{phi} can only be the ones that corresponds to element in $A$, \HOLtm{phi} is satisfied in \HOLtm{M} under valuation \HOLtm{σ} if and only if when we `shift away' all the constants in \HOLtm{phi} and shift the valuation \HOLtm{σ} accordingly, then the resultant formula will be satisfied on \HOLtm{M} under the shifted valuation.
\begin{holmath}
  \HOLthm{prettyPrinting.ppexpansion_shift_feval}
\end{holmath}
\end{prop}

The shifting construction gets us out of the expansion, leaving us a model obtained by converting a ultraproduct modal model to a first model. To apply \L o\'s's theorem on such a model, we prove the ultraproduct construction on modal and first-order models are equivalent on `good first-order formulas' in the following sense: 


\begin{prop}[\holref{\texttt{ultraproduct_comm_feval}}{lemma2_73}{188}]\label{6.12}
Take the ultraproduct of a family of modal models, if we view the resultant modal ultraproduct model as a first-order model, this first-order model will satisfy the same first-order formulas without function symbols as the model we obtained by firstly view each modal model in the family as a first model, then take their ultraproduct as first-order models.
\begin{holmath}
  \HOLthm{prettyPrinting.ppultraproduct_comm_feval}
\end{holmath}
\end{prop}
\begin{proof}
By induction on \HOLtm{phi}. 
\end{proof}

Actually, the above is just one of our series of results expressing the compatibility of ultraproduct constructions on modal and first-order models. We are not showing the whole list of the results we have proved. Basically, this series of results says that the order of taking ultraproduct and converting between modal and first-order models does not matter if we only consider the satisfaction of $\mathcal L_{\tau}^1$-formulas. In this thesis, such results will be used nowhere else except for the last step of the proof of Van Benthem Characterization theorem. 


 %Similarly, we can also prove that for a family of first-order models, if we take their first-order ultraproducts of them, the resultant model satisfies the same $\mathcal L_{\tau}^1$-formulas as the model we get by firstly regard this family as a family of modal models, take their ultraproduct as modal models, and then view the resultant ultraproduct modal model as a first-order model. This result is not used here for our saturation proof, but using the idea that the satisfaction of a first-order formula on only depends on the functions and predicates that appear in the formula, here is a result that is stated not from the aspect of formulas, but from the aspect of models, which is proved to be useful later. 
 

%\begin{prop}[\holref{\texttt{ultraproduct_comm_feval'}}{chap2_6}{554}]\label{6.13}
%For abbreviation, call a first model `nice' if the model only has unary predicates and only one binary predicate denoted by the symbol `0', no higher arity predicate and no function symbol. If we take the ultraproduct of a family of nice models, then a first-order formula is satisfied on the ultraproduct model if and only if the formula is satisfied on the model obtained by firstly converting the modal ultraproduct model of the family obtained by converting each model of of the family of nice model we start with into a modal model. 
%\begin{holmath}
 % \HOL thm[J/I,j/i]{prettyPrinting.ppultraproduct_comm_feval'}
%\end{holmath}
%\end{prop}




According to the discussion above, Proposition \ref{6.12} and Proposition \ref{6.11} reduce our task to the following: 


\begin{lm}[Saturation of ultraproduct model, \holref{\texttt{ultraproduct_sat}}{lemma2_73}{876}]
Take the ultraproduct of a family of well-formed models \HOLtm{MS} on a countably incomplete ultrafilter $U$ on $J$. 
Consider a set $s$ of $\mathcal L_{\tau}^1$-formulas whose free variables are a subset of $\{x\}\cup C$. 
Let $f$ be a function from $C$ into the domain of \HOLtm{ultraproduct_folmodel U J MS}. 
This $f$ serves to give meaning to the free variables in $C$, treating them as constants. 
Then if for every finite subset $ss$ of $s$, there exists a valuation \HOLtm{σ} that agrees with $f$ on the elements of $C$ (i.e., it sends the `constants' to the correct places), and all the formulas in \HOLtm{ss} are satisfied in \HOLtm{ultraproduct_folmodel U J MS} under \HOLtm{σ}, then there exists a valuation \HOLtm{σ} sending the constants to the correct places that makes every formula in \HOLtm{s} satisfied on \HOLtm{ultraproduct_folmodel U J MS}.
\begin{holmath}
  \HOLthm[J/I,j/i,C/N,width=60]{prettyPrinting.ppultraproduct_sat}
\end{holmath}
\end{lm}


The above is a classical theorem on ultraproduct models. To prove it, we need another lemma about countably incomplete ultrafilters:


\begin{prop}[\holref{\texttt{countably_incomplete_chain}}{ultrafilter}{653}]\label{5.15}
In a countably incomplete ultrafilter $U$ on $J$, we can find a chain $J=J_0\supseteq J_1\supseteq J_2\supseteq\cdots$ with each $J_i$ is in $U$, such that $\bigcap_{n\in \mathbb N}J_n=\emptyset$. As before, throughout the following proof, we will capture indexing of family of sets as a function from the index set. 
\begin{holmath}
  \HOLthm[J/I,Jn/In]{ultrafilter.countably_incomplete_chain}
\end{holmath}
\end{prop}
\begin{proof}
By definition of countably incompleteness, there exists a family $X_n$ in $U$ indexed by natural numbers such that $\bigcap_{n\in \mathbb N}X_n=\emptyset$. Define $K_n:=\bigcap_{m\le n}X_n$. In HOL4, the family $K_n$ is defined recursively as the function 
\begin{holmath}
\HOLtm{ PRIM_REC (X 0) (\Xn n. Xn ∩ (X (n + 1)))}
\end{holmath}. 
We get the desired chain $J_n$ by inserting $J$ at the beginning of $K_n$.
\end{proof}

Now we can prove the saturation of ultraproducts:

\begin{proof}

Given the assumptions, which read as: 
Suppose $s$ is a set of formulas in $\mathcal L_{\tau}^1$, such that for each element $\phi$ in $s$, we only allow one free variable $x$ to occur in $\phi$ other than the ones in $C$ which are actually used to capture constants. In addition, for all finite $ss\subseteq s$, exists a valuation \HOLtm{σ} such that \HOLtm{σ n = f n} for all $n\in C$, and \HOLtm{feval (ultraproduct_folmodel U J FMS) σ phi} for each \HOLtm{phi IN ss}. If $s$ is finite, there is nothing to prove, so we assume $s$ is infinite. As we are using a countable first-order language, every infinite set of first-order formula is countable, and hence there exists a bijection \HOLtm{enum} from the set of all natural numbers to the set $s$. Thus it suffices to prove the existence of a valuation \HOLtm{σ} such that \HOLtm{σ} agree with $f$ on $C$ and moreover, \HOLtm{feval (ultraproduct_folmodel U J FMS) σ (enum n)} for all natural number $n$. The \HOLtm{σ} we want is an assignment of variables to equivalence class. But by Proposition \ref{6.9} and \L o\'s's theorem, instead of finding out this assignment to equivalence classes, it suffices to find out a function \HOLtm{rv} that assigning each natural number a representative of some equivalence class satisfying the following conditions. 

\begin{itemize}
  \item \HOLtm{∀v j. j ∈ J ⇒ rv v j ∈ (FMS j).Dom }
  \item \HOLtm{(∀n. n ∈ C ⇒ {g | Uequiv U (J:α -> bool) (folmodels2Doms FMS) g (rv n)\} = f n)}
  \item \HOLtm{∀k:num. 
             {j | j ∈ J ∧ feval (FMS j) (λv. rv v j) (conj k)\} ∈ U}
\end{itemize}

The first item says what $rv$ assign each natural number must be an element in the Cartesian product. And the second item says that the equivalence class assigned free variables in $C$ has already been fixed by $f$. Both of these two are easy to be satisfied. We devote find and $rv$ satisfying the third condition. 

By Proposition \ref{5.15}, we have a chain \HOLtm{In} where \HOLtm{In n ∈ U} and \HOLtm{In (n + 1) ⊆ In n} for each \HOLtm{n}, which start with \HOLtm{In 0 = J}. Moreover, the intersection of this chain is empty. Let 
\begin{holmath}
\HOLtm{conj = PRIM_REC (True) (\conjn n. fAND conjn (enum n))}
\end{holmath}
, hence \HOLtm{conj 0 = True}, and \HOLtm{conj n} is the conjunction of first-order formulas in $s$ from \HOLtm{enum 0} to \HOLtm{enum (n - 1)}. Define 
\begin{holmath}
\HOLtm[alltt,width=75]{Jn = \n. {j | j IN J /\ 
                 (!σ.
                    (!k. k IN N ==> σ k = CHOICE (f k) j) ==>
                      feval (FMS j) σ (Exists x (conj n)) 
                 )\}}
\end{holmath}

, then what the \HOLtm{Jn} actually give is that \HOLtm{Jn 0 = J}, and for $n>0$, \HOLtm{Jn n} is the subset of \HOLtm{J} indexing the set of models \HOLtm{MS j} with a point in its domain such that the conjunction from \HOLtm{enum 0} to \HOLtm{enum (n - 1)} are satisfied. Therefore, \HOLtm{Jn} is a descending chain. Since every finite subset of $ss$ is satisfied in \HOLtm{(ultraproduct_folmodel U J FMS)} by assumption, \L o\'s's theorem implies that \HOLtm{(Jn n) IN U} for every $n$. Define \HOLtm{Xn = \n. (In n) ∩ (Jn n)}, then \HOLtm{Xn} is a descending chain in $U$ starting with \HOLtm{J} and the intersection of all \HOLtm{Xn n} is the empty set. For such a chain, each element \HOLtm{j IN J} can only belong to finitely many of \HOLtm{Xn}s. Hence there exists a function \HOLtm{Nj} that send an element \HOLtm{j} to smallest set in the chain \HOLtm{Xn} that \HOLtm{j} belongs to. That is, for all \HOLtm{j ∈ J}, we have \HOLtm{j ∈ Xn (Nj j)} and \HOLtm{j ∉ Xn a} for every \HOLtm{a > Nj j}.

The \HOLtm{rv} we are looking for can be taken as:
\begin{holmath}
\HOLtm[alltt,width=75]{(\v j. if (v IN C) 
        then (CHOICE (f v) j)
       else 
       (CHOICE 
               {a | a IN (FMS j).Dom /\
                    feval (FMS j) 
                          (\n. if n IN C then ((CHOICE (f n)) j) 
                               else a)
                    (conj (Nj j))\}))}
\end{holmath}
The first two conditions are immediate to check. It remains to show \HOLtm{{j | j ∈ In 0 ∧ feval (FMS j) (λv. rv v j) (conj k)\} ∈ U} for each $k$. As \HOLtm{Xn k} is in $U$ for each $k$, it suffices to check that for each $k$, we have \HOLtm{Xn k ⊆ {j | j ∈ In 0 ∧ feval (FMS j) (λv. rv v j) (conj k)\} }. For every \HOLtm{j IN (Xn k)}, by definition of the function \HOLtm{Ni}, we have \HOLtm{k <= Nj j}. As \HOLtm{j IN (Xn (Nj j))}, in particular, \HOLtm{j IN (Jn (Ni j))}. From here, we can deduce \HOLtm{feval (FMS j) (λv. rv v j) (conj (Nj j))} using the definition of \HOLtm{rv}. As \HOLtm{conj m} implies \HOLtm{conj n} for \HOLtm{n <= m}, we are done.

\end{proof}

This is the end of the interlude. 

With the help of Lemma \ref{6.10}, we yield another theorem about `modal equivalence between two worlds implies bisimilarity of the two worlds when embedded in some other models'. 


\begin{thm}[\holref{\texttt{thm_2_74_half2}}{chap2_6}{439}]\label{6.15}
If two worlds \HOLtm{w IN M.frame.world} and \HOLtm{v IN N.frame.world} are modal equivalent, then we can find an ultrafilter $U$ on $J$ such that in ultrapower models of \HOLtm{M} and \HOLtm{N} on $U$ respectively, there is a bisimulation between the worlds corresponds to \HOLtm{w} and \HOLtm{v}. 
\begin{holmath}
  \HOLthm[J/I,j/i]{prettyPrinting.ppthm_2_74_half2}
\end{holmath}
\end{thm}
\begin{proof}
The \HOLtm{U} we require here can be an arbitrary countably incomplete ultrafilter. Then by Lemma \ref{6.10}, the models \HOLtm{(mm2folm (ultraproduct_model U J (\i.M)))}, \HOLtm{(mm2folm (ultraproduct_model U J (\i.N)))} are countably incomplete. Hence we are done by Proposition \ref{6.1} and Corollary \ref{6.4}.
\end{proof}

%The last step towards the main theorem is used to pass from infinite set to finite set.

The last ingredient we need for the main theorem we are proving is the compactness theorem of first-order logic. The standard statement of compactness theorem says that for a set \HOLtm{Σ} of modal formulas, if for each finite subset \HOLtm{Σ0 ⊆ Σ}, there exists a model such that all the formulas in \HOLtm{Σ0} are satisfied, then there exists a model such that all the formulas in \HOLtm{Σ} are satisfied. This standard version of compactness theorem is formalized in 1998 in HOL4 by John Harrison. The way that Harrison states the compactness theorem looks very different from the style that we are working with. With the help of a corollary proved from Harrison's work by my supervisor, we have connected Harrison's work to our project by proving a version of compactness theorem for $\mathcal L_{\tau}^1$-formulas, which is no more than a specialization to the standard version of compactness theorem to $\mathcal L_{\tau}^1$-formulas. We will use this version of compactness theorem for our work. The statement looks like:

\begin{thm}[\holref{\texttt{compactness_thm_L1tau}}{chap2_6}{1432}]\label{6.16}
If $\alpha$-is an infinite type, then for each set $A$ of $\mathcal L_{\tau}^1$-formulas, if for every finite subset $ss$ of $A$, there exists an $\alpha$-model \HOLtm{M} and a valuation \HOLtm{σ} such that every formula in $ss$ is satisfied in \HOLtm{M} under \HOLtm{σ}, then there exists a $\alpha$-model \HOLtm{M} and a valuation on \HOLtm{M} such that all the formulas in $A$ are satisfied. 
\begin{holmath}
  \HOLthm[phi/f,phi/ff,width=70]{prettyPrinting.ppcompactness_thm_L1tau}
\end{holmath}
\end{thm}

The assumption on infiniteness of the type universe comes from similar reason as why we only have the equivalence of diamond formulas implies the equivalence of the formulas when taking off the diamonds. Because of this assumption, every statement which requires compactness theorem will be  required to include the assumption on the infiniteness of type universe. 

As a consequence of the compactness theorem, we have:

\begin{coro}[\holref{\texttt{compactness_corollary_L1tau}}{chap2_6}{1482}]\label{6.17}
Under the assumption that the type universe of $\alpha$ is infinite and \HOLtm{Σ} is a set of $\mathcal L_{\tau}^1$ formula such that for every $\alpha$-model \HOLtm{M} and valuation \HOLtm{σ}, if \HOLtm{feval M σ phi} for every \HOLtm{phi IN Σ}, then \HOLtm{feval M σ a}, then there exists a finite subset \HOLtm{Σ0} of \HOLtm{Σ} such that once every formula in \HOLtm{Σ0} is satisfied in an $\alpha$-model \HOLtm{M} under a valuation \HOLtm{σ}, then \HOLtm{feval M σ a}. 
\begin{holmath}
  \HOLthm[phi/f]{prettyPrinting.ppcompactness_corollary_L1tau}
\end{holmath}
\end{coro}

\begin{proof}
Under the assumptions, suppose, in order to get a contradiction, that for every finite subset $ss$ of $A$, there exists an $\alpha$-model \HOLtm{M} and a valuation \HOLtm{σ} where all the formulas in $ss$ are satisfied by $a$ is not satisfied, then every finite of \HOLtm{ss ∪ {fNOT a\}} is satisfied on some model \HOLtm{M} under some valuation \HOLtm{σ}. As $a$ is an $\mathcal L_{\tau}^1$-formula, so does $\lnot a$. By Theorem \ref{6.16}, this implies the whole set \HOLtm{ss ∪ {fNOT a\}} is satisfied on some $\alpha$-model under some valuation, contradicts our assumption. 
\end{proof}


Now we have all the ingredient for translating the hard direction of the standard proof of \emph{Van Benthem Characterization Theorem} into HOL4. 

\begin{thm}[Van Benthem Characterization Theorem, hard direction, \holref{\texttt{thm_2_68_half1}}{chap2_6}{1512}]\label{6.18}
For an infinite type $\alpha$, if $a$ is a first-order formula which is invariant for bisimulation on first-order models whose domains are $(num\to\alpha\to bool)$-sets, then there exists a modal formula which is equivalent to $a$ on first-order models whose domains are $\alpha$ sets. 
\begin{holmath}
  \HOLthm[showtypes]{prettyPrinting.ppthm_2_68_half1}
\end{holmath}
\end{thm}

\begin{proof}
 Suppose $a$ is a first-order formula invariant for bisimulation with only one free variable $x$. Consider the modal consequence of $a$, which is the set of standard translations implied by $a$ on all first-order models with $\alpha$-sets as their domains, defined in the HOL as \begin{holmath}
\HOLtm[alltt,width=110]{MOC = {ST x phi | phi | 
           (!M v:num -> α. 
               valuation M v ==> 
                feval M v a ==> feval M v (ST x phi))\}}
\end{holmath}
Our first claim is that it suffices to prove \HOLtm{a} is implies by \HOLtm{MOC}. To see why it suffices, assume it is true, then by Corollary \ref{6.17}, there exists a finite subset of \HOLtm{Σ0} of \HOLtm{MOC} such that once all the formulas in \HOLtm{Σ0} are satisfied, then the $a$ is satisfied. Also by definition of \HOLtm{MOC}, once $a$ is satisfied, every formula in \HOLtm{Σ0} is satisfied. Hence $a$ will be equivalent to the big conjunction of formulas in \HOLtm{Σ0}, which is a standard translation. 

Fix a model \HOLtm{M} and suppose \HOLtm{feval M σ varphi} for every \HOLtm{varphi IN MOC}, we prove \HOLtm{feval M σ a}. Consider of the set \HOLtm{Tx} of formulas of the form \HOLtm{ST x phi} such that \HOLtm{feval M σ (ST x phi)}. Pick a model \HOLtm{N} and a valuation \HOLtm{σn} satisfying each formula in \HOLtm{(Tx ∪ {a\})}. Such a model does exist:
Suppose, in order to get a contradiction, that such a model does not exist, then for every model, once all the formulas in \HOLtm{Tx} are satisfied, the formula \HOLtm{a} will not be satisfied. Then by compactness, there exists a finite subset of \HOLtm{Tx} implies $\lnot a$. Taking its contrapositive, then \HOLtm{a} implies the negation of the big conjunction \HOLtm{psi} of finitely many elements in \HOLtm{Tx}. As a negated big conjunction of standard translations is again a standard translation, we have  \HOLtm{(fNOT psi) IN MOC}. Recall we have assumed \HOLtm{feval M σ varphi} for every \HOLtm{varphi IN MOC}, so \HOLtm{feval M σ (fNOT psi)}, but also \HOLtm{feval M σ psi} by definition of \HOLtm{Tx}. This is a contradiction. 

 Now let \HOLtm{w} denote \HOLtm{σ x} and \HOLtm{v} denote \HOLtm{σn x}, we claim that if we regard both \HOLtm{M} and \HOLtm{N} as modal models, then \HOLtm{w} and \HOLtm{v} are modal equivalent. To prove this, suppose \HOLtm{satis (folm2mm M) w phi} for a modal formula \HOLtm{phi}, then \HOLtm{(ST x phi) IN Tx} by Proposition \ref{5.4}, Proposition \ref{5.3} and the definition of \HOLtm{Tx}, hence \HOLtm{feval N σn (ST x phi)}. By these two propositions again, we can prove \HOLtm{satis (folm2mm N) v phi}. This proves \HOLtm{!phi. satis (folm2mm M) w phi ==> satis (folm2mm N) v phi}. Similarly, if \HOLtm{ ¬satis (folm2mm M) w (phi)}, then \HOLtm{satis (folm2mm M) w (NOT phi)} and we can deduce \HOLtm{ ¬satis (folm2mm N) v (phi)} by a symmetric argument. 

If modal equivalence implies bisimularity, then we are done: Suppose modal equivalence implies bisimularity, then as \HOLtm{w IN (folm2mm M).frame.world} and \HOLtm{v IN (folm2mm N).frame.world} are modal equivalent, there exists a bisimulation between them. As \HOLtm{a} is invariant for bisimulation and is satisfied at \HOLtm{v}, then it is also satisfied at \HOLtm{w}. 

Although it is not always the case that modal equivalence implies bisimularity, we can take a detour with the help of Theorem \ref{6.15}. By \ref{6.15}, we obtain an ultrafilter $U$ on a set $J$ such that for the ultraproduct models \HOLtm{Mst = (ultraproduct_model U J (λj. folm2mm M))}
and
\HOLtm{Nst = (ultraproduct_model U J (λj. folm2mm N))}, the worlds \HOLtm{wst = {fw | Uequiv U J (models2worlds (λj. folm2mm M)) (λj. w) fw\}},
\HOLtm{vst = {fv | Uequiv U J (models2worlds (λj. folm2mm N)) (λj. v) fv\}} are bisimilar. As $a$ is invariant for bisimulation, $a$ holds at \HOLtm{wst} in \HOLtm{(mm2folm Mst)} iff it holds at \HOLtm{vst} in \HOLtm{(mm2folm Nst)}. We are going to carry the $a$ from the model \HOLtm{N} where $a$ is satisfied at $v$, to the point \HOLtm{vst} in \HOLtm{(mm2folm Nst)}, then to the point \HOLtm{wst} in \HOLtm{(mm2folm Mst)}, and finally to \HOLtm{w} in \HOLtm{M}. 

To carry $a$ around, it suffices to prove \HOLtm{feval M σ a ⇔ feval (mm2folm Mst) (λx. wst) a} and \HOLtm{feval N σn a ⇔ feval (mm2folm Nst) (λx. vst) a} under our assumptions by hand. These two equivalence are of the same pattern, hence we prove it as a lemma:

\begin{holmath}
  \HOLthm[J/I,j/i,:'a/:'b]{chap2_6.L1tau_ultraproduct_mm2folm_folm2mm_comm_feval}
\end{holmath}

The lemma is proved by carrying $a$ around using Proposition \ref{6.12}, Proposition \ref{5.3} and the commutativity of taking ultraproduct and converting between modal and first-order model. Hence we are done. 

\end{proof}

Now we have formalized both directions of the Van Benthem Characterization theorem. A reader may expect we can put them together to get a double implication. However, as already mentioned in last chapter, we cannot get an `if an only if' result. To see the reason, note that the statement we have just proved says that if \HOLtm{phi} is invariant under bisimulation for models with type $(num\to \alpha)\to bool$, then we can conclude $\phi$ is equivalent to a standard translation on model of type $\alpha$. However, if we want to prove the converse of the above statement, we need to start with the assumption that $\phi$ is equivalent to a standard translation on models of type $\alpha$, and prove that $\phi$ is invariant for bisimulation for models of type $(num \to \alpha) \to bool$. But according to 
Proposition \ref{5.6}, we can only conclude $\phi$ is invariant for bisimulation for models of type $\alpha$. If the type universe of $(num \to \alpha) \to bool$ is small enough to be embedded into $\alpha$, then we will also done, but the cardinality of $(num \to \alpha) \to bool$ is larger than that of $\alpha$, and hence we cannot derive $\phi$ is invariant for bisimulation for models of type $(num \to \alpha) \to bool$ from the fact that  $\phi$ is invariant for bisimulation for models of type $\alpha$. 

We get into this situation because the statements we have proved for both directions are not a precise translation from their set-theoretic statement. Consider the easy direction, its set-theoretic statement is that if $\phi$ is equivalent to a standard translation on models of every type, then it will be invariant for bisimulation on models of every type, whereas in our statement `if $\phi$ is equivalent to a standard translation on models of type $\alpha$, then it is invariant for models of type $\alpha$', both the assumption and the conclusion are weakened. We cannot encode the original statement into HOL4, since we cannot quantify over types and refer to all the types to state `invariant for bisimulation for models of all types' and `equivalent to a standard translation on models of all types', just as the problem we encountered when defining equivalence of modal formulas. If we can quantify over types, that is, suppose we can state the goal `$\phi$ is invariant for bisimulation on models of every type if and only if $\phi$ is equivalent to a standard translation on models of every type', then we can prove it using the same proof we have written out. For the easy direction, the assumption is that $\phi$ is equivalent to a standard translation on models of every type, and we want to conclude that $\phi$ is invariant for bisimulation for models of type $\alpha$. But under assumption,  $\phi$ is equivalent to a standard translation on models of type $\alpha$ where $\alpha$ is an arbitrary type, so we prove the result by Proposition \ref{5.6}. Conversely, for the other direction, the assumption is that `$\phi$ is invariant for bisimulation on models of every type', and the goal is to prove $\phi$ is invariant on models of type $\alpha$ where $\alpha$ is an arbitrary type. By assumption, $\phi$ is invariant for bisimulation on models of type $(num\to \alpha)\to bool$, and the result follows from Theorem \ref{6.18}. 

The fact that the two directions of implication does not yield an `if and only if' statement is an evidence to the restriction of  simple type theory.


\section[\texorpdfstring{Positive existential formulas and Preservation under simulations
    }{Positive existential formulas and Preservation under simulations}
]{\chaptermark{`Positive' formulas and simulation} Positive existential formulas and Preservation under simulations}
\chaptermark{`Positive' formulas and simulation}
\label{CH:Chap}
%\section[`Positive' formulas and simulation]{Positive existential formulas and Preservation under simulations}

There exists a concept of `half of a bisimulation', which is called \emph{simulation}. In this section, we are interested in the $\mathcal L_{\tau}^1$-formulas which are \emph{preserved under simulation}. We have set-theoretic proof that these formulas can also be characterized using their syntax. The section aims to translate this proof into simple type theory. For precisely the same reason as in the last section, after we translate the proof of implications in both direction, they cannot be unified into a double implication. Nevertheless, we will spell out our formalization of proofs for those two directions separately. 

 % We present this characterization in this section. 

As we expect, the clauses defining  simulation is `half of' the clauses defining bisimulation:



\begin{defn}[\holref{Simulation}{chap2_7}{32}]
A simulation $Z$ between two worlds \HOLtm{w1 IN M1.frame.world} and \HOLtm{w2 IN M2.frame.world} (notation: \HOLtm{sim M1 Z M2})is a relation between worlds in \HOLtm{M1} and \HOLtm{M2} relating $w_1$ and $w_2$, such that:
\begin{itemize}
\item Each propositional letter which is satisfied at $w_1$ is also satisfied at $w_2$.
\item If there is a world $v_1$ in \HOLtm{M1} such that \HOLtm{M1.frame.rel w1 v1}, then there exists a world \HOLtm{v2} in \HOLtm{M2} such that \HOLtm{M2.frame.rel w2 v2}, and moreover, $v_1$ and $v_2$ are related by $Z$. 
\end{itemize}
\begin{holmath}
  \HOLthm[def,w1/w,w2/w',M1/M,M2/M']{chap2_7.sim_def}
\end{holmath}
\end{defn}

 The concept which corresponds to `invariant for bisimulation' is `preserved under simulation'. In contrast to that of `invariant for bisimulation', `preserved under simulation' is a concept about modal formula. 

\begin{defn}[\holref{Preserved under simulation}{chap2_7}{38}]
A modal formula \HOLtm{phi} is preserved under simulation if once we have \HOLtm{w1 IN M1.frame.world} and \HOLtm{w2 IN M2.frame.world} with a simulation relating $w_1$ to $w_2$, then if \HOLtm{phi} is satisfied at $w_1$,  it is also satisfied at $w_2$.
\begin{holmath}
  \HOLthm[def,w1/w,w2/w',M1/M,M2/M',width=55]{prettyPrinting.pppreserved_under_sim_def}
\end{holmath}
\end{defn}
The predicate \HOLtm{preserved_under_sim} takes type parameters by the same reason as discussed when we define \HOLtm{invar4bisim}. 

The rest of the section aims to translate the proof of characterizing formulas preserved under bisimulation as \emph{positively existential formulas}. A positive existential formula is a modal formula which does not contain `negative' connectives. Such a formula is $\top$ or $\bot$, or is built up using only `$\land$',`$\lor$' or `$\Diamond$':


\begin{defn}[\holref{Rules of positive existential formulas}{chap2_7}{44}]
The rules of positive existential formulas read:
\begin{itemize}
\item The formulas `$\bot$' and `$\top$' are positive existential.
\item A propositional letter standing alone is positive existential.
\item If $\phi_1$ and $\phi_2$ are both positive existential, then both their conjunction and their disjunction are positive existential.
\item Adding a diamond before a positive existential formula gives a positive existential formula.
\end{itemize}
\[
\begin{array}{c}
  \HOLthm[rule,conj1]{chap2_7.PE_rules} \ \ \ \ \ 
  \HOLthm[rule,conj2,width=30]{chap2_7.PE_rules} \ \ \ \ \ 
  \HOLthm[rule,conj3,width=20]{chap2_7.PE_rules} \ \ \ \ \
  \HOLthm[rule,conj4,width=80]{chap2_7.PE_rules} \ \ \ \ \ 
  \HOLthm[rule,conj5,width=80]{chap2_7.PE_rules} \ \ \ \ \ 
  \HOLthm[rule,conj6,phi/f,width=80]{chap2_7.PE_rules}
\end{array}
\]
\end{defn}
By induction, every finite conjunction or disjunction of positive existential formulas is again a positive existential formula. We can immediately prove by rule induction on positive existential formulas that every positive existential formula is preserved under simulation, but the converse only holds for `good models'. In a previous section, we introduced the concept of m-saturated models, and we have already seen that they are `good' models, which gives equivalence between modal equivalence and bisimulation. It turns out that m-saturated models do not only give rise to nice properties about bisimulations, but also work well for simulations. 

\begin{prop}[\holref{\texttt{exercise_2_7_1}}{chap2_7}{364}]\label{6.19}
 If \HOLtm{w1 IN M1.frame.world} and \HOLtm{w2 IN M2.frame.world} lives in m-saturated models \HOLtm{M1} and \HOLtm{M2}. Then if for every positive existential formula $\phi$, the satisfaction of $\phi$ at $w_1$ implies the satisfaction of $\phi$ at $w_2$, there exists a simulation relation between \HOLtm{M1} and \HOLtm{M2} which relates $w_1$ to $w_2$.  
\begin{holmath}
  \HOLthm[w1/w,w2/w',M1/M,M2/M',width=65]{prettyPrinting.ppexercise_2_7_1}
\end{holmath}
\end{prop}
\begin{proof}


   Under the assumptions, \HOLtm{\v1 v2. (!phi. PE phi ==> satis M1 v1 phi ==> satis M2 v2 phi)} gives a simulation relation. Checking it is indeed a simulation is completely analogue to the proof of Proposition \ref{5.7}.
\end{proof}



As the last theorem that is proved in the project, we translate the proof of the theorem that says modal formulas which are preserved under simulations are exactly those one which are equivalent to a positive existential formula into HOL4. This proof will use a similar idea as the characterization theorem proved in the last section. But this time, since our proof does not involve first-order logic, we only need the modal version of compactness theorem and its corollary. 

\begin{thm}[\holref{Compactness of modal logic}{chap2_7}{206}]\label{6.20}
If $\alpha$ is an infinite type, then given a set $s$ of $num$-modal formulas, if for every finite subset $ss$ of $s$, there exists a modal model \HOLtm{M} with $\alpha$-world set and a world \HOLtm{w IN M.frame.world} such that \HOLtm{satis M w phi} for every \HOLtm{phi IN ss}, then there exists a model with $\alpha$-world set and a world in \HOLtm{M} which satisfies all the modal formulas in $s$. 
\begin{holmath}
  \HOLthm[phi/f,width=60]{prettyPrinting.ppmodal_compactness_thm}
\end{holmath}
\end{thm}
\begin{proof}
By Proposition \ref{5.4} and Theorem \ref{6.16}.
\end{proof}

\begin{coro}[\holref{\texttt{modal_compactness_corollary}}{chap2_7}{277}]\label{6.21}
For $\alpha$ is an infinite type, given a modal formula $a$ and a set $s$ of $num$-modal formulas, if for every modal model \HOLtm{M} with $\alpha$-world set, every world \HOLtm{w} which satisfies all the formulas in $s$ will also satisfy $a$, then there exists a finite subset of $s$ such that for a world $w$ in a model \HOLtm{M} with $\alpha$-world set, if every formula in $ss$ is satisfied at $w$, then $a$ is satisfied at $w$.
\begin{holmath}
  \HOLthm[phi/f,width=60]{prettyPrinting.ppmodal_compactness_corollary}
\end{holmath}
\end{coro}
\begin{proof}
Similar to the proof of Corollary \ref{6.17}. 
\end{proof}

All the modal formulas appear in the above theorems are required to be $num$-formulas. That is because we need to appeal to standard translation to prove it, and the standard translation is only defined on $num$-modal formulas. Also, we require infiniteness of type universe since we use first-order compactness theorems to prove the above two theorems. 
 
For the same reason that we did it for Theorem \ref{6.18}, we only consider simulations between models of the same type here. 



\begin{thm}[\holref{\texttt{thm_2_78_half2}}{chap2_7}{399}]
If $\beta$ is an infinite type. Then for each $num$-modal formula $\phi$, if $\phi$ is preserved under simulation on $((\beta\to bool)\to bool,num)$-models, then there exists a positive existential $num$-modal formula which is equivalent to $\phi$ on $(\beta,num)$-models. 
\begin{holmath}
  \HOLthm[showtypes,varphi/phi0]{prettyPrinting.ppthm_2_78_half2}
\end{holmath}
\end{thm}
\begin{proof}
  Suppose $\phi$ is preserved under simulation. Consider the set \HOLtm{PEC} of positive existential formulas $\varphi$ such that for every $(\beta,num)$-model \HOLtm{M} and every world \HOLtm{w IN M.frame.world}, if all the formulas in \HOLtm{PEC} are satisfied at \HOLtm{w}, then \HOLtm{varphi} is satisfied at $w$. In HOL4, the set \HOLtm{PEC} is defined as:
\begin{holmath}
\HOLtm[alltt,width=100]{PEC = {varphi | PE varphi /\ 
                          (!M w:β. w IN M.frame.world ==>
                               satis M w phi ==> satis M w varphi)\}}
\end{holmath} 
By Corollary \ref{6.21}, if we can prove for every $(\beta,num)$-model \HOLtm{M} and \HOLtm{w IN M.frame.world}, \HOLtm{satis M w varphi} for all \HOLtm{varphi IN PEC} implies \HOLtm{satis M w phi}, then there exists a finite subset $S$ of \HOLtm{PEC} that entails $\phi$. This will prove $\phi$ is equivalent to the conjunction of all the formulas in $S$, which is again a positive existential formula.

Therefore, our task is to prove the entailment from \HOLtm{PEC} to $\phi$. Suppose \HOLtm{satis M w varphi} for all \HOLtm{varphi IN PEC} , we prove \HOLtm{satis M w phi}. Define \HOLtm{Γ={NOT psi | PE psi /\ satis M w (NOT psi)\}}. We claim that there exists a $(\beta,num)$-model with a world that satisfies the set \HOLtm{Γ ∪ {phi\}}. By Theorem \ref{6.20}, it suffices to prove each finite subset of \HOLtm{Γ ∪ {phi\}} is satisfied by some model. Suppose there exists a finite subset of \HOLtm{Γ ∪ {phi\}} which can be satisfied by no model, then there exists $\lnot\psi_0,\cdots,\lnot\psi_n\in \Gamma$ such that for every $(\beta,num)$-model \HOLtm{N} and every world $v$ of it, if \HOLtm{satis N (v:β) phi}, then there exists some $0\le i\le n$ such that ${\mathfrak N} ,\ v \ \Vdash \psi_i$. As all these $\psi$'s are positive existential, so does their big disjunction $\psi$, and hence \HOLtm{psi IN PEC}.  As \HOLtm{M} entails \HOLtm{PEC}, we have \HOLtm{satis M w psi}, and hence ${\mathfrak M}, \ w \Vdash \psi_i$  for some $i$ by definition of the $\psi$. But on other hand, ${\mathfrak M}, \ w \Vdash \lnot \psi_i$ for every $\psi_i$ by definition of \HOLtm{Γ}, this is a contradiction. 

Hence we obtain a model \HOLtm{N} such that every element in \HOLtm{Γ ∪ {phi\}} is satisfied at point $v$. For every positive existential formula $\psi$ such that \HOLtm{¬satis M w psi}, we have \HOLtm{NOT psi IN Γ}, so \HOLtm{satis N v (NOT psi)}. Hence for every positive existential $\psi$, if \HOLtm{satis N v psi}, then \HOLtm{satis M w psi}. We migrant this implication onto ultrafilter extensions: We take the ultrafilter extension of \HOLtm{M} and \HOLtm{N} respectively. By Proposition \ref{5.19}, for every positive existential $\psi$, \HOLtm{satis (UE N) (principle_UF v N.frame.world) psi} implies \HOLtm{satis N v psi}, by the discussion above, it implies \HOLtm{satis M w phi}, and hence implies \HOLtm{satis (UE M) (principle_UF w M.frame.world) psi} by Proposition \ref{5.19} again. As \HOLtm{(UE M)} and \HOLtm{UE N} are m-saturated by Proposition \ref{5.21}, by Proposition \ref{6.19}, we have a simulation relating \HOLtm{(principle_UF v N.frame.world)} to \HOLtm{(principle_UF w M.frame.world)}. 

As \HOLtm{satis N v phi}, Proposition \ref{5.19} gives \HOLtm{satis (UE N) (principle_UF v N.frame.world) phi}, as $\phi$ is preserved under simulation, we have 
\HOLtm{satis (UE M) (principle_UF w M.frame.world) phi}. Again by Proposition \ref{5.19} , it implies \HOLtm{satis M w phi}. This completes the proof.
\end{proof}

\end{document}

% Local variables:
% mode: latex
% End:
