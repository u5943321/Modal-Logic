\documentclass[a4paper,12pt,openany]{book}

\renewcommand{\baselinestretch}{1.2}
\newcommand{\blanknonumber}{\newpage\thispagestyle{empty}}
\usepackage{graphics}

\raggedbottom


%\setlength{\voffset}{-0.5in}
%\setlength{\textheight}{710pt} old setting

%\usepackage[margin=1in,footskip=0.25in]{geometry}
\usepackage{holtexbasic}
\usepackage{stmaryrd}
\usepackage{hyperref}
\usepackage{amsthm}
\usepackage{proof}
\usepackage{tikz}
\usetikzlibrary{arrows,calc,positioning,shapes,fit}




\newtheorem{thm}{Theorem}[chapter]
\newtheorem{defn}{Definition}[chapter]
\newtheorem{lm}[thm]{Lemma}
\newtheorem{coro}[thm]{Corollary}
\newtheorem{prop}[thm]{Proposition}
\renewcommand{\HOLConst}[1]{{\textsf{\upshape\small #1}}}
\renewcommand{\HOLinline}[1]{\ensuremath{#1}}
\renewcommand{\HOLFieldName}[1]{\HOLConst{#1}}
\renewcommand{\HOLTokenLeftrec}{\ensuremath{\langle\!\langle}}
\renewcommand{\HOLTokenRightrec}{\ensuremath{\rangle\!\rangle}}
\newcommand{\holthmenv}[1]{\begin{array}[t]{l}#1\end{array}}
\renewcommand{\HOLKeyword}[1]{\texttt{\upshape #1}}
\renewcommand{\HOLTokenBar}{\mbox{$|$}}

\setlength{\voffset}{-1in}
\setlength{\hoffset}{-1in}
\setlength{\oddsidemargin}{4cm}
\setlength{\evensidemargin}{2.5cm}
\setlength{\textwidth}{14.5cm}
\setlength{\textheight}{22.5cm}
\setlength{\topmargin}{2.5cm}
%all lemmas and theorems are drawn from [5] unless noted otherwise. 

\newcommand{\holref}[3]{\href{Https://github.com/u5943321/Modal-Logic/blob/00d0ddde512a3b7f01e07aef05403a48a18be476/#2Script.sml\#L#3}{#1}}
\newcommand{\reff}[3]{\href{Https://github.com/u5943321/Modal-Logic/blob/49347817c5c3a4c50c419339ce856b2f121881df/#2Script.sml\#L#3}{#1}}
\newcommand{\rref}[3]{\href{Https://github.com/u5943321/Modal-Logic/blob/cb3a6b28a487e42948d1376dd583b98d2777fb56/#2Script.sml\#L#3}{#1}}

\newcommand{\jh}[3]{\href{https://github.com/HOL-Theorem-Prover/HOL/blob/bd3fc1cc8392c998068820cf999c73ea95f10e8f/examples/logic/folcompactness/#2Script.sml\#L#3}{#1}}

\newcommand{\final}[3]{\href{Https://github.com/u5943321/Modal-Logic/blob/9ef1d16d8c297791ef20b9e601415b963b00b528/#2Script.sml\#L#3}{#1}}
\newcommand{\ffinal}[3]{\href{Https://github.com/u5943321/Modal-Logic/blob/1eac09d4a4b44dc4376dfe2b7580e6901bc1b47e/#2Script.sml\#L#3}{#1}}

%Https://github.com/u5943321/Modal-Logic/blob/49347817c5c3a4c50c419339ce856b2f121881df/#2Script.sml\#L#3}{#1}}


%https://github.com/HOL-Theorem-Prover/HOL/blob/develop/examples/logic/folcompactness/folLangScript.sml
%bd3fc1cc8392c998068820cf999c73ea95f10e8f

\newenvironment{holmath}{\begin{displaymath}\begin{array}{l}}{\end{array}\end{displaymath}\ignorespacesafterend}
\newenvironment{solution}{\begin{proof}[Solution]}{\end{proof}}
%\renewcommand{\baselinestretch}{1.4}
%\setcounter{section}{-1}
\title{Formalizing modal logic in HOL}
\author{Yiming Xu}
\date{15/6/2018}


%simply type theory
%inductive types
%Record type.
%introduce syntax when use it.
%(\beta,\alpha) model
%how to read this thesis
%HM thm one direction 

%overload the notation for not entail FOL
%bibliography

%function update

\begin{document}
\frontmatter

\begin{titlepage}
\begin{center}

\vspace*{\fill} \Huge
                        Formalizing Modal Logic in HOL
\\
\vfill\vfill\Large
                          Yiming Xu
\\
\vfill\vfill
                          October 2019
\\
\vfill\vfill \normalsize
         A thesis submitted for the degree of Bachelor of Science (Honours)\\
 of the Australian National University
\vfill
         \includegraphics{ANU.eps}

\end{center}

\end{titlepage}


\blanknonumber\ \blanknonumber

\vspace*{\fill}

\begin{center}\emph{
%
For the following four supervisors/lecturers of mine: \\
Michael Norrish\\
Scott Morrison\\
James Borger\\
Vigleik Angeltveit
%
}
\end{center}

\vfill\vfill\vfill

\chapter*{Declaration}\label{declaration}
\thispagestyle{empty}
The work in this thesis is my own except where otherwise stated.

\vspace{1in}


\hfill\hfill\hfill
%
Yiming Xu
%
\hspace*{\fill}

\chapter*{Acknowledgements}\label{acknowledgements}
\addcontentsline{toc}{chapter}{Acknowledgements}

Firstly, big thanks to my project main supervisor Michael Norrish and co-supervisor Scott Morrison, as well as the two supervisors/lecturers James Borger and Vigleik Angeltveit who have provided me significant amount of guidance on my studying. The whole list of specific things which I need to thank you about is too long to be displayed here. But overall, I feel that I am the luckiest person in the world for having all of you teaching me all this interesting stuff and helping me developing all these useful skills. I will definitely try my best in my further studying to prove that I deserve all the good education from you. Also, I would thank Joan Licata for being a really helpful and considerate honour convenor, and thank Amnon Neeman for treating us so carefully in his special topic course.

Secondly, thanks to all the honours students. Special thanks to Ameilia Han, Fredrick Yuan, Chris Hone, Mitchell Rowett, Josh Tomlin, Keeley Hoek, Michael Howes, Kelly Maggs, Ben Leedom, Jane Tan, for both collaborating on assignments and chatting. 

Moreover, thanks to Robert Culling, for being my tutor from Algebra 1 to Algebra 3, and proofreading several pages. I would also thank Zoey Chen for feeding me. 


Finally, thanks to my parents for supporting my studies through all these years. 
\tableofcontents

\mainmatter

\chapter{Introduction}
\label{chapter1}


There are four questions to answer in order to make sense of our title:
\section{What is modal logic?}

It is hard to find a concise answer to this question. As stated in the textbook `Modal Logic' by Patrick Blackburn, Maarten de Rijke, and Yde Venema, if you ask three modal logicians, you are likely to get at least three different answers. Therefore, we will begin by asking what is modality. Let us consider first-order logic for a moment. Suppose $x$ is a person. When we say `$x$ is happy', we are applying the predicate `is happy' to the person $x$. But also in our daily conversation, we may say something like `perhaps $x$ is happy' or `$x$ must be happy'. Here, `perhaps' and `must' are used to describe the `mode' of the predicate `is happy', and they are examples of  \emph{modalities}. The modalities `perhaps' and `must', which are canonically called `possibly' and `necessarily' in formal modal logic, are denoted as `$\Diamond$' and `$\Box$' respectively. Let $P$ denote the predicate `is happy'. In formal language, we can then write `perhaps $x$ is happy' as `$\Diamond Px$', and write `$x$ must be happy' as `$\Box Px$'. 

In the above discussion, we introduced modalities by considering their semantic meanings. But historically, when logicians start thinking about capturing modalities using formal logic, they enriched propositional logic by adding some extra symbols, called modal operators, together with some axioms describing their behavior, but there was no satisfactory way to define a formal semantics of those modal operators. Before they realized the usefulness of the semantic tools, modal logicians had a hard time attempting to solve problems of distinguishing different systems of axioms. But more than 40 years after the concept of modal logic was established, the usage of Kripke models brought many interesting results to this subject. Work on modal logic using Kripke models is conventionally called `modal model theory', which is exactly what I am formalizing in this project. 

Nowadays, modal logic is widely adopted in many disciplines, including, but not limited to, mathematics, philosophy, linguistics, and economics. In particular, the development of modal logic and computer science support each other. With the topics taken from computer science and everywhere else, modal logic is growing rapidly, and we have great chance to see more and more interesting application of this subject to both theoretical research and daily life.

\section{What is HOL?}

A brief overview of HOL can be found in~\cite{Norrish}. 
%
For a short answer, HOL is an interactive theorem prover: a computer program used to prove mathematical theorems. 
%
We stress ``interactive'': we do not expect the machine to prove theorems automatically. 
%
According to G\"odel's incompleteness theorem, there is no algorithm that can determine the truth value of every mathematical statement. 
%
Hence to prove mathematical theorems, we interact with the machine, providing human intelligence and guidance. 
%
However, it is also important that interactive theorem provers can and do use automatic techniques. 
For instance, as there are automatic methods for both first-order logic and Presburger arithmetic, these can be embedded in HOL, making it possible to work at a higher level when interacting with the machine. 

There are many theorem provers based on various foundational systems: HOL is based on simple type theory, and there exist other theorem proves based on dependent type theory (e.g. Lean, Coq) and set theory (Mizar, metamath). Each of these systems has their advantages, but there is a trade-off: simple type theory is widely considered as less expressive but rather easy to understand and to be implemented, whereas for more expressive systems, it takes longer for the machine to execute a proof step. 

%HOL is on the sweet spot of the trade-off, We will identify where the lack of expressiveness cause problems. 


\section{Why is the combination of the two interesting?}

As discussed above, modal model theory has a long history and many theorems in modal model theory have been proved since the usage of Kripke models became popular. Nevertheless, none of these theorems have been machine checked. By formalizing modal model theory in a computer, we will make sure that we have    understood every detail of the formalized theorems, find out hidden assumptions, and correct minor errors in their statements. And by formalizing in HOL, we will demonstrate that although simple type theory is a rather weak foundational system and does lack expressiveness, it is still capable of capturing most of the theorems we are interested in. 
We identify where the lack of expressiveness causes problems.


\section{What have I done?}

My project is to formalize some theorems of modal model theory, based on the first two chapters of the textbook \emph{Modal Logic}~\cite{Blackburn}. At the beginning of the textbook, the authors give three slogans of this subject:

\begin{description}
\item [Slogan 1:] Modal languages are simple yet expressive languages for talking about relational structures.
\item [Slogan 2:] Modal languages provide an internal, local perspective on relational structures.
\item [Slogan 3:] Modal languages are not isolated formal systems.
\end{description}

A reader will see evidence of the three slogans consecutively in this thesis. Chapter 2 and 3 are about formalizing basic properties of modal formulas and their semantic behaviors on models of propositional modal logic. In particular, the locality of a modal language is proved at the end of Chapter 3. From Chapter 4 onwards, modal logic and first-order logic are linked together. 


In summary: 
\begin{itemize}
\item  By now, every theorem proved in the book up to section 2.7 that can be captured by the basic modal language and HOL is formalized. The definitions, theorems and proofs are taken from the book, and their statements in HOL are taken to be as close as possible to the original mathematical statements appearing in the book. 


\item There are some results which are only used but not proved in the textbook. Such results are all formalized, means that they are safe to be quoted for proving things. The most significant part is the work on ultraproducts. This piece of work depends in turn on the work of John Harrison on first-order logic \cite{Harrison}, which was done in 1998. The work on ultraproducts is discussed as a interlude in this thesis when it is about to be used.

\item Section 2.6 of \cite{Blackburn} consists of two parts: characterization and definability. The `definability' part is not formalized in HOL since it is not possible to capture its statement in HOL. Section 2.7 \cite{Blackburn} consists of two parts as well: simulation and safety. The `safety' part is not formalized in HOL since its statement is not purely about the basic modal language. These two parts are not mentioned in the body of the thesis. 

\end{itemize}


\section{How to read this thesis}

This thesis explains the most interesting parts of the work we have done, and it is as self-contained as possible. 
We do not assume the reader knows either modal logic or interactive theorem proving, so we will introduce both topics. 
The approach we have taken to structuring the thesis is explain both topics at the same time. 

We explicitly give most of the formal definitions we use, as well as the formal statements of constructions and theorems when necessary. 
For the sake of length, we only explain the most interesting theorems, and omit those that are less interesting. 
Though the thesis omits some proofs that are routine or not interesting enough from the theorem-proving aspect, all proofs have been formalized in HOL. 

A key role of a human reader is to verify that the formalized statements do actually have the intended meaning. For this reason, for most of the major theorems and definitions, we give both a ``human-readable'' statement, followed by the pretty-printed statement from the HOL sources, meaning that there is no chance of error in the transfer from checked material to \LaTeX.
However, the pretty-printing process does turn purely linear computer text into more agreeable printed mathematics, complete with subscripts, superscripts and the like.  A reader who wants to fully trust my formalization should carefully compare the English statements and the formalized statements in HOL. 

For each definition and each theorem,  a clickable link to the HOL sources on Github is provided, where the formal statements can be viewed.
%All the results in the thesis have been pretty-printed from HOL sources, meaning that there is no chance of error in the transfer from checked material to \LaTeX. However, the pretty-printing process does turn purely linear computer text into more agreeable printed mathematics, complete with subscripts, superscripts and the like. 
We encourage readers to follow at least one hyperlink to see the original text as it was provided to HOL, so the difference between the HOL source and pretty-printed version in the thesis will become clear. 



\chapter{Getting Started}

\section{HOL syntax}

Our theorem prover HOL is based on simple type theory. We are not going to give a convoluted introduction on simple type theory. To read this thesis, the reader only need to know that in simple type theory, whenever we refer to something, it must come  with its type. We write $a: \alpha$ to express `$a$ is a term of the type $\alpha$'. For a type $\alpha$, its type universe, which is the set of all the terms of type $\alpha$, is denoted \HOLtm{univ(:α)}. 


In the process of reading this thesis, the reader will get to know how to work with simple type theory. As mentioned in the introduction, the most obvious advantage of simple type theory is its simplicity, which makes most statements in HOL straightforward to  read. We can read off the conjunctions, disjunctions and implications in the statement directly. However, there is some special syntax for HOL which is worthwhile to be explained first. While it may be helpful to read this list now, when each instance of this syntax is used for the first time, we will explain it there. 
\begin{itemize}
\item Inductive types: When defining inductive types, we write bars between the constructors of the type.

\item Record types: We put the fields of a record type into `$\HOLTokenLeftrec\cdots \HOLTokenRightrec$', and separate the fields using `;'. For instance, if we define a type with `$\sf Mytype = \HOLTokenLeftrec\ \sf field1 := \cdots; field2 :=\cdots \HOLTokenRightrec$', where the `$\cdots$' will be a type. If $\sf A$ is a term of the type $\sf Mytype$, we can write $\sf A.field1$ to get the $\sf field1$ of $\sf A$. 

\item Function application: Unlike what we write in common mathematical textbooks, when we apply a function $f$ of type $\alpha\to \beta$ on a term $a$ of type $\alpha$, we write $f \ a$ instead of $f(a)$. In turn, this means that function applications can be chained, producing terms such as \HOLtm{f a b}, which can be read as similar to applying \HOLtm{f} to two arguments as once, where $f$'s type will be an instance of the pattern \HOLty{:α -> β -> γ}. 
Though it is possible to write functions applied to pairs (\HOLtm{f(a,b)}), the ``curried'' style is more common. 

\item Predicates as functions: In simple type theory, a predicate \emph{is} a function to the type \HOLty{:bool} consisting of \HOLtm{T} and \HOLtm{F}. A predicate $P$ which takes arguments of type \HOLtm{α} is a term  of type \HOLty{:α->β}. For \HOLtm{a : α} of type \HOLty{:α}, we write \HOLtm{P a} or \HOLtm{P a  = T} to express `the predicate $P$ is true for $a$'.

\item $\lambda$-abstraction: We can use $\lambda$-abstraction to define functions. For instance, the function \HOLtm{\x. x+2} sends \HOLtm{x} to \HOLtm{x + 2}. The function \HOLtm{\i. f i} is the same as the function $f$, since it means that `for each $i$, send $i$ to $f\ i$'. 

\item Quantification: When using quantifiers in HOL, we put a dot after the thing that we are quantifying over. For example, \HOLtm{!x. P x} reads `for all $x$, we have \HOLtm{P x}'  and \HOLtm{?x. P x} reads `exists an $x$ such that \HOLtm{P x}', where $P$ is a predicate. When quantifying over multiple things, we only write one quantifier at the very beginning. For example, `\HOLtm{!x y. R x y}' reads `for all $x$, for all $y$, we have \HOLtm{R x y}' and `\HOLtm{?x y. R x y}' reads `exists $x$ and $y$ such that \HOLtm{R x y}', where $R$ is a relation.



\item Useful functions:
\begin{itemize}
\item \HOLtm{CARD}: The function \HOLtm{CARD} takes a set, and gives  its cardinality.

\item \HOLtm{count}: The function \HOLtm{count} takes a natural number $n$, and gives the set $\{0,1,\cdots,n-1\}$.

\item \HOLtm{BIJ}: The function \HOLtm{BIJ} takes a term of type $f:\alpha\to \beta$, an $\alpha$-set $A$ and a $\beta$-set $B$, and gives the boolean value \HOLtm{T} if and only if $f$ is a bijection form $A$ to $B$, similar for the functions \HOLtm{INJ} and \HOLtm{SURJ}.

\item \HOLtm{CHOICE}: The function \HOLtm{CHOICE} is just the choice function. For a non-empty set $X$, the only thing we know about \HOLtm{CHOICE X} is that \HOLtm{(CHOICE X) IN X}.

\item \HOLtm{RESTRICT}: The function \HOLtm{RESTRICT} takes a relation on terms of type $\alpha$ and an $\alpha$-set $A$, and gives a relation \HOLtm{RESTRICT R A} defined as for any term $x$ and $y$ of type $\alpha$, we have \HOLtm{(RESTRICT R A) x y}, which reads `$x$ and $y$ are related by the relation \HOLtm{RESTRICT R A}', if and only if \HOLtm{x IN A} and \HOLtm{y IN A} and \HOLtm{R x y}. 

\item \HOLtm{R^*} and \HOLtm{R^+}: For a relation \HOLtm{R} on $\alpha$-terms, we use \HOLtm{R^*} to denote its reflexive and transitive closure, and use \HOLtm{R^+} to denote its transitive closure. 

\item \HOLtm{MAX}: The function \HOLtm{MAX} takes two natural numbers and give the greater one. 

\end{itemize}


\item Lists: There are some functions which deal with lists:
\begin{itemize}
\item \HOLtm{LENGTH}: The function \HOLtm{LENGTH} takes a list and gives its length, which is a natural number.

\item \HOLtm{HD}: The function \HOLtm{HD} takes a list and give the first member of it. 

\item \HOLtm{EL}: The function \HOLtm{EL} takes a list, a natural number $n$, and give the $n$-th member of it (counted from $0$).

\item \HOLtm{LAST}: The function \HOLtm{LAST} takes a list and gives the last member of it. 

\item \HOLtm{MAP}: The function \HOLtm{MAP} takes a function of type $\alpha\to\beta$ and an $\alpha$-list $l$, gives the $\beta$-list such that the $n$-th member is $f\ a$, where $a$ is the $n$-th member of $l$.


\end{itemize}

\end{itemize}

\section{The basic setup}
In our formalization, we only consider the basic modal language, in which the only primitive modal operator is the `$\Diamond$'. For a type $\alpha$, an $\alpha$-modal formula is either of form \HOLtm{VAR p}, where $p$ is of type $\alpha$, or a disjunction $\phi\lor \psi$ of two $\alpha$-modal formulas, or the falsity $\bot$, or a negation $\lnot \phi$ of an $\alpha$-modal formula $\phi$, or, finally, of the form $\Diamond \phi$ where $\phi$ is an $\alpha$-modal formula.


In HOL, we create a data type called `form' of the formulas of this modal language. To define a new inductive type, we give a list of ways to construct terms of the type, separated with the symbol `$\mid$'. 




\begin{defn}
{\upshape\holref{\cite[Definition 1.9]{Blackburn}}{chap1}{13}}
%[\holref{Modal formulas as a type}{chap1}{13}]
An $\alpha$-modal formula as described above is specified formally in HOL as an inductive type:
\begin{holmath}
  \HOLthm{chap1.datatype_form}
\end{holmath}
\end{defn}

Note that \HOLtm{DISJ} is of type $\alpha \ form \to (\alpha \ form \to \alpha\ form)$, which means that it can be regarded as a function that takes two $\alpha$-modal formulas and gives an $\alpha$-modal formula. In particular, once \HOLtm{DISJ} appears, the two arguments after it are always $\alpha$-modal formula, otherwise it does not make sense. We will write `\HOLtm{DISJ phi1 phi2}' for `\HOLtm{DISJ} $\phi_1 \ \phi_2$' afterwards. We can also regard $\lnot$ and $\Diamond$ as functions of type $\alpha \ form\to \alpha \ form$. The functions \HOLtm{VAR}, \HOLtm{DISJ}, \HOLtm{NOT}, \HOLtm{DIAM} together with \HOLtm{FALSE} are called the \emph{constructors} of the type of $\alpha$-modal formulas. From now on, when we talk about $\alpha$-modal formula, we will call a term of type $\alpha$ a \emph{propositional letter}. We will just call an $\alpha$-modal formula an $\alpha$-formula if no confusion arises. 

The non-primitive connectives, the conjunction `$\land$', the implication `$\to$', and the truth `$\top$', are defined in a standard way as $\phi_1\land \phi_2:=\lnot (\lnot \phi_1\lor \phi_2)$, $\phi_1\to \phi_2 := \lnot \phi_1\lor \phi_2$ and $\top:= \lnot\bot$ respectively. 

Note that all formulas are of finite size; it is not possible to construct infinite conjunctions or disjunctions.


We have a modal operator that is dual to the diamond: the box $\Box \phi:= \lnot\Diamond \lnot \phi$, as an analogue of the duality between the universal quantifier and the existential quantifier, in the sense that $\exists$ is defined to be $\lnot\forall\lnot$ in classical logic. 

Having defined the syntax of formulas, we can now define their \emph{semantics}. It is easy to come up with a way to interpret formulas which are no more than combinations of propositional letters using the connectives `$\lor$' and `$\lnot$'. However, to interpret a modal formula that involves diamonds, we need to assign the syntactical notation `$\Diamond$' an `actual meaning'. 

To interpret modal formulas, we need a \emph{relational structure}. A relational structure consists of a set, which is called the `set of worlds', and a binary relation on it. Such a relational structure is called a \emph{frame} in the rest of the thesis. If in addition, every world of the frame is equipped with an assignment of truth values on propositional letters, then we will have a \emph{model} of modal formulas. The formula  $\Diamond \phi$, where $\phi$ is a modal formula, is interpreted as `there exists a world related to the current state where \HOLtm{phi} is true'. Accordingly, `\HOLtm{BOX phi}' will be interpreted as `for every point that is related to the current state, \HOLtm{phi} is true'. 


For a first example, consider a two-point set $\{a,b\}$, and let the relation be $\{(a,b)\}$. Let the propositional letter $p$ be true on both $a$ and $b$. Consider the modal formula \HOLtm{DIAM (VAR p)}, we say \HOLtm{DIAM (VAR p)} is true at $a$, since $b$ is a point that is related to $a$, where the formula \HOLtm{VAR p} holds. 
On the other hand, \HOLtm{DIAM (VAR p)} does not hold at $b$, since there is no world related to $b$. 

%Therefore, to interpret modal formulas, we need a \emph{relational structure}. A relational structure consists of a set and a binary relation on it, such a relational structure is called a \emph{frame} in the rest of the thesis. If in addition, for each element of the underlying set of the relational structure, it is equipped with an assignment of truth values on propositional letters, then we will have enough information to interpret every modal formula by interpreting $\Diamond \phi$, where $\phi$ is a modal formula, as above. Accordingly, `\HOLtm{BOX phi}' will be interpreted as `for every point that is related to the current state, \HOLtm{phi} is true'. 

Returning to our formalization, we define a frame and a model as follows in HOL:
%we call a frame together with an assignment of truth values on propositional letters at each point a \emph{model}, or a \emph{Kripke model} of modal formulas. The underlying set of a model is called the `set of worlds' of the model.  

\begin{defn}
{\upshape\holref{\cite[Definition 1.19]{Blackburn}}{chap1}{76}}
%[\holref{Modal model as a type}{chap1}{76}]
A $\beta$-frame consists of a world set and a relation, where the world set has type \HOLty{:β -> bool} and the relation has type \HOLtm{:β -> β -> bool}. 
A model for modal logic is a frame together with a function called $\sf valt$. The function $\sf valt$ assigns truth values of propositional letters at each world. 
\begin{holmath}
  \HOLthm[:'b/:'a]{chap1.datatype_frame}\\
  \HOLthm{chap1.datatype_model}
\end{holmath}
\end{defn}
Here the $\HOLTokenLeftrec\cdots\HOLTokenRightrec$ is the notation for defining a structure. When we say a $(\HOLty{:α},\HOLty{:β})$-model, we mean a model for $\alpha$-formulas with a $\beta$-set as its underlying set.
 For a model \HOLtm{M}, its field \HOLtm{M}$.\sf valt$ will be called the \emph{valuation} in the discussion afterwards.  
In the rest of the thesis, we use the notations \HOLtm{M.frame.world}, \HOLtm{M.frame.rel} and \HOLtm{M.valt} to denote the world set, the relation, and the valuation of the model \HOLtm{M}. 



We interpret modal formulas using the function called `satisfaction'. 
\begin{defn}
{\upshape\holref{\cite[Definition 1.20]{Blackburn}}{chap1}{94}}
%[\holref{Satisfaction}{chap1}{94}]
Satisfaction is a predicate inductively defined on modal formulas, which takes a model \HOLtm{M}, a world \HOLtm{w} in the model, a modal formula, and gives a truth value. We read `\HOLtm{satis M w phi}' as `$\phi$ is satisfied at the world $w$ in \HOLtm{M}'. For \HOLtm{w IN M.frame.world}, a propositional letter $p$ is satisfied at $w$ if \HOLtm{M.valt p w} is the boolean value $\sf T$. Falsity is never satisfied, a negation of a formula $\phi$ is satisfied if $\phi$ is not satisfied, a disjunction is satisfied if at least one of its disjuncts is satisfied, and  $\Diamond \phi$ is satisfied if there exists a world in the model that $w$ is related to where $\phi$ is satisfied. 
\begin{holmath}
\begin{array}{rcl}
  \HOLthm[aligneddef,phi/form]{chap1.satis_def}
\end{array}
\end{holmath}
\end{defn}

Observe that instead of defining the satisfaction of \HOLtm{VAR p} at $w$ to be \HOLtm{w IN M.valt p}, we include the extra condition that $w$ must live in the underlying set of \HOLtm{M}. 
This is because HOL allows us to write \HOLtm{satis M w phi}, for every $w$ of the correct type, even if it does not belong to the underlying set of \HOLtm{M}. 
A reader may think that we can define our satisfaction predicate as a function that takes a model \HOLtm{M}, and make sure that `satisfaction on the model \HOLtm{M}' is a function from the worlds set of \HOLtm{M} and the set of modal formulas to the set \HOLtm{{T;F\}}. We might do this in a dependently typed language, but it is not possible in HOL: we cannot make the domain and the codomain an intrinsic property of a function. The notion of a function from an $\alpha$-set $A$ to a $\beta$-set $B$ is not primitive. Such a function is a term $f$ of type $\alpha\to \beta$, with the additional property that \HOLtm{!a. a IN A ==> (f a) IN B}. Though $f$ may satisfy this property, it still has values on elements of \HOLty{:α} that are not part of the set $A$. 


On each model, the truth value of each modal formula is completely determined by the truth values of the propositional letters appear in it. In HOL, we define a function \HOLtm{prop_letters} that takes a modal formula and gives the set of propositional letters appearing in it, and prove: 

\begin{prop}
{\upshape\holref{\cite[Exercise 1.3.1]{Blackburn}}{chap1}{621}}
%[\cite{Blackburn}{Exercise 1.3.1}, \holref{\texttt{exercise_1_3_1}}{chap1}{621}]
\label{2.1}
If two models \HOLtm{M1} and \HOLtm{M2} have the same frame and agree on the valuation on all the propositional letters in \HOLtm{phi}, then \HOLtm{phi} is satisfied at a world $w$ in \HOLtm{M1} if and only if $\phi$ is satisfied at $w$ in \HOLtm{M2}.
\begin{holmath}
  \HOLthm{prettyPrinting.ppexercise_1_3_1}
\end{holmath}
\end{prop}

For two modal formulas using the same type of propositional letters, we have the notion of being \emph{equivalent}. 
\begin{defn}[\holref{Equivalence}{IBCDNFrevised}{17}]
If \HOLtm{phi1}, \HOLtm{phi2} are \HOLtm{α} formulas, \HOLtm{equiv0 (:β) phi1 phi2} means for every $(\alpha,\beta)$-model \HOLtm{M} and every world \HOLtm{w} in it, we have \HOLtm{satis  M w phi1 <=> satis M w phi2}.
\begin{holmath}
  \HOLthm[def,showtypes,(:'b)/μ,width=70]{prettyPrinting.ppequiv0_def}\\[3mm]
\end{holmath}
\end{defn}

A notable thing is that we need to refer to the type of models when talking about equivalence of formulas. We are not allowed to omit the type parameter \HOLtm{(:β)} in the definition, since then there will be a type, namely the type of the underlying set of the models we are talking about, that only appears on the right-hand side but not on the left-hand side of the definition, which is not allowed in HOL.\footnote{See the HOL Logic manual~\cite{HOLlogic} for more details.} Also, we are not allowed to quantify over types, so it is also impossible to define the equivalence to be \HOLtm{!μ. equiv μ phi1 phi2}, where $\mu$ denotes a type. Therefore, because of such a specific problem in HOL (actually, in simple type theory), this definition is not encoding the equivalence in mathematical sense precisely, since when we mention equivalence of formulas in usual mathematical language, we are implicitly referring to the class of all models, but the constraint here bans us from talking about all models of all possible types at once. Such a constraint give rise to some problems in our formalization, as we will see in later chapters. 

We can immediately prove that for every type $\alpha$, if \HOLtm{equiv0 (:β) phi1 phi2} then \HOLtm{equiv0 (:β) (DIAM phi1) (DIAM phi2)}. If we use set theory as our foundation, then the converse can be proved very easily: If two diamond formulas \HOLtm{DIAM phi1} and \HOLtm{DIAM phi2} are equivalent, then for a contradiction, suppose that $\phi_1$ and $\phi_2$ are not equivalent, then there exists a model \HOLtm{M} and a world $w$ such that $w$ satisfies $f$ but not $g$. We can add a world $v$ to the world set of \HOLtm{M} that is only related to $w$, then $v$ will be a witness of the fact that \HOLtm{DIAM (phi1)} and \HOLtm{DIAM (phi2)} are not equivalent. But under our definition in HOL, if the \HOLtm{(:β)} is a finite type, the proof is blocked: since we cannot make sure that we can come up with a world $v$ which is not already being used by \HOLtm{M}, and hence come up with a fresh world to add to \HOLtm{M} which is only related to $w$. However, for every model, regardless of its world set is of a finite type or not, we can always create a copy of the model in an infinite type. So it is harmless to only play with equivalence of formulas for models whose underlying set is of an infinite type. 


\begin{prop}[\holref{\texttt{equiv0_DIAM}}{chap2_3}{980}]\label{2.2}
For two modal formulas \HOLtm{phi1} and \HOLtm{phi2}, \HOLtm{phi1} and \HOLtm{phi2} are equivalent on models with $\beta$-world sets where $\beta$ is an infinite type if and only if $\Diamond \phi_1$ and $\Diamond \phi_2$ are equivalent on models with $\alpha$-world sets. 
\begin{holmath}
  \HOLthm[phi1/f,phi2/g,:'b/:'a]{prettyPrinting.ppequiv0_DIAM}
\end{holmath}
\end{prop}




\chapter{Invariant Results and Finite Model Property}

In this chapter, we talk about some basic results about modal logic. First, we prove some theorems about when modal satisfaction is invariant under operations and relations. And in the second section, we prove the \emph{finite model property} of modal formulas. 

\section{Invariant results}

The key concept we are interested in this section is \emph{modal equivalence}.

\begin{prop}
{\upshape\holref{\cite[Definition 2.1 (Modal Equivalent)]{Blackburn}}{chap2_5}{54}}
%[\holref{\texttt{modal_eq_tau}}{chap2_5}{54}]
Two worlds \HOLtm{w IN M.frame.world} and \HOLtm{w' IN M'.frame.world} are called to be `modal equivalent' (notation: \HOLtm{modal_eq M M' w w'}) if they satisfy the same set of modal formulas. 
\begin{holmath}
  \HOLthm[def,phi/form,M'/Mp]{chap2_5.modal_eq_tau}
\end{holmath}
\end{prop}

The three parts in this section are about three ways to get modal equivalence, namely via generated submodels, bounded morphisms, and bisimulation. The first two constructions will be proved to be special cases of the third one.  


\subsection{Generated submodels}


Given a model, there is an operation that allows us to restrict our scope to a smaller model without changing satisfaction of modal formulas, this is called the `generated submodel' construction. When we say `\HOLtm{M1} is a submodel of \HOLtm{M2}', we mean all the information of \HOLtm{M1} is inherited from that of \HOLtm{M2}. 
\begin{defn}
{\upshape\holref{\cite[Definition 2.5, Submodels]{Blackburn}}{chap2_1}{60}}
%[\holref{Submodel}{chap2_1}{60}]
By \HOLtm{SUBMODEL M1 M2}, we mean:
\begin{itemize}
\item The world set of \HOLtm{M1} is a subset of the world set of \HOLtm{M2}.
\item For two worlds $w_1,w_2$ in \HOLtm{M1}, we have \HOLtm{M1.frame.rel w1 w2} iff \HOLtm{M2.frame.rel w1 w2}. 
\item For every world of \HOLtm{M1}, its valuation of propositional letters is exactly the same as that in \HOLtm{M2}.
\end{itemize}
\begin{holmath}
  \HOLthm[def,width=60]{prettyPrinting.ppSUBMODEL_def}
\end{holmath}
\end{defn}

It is not necessary that submodel construction preserves modal satisfaction. Although the clause about relation says that for every pair of worlds $w_1,w_2$ in \HOLtm{M1}, they are related in \HOLtm{M1} iff they are related in \HOLtm{M2}, it can be the case that $w_1,w_2$ are worlds in \HOLtm{M2} such that \HOLtm{M2.frame.rel w1 w2}, where $w_2$ is the only world that $w_1$ is related to, but \HOLtm{w1 IN M1.frame.world} whereas \HOLtm{w2 NOTIN M1.frame.world}. As a consequence, if we have \HOLtm{satis M2 w2 phi}, then we will have \HOLtm{satis M2 w1 (DIAM phi)} but not \HOLtm{satis M1 w1 (DIAM phi)} since there is no world in \HOLtm{M1} such that \HOLtm{w1} is related to. To avoid such situation, we can add an extra constraint to make sure that for each world $w$ in \HOLtm{M2}, if it is included in the world set of \HOLtm{M1}, then every world \HOLtm{w' IN M2.frame.world} such that \HOLtm{M2.frame.rel w w'} must also be included to the world set of \HOLtm{M1}. A submodel which satisfies this extra condition is called a generated submodel (notation: `\HOLtm{GENSUBMODEL M1 M2}' reads `\HOLtm{M1} is a generated submodel of \HOLtm{M2}').

\begin{defn}
{\upshape\holref{\cite[Definition 2.5, Generated Submodels]{Blackburn}}{chap2_1}{68}}
%[\holref{Generated submodel}{chap2_1}{68}]
\begin{holmath}
  \HOLthm[def,width=60]{prettyPrinting.ppGENSUBMODEL_def}
\end{holmath}
\end{defn}

Note that for a generated submodel \HOLtm{M1} of \HOLtm{M2}, for worlds \HOLtm{w1} and \HOLtm{w2} of \HOLtm{w2}, if \HOLtm{w1} is included to the world set of \HOLtm{M1} and \HOLtm{M2.frame.rel w1 w2}, we must include \HOLtm{w2} to the world set of \HOLtm{M1} as well. But if \HOLtm{M2.frame.rel w1 w2} and \HOLtm{w2} is included to \HOLtm{M1}, we are allowed not to include \HOLtm{w1} to \HOLtm{M1}. This is because the `$\Diamond$' operator in modal formulas cannot `look back', in the sense that adding extra connections or discard connections \emph{towards} a world $w$ does not change the satisfaction of modal formulas at $w$.
 
Generated submodels do preserve modal satisfaction:
\begin{prop}
{\upshape\holref{\cite[Proposition 2.6]{Blackburn}}{chap2_1}{75}}
%[\cite{Blackburn}{Proposition 2.6},\holref{\texttt{prop_2_6}}{chap2_1}{75}]
\label{3.2}
\begin{holmath}
  \HOLthm[w/n]{chap2_1.prop_2_6}
\end{holmath}
\end{prop} 


\subsection{Bounded morphisms}


Just as in algebra, it is natural to investigate `morphisms' between our structures of interest. 
Here, these structures are the models.
For instance, `homomorphism' is the weakest notion of `structure-preserving map':
\begin{defn}
{\upshape\holref{\cite[Definition 2.7 (Homomorphisms)]{Blackburn}}{chap2_1}{120}}
%[\holref{Homomorphism}{chap2_1}{120}]
A homomorphism from a model \HOLtm{M1} to a model \HOLtm{M2} (notation: \HOLtm{hom M1 f M2}) is a function from the world set of \HOLtm{M1} to the world set of \HOLtm{M2} that preserves relation and valuation.
\begin{holmath}
  \HOLthm[def]{prettyPrinting.pphom_def}
\end{holmath}
\end{defn}

The second clauses only says `propositional letters are preserved', and the last clause only says `relations in the source model are preserved by a homomorphism'. We are allowed to have propositional letters satisfied at the target but not at the source, and we can have relations in the target which are not from a relation in the source. Because of these reasons, we cannot guarantee every world and its image in the target satisfy exactly the same set of modal formulas. Actually, there exists more than one notion of morphisms which gives equivalences, but most of these notions are too strong to be interesting. The only one among these notions that we are interested in here is \emph{bounded morphism}. 


\begin{defn}
{\upshape\holref{\cite[Definition 2.10 (Bounded Morphisms)]{Blackburn}}{chap2_1}{213}}
%[\holref{Bounded morphism}{chap2_1}{213}]
A bounded morphism between two models \HOLtm{M1} and \HOLtm{M2} is a function $f$ between their world sets such that:
\begin{itemize}
\item For every world $w$ of \HOLtm{M1}, it satisfies the same propositional letters as \HOLtm{f w}.
\item If $w,v$ are worlds in \HOLtm{M1} such that \HOLtm{M1.frame.rel w v}, then we have \HOLtm{M2.frame.rel (f w) (f v)} in \HOLtm{M2}.
\item If \HOLtm{w IN M1.frame.world} and we have \HOLtm{M2.frame.rel (f w) v'} for some \HOLtm{v' IN M2.frame.world}, then we can find a world \HOLtm{v} in \HOLtm{M1} such that \HOLtm{M1.frame.rel w v} and \HOLtm{f v = v'}.
\end{itemize}
In HOL:
\begin{holmath}
   \HOLthm[def,M1/M,M2/M']{chap2_1.bounded_mor_def}
\end{holmath}
\end{defn}

We read `\HOLtm{bounded_mor f M1 M2}' as `$f$ is a bounded morphism from \HOLtm{M1} to \HOLtm{M2}'.  From above, the notion of  bounded morphism is a strengthen of homomorphism. For a homomorphism, we only need propositional letters to be preserved, but for bounded morphism, we strengthen the condition on propositional letters to be an `if and only if'. Moreover, we added a `backward condition' on relations. 

Bounded morphism gives modal equivalences, in the following sense:

\begin{prop}
{\upshape\holref{\cite[Proposition 2.14]{Blackburn}}{chap2_1}{227}}
%[\cite{Blackburn}{Proposition 2.14}, \holref{\texttt{prop_2_14}}{chap2_1}{227}]
\label{3.3}
If \HOLtm{f} is a bounded morphism from \HOLtm{M1} to \HOLtm{M2}, then for each modal formula \HOLtm{phi} and each world \HOLtm{w} in \HOLtm{M1}, we have \HOLtm{satis M1 w phi <=> satis M2 (f w) phi}.
\begin{holmath}
  \HOLthm[M1/M,M2/M',phi/form]{chap2_1.prop_2_14}
\end{holmath}
\end{prop}


The above result is very useful. As an application, now we use it to prove the \emph{tree-like property} of the basic modal language. The tree-like property says that for each formula $\phi$ satisfied on some point in some model, there exists a tree-like model such that $\phi$ is satisfied at the root of the tree. As the name indicates, a tree-like model is a model such that its underlying frame is a tree. 
\begin{defn}
{\upshape\holref{\cite[Definition 1.7]{Blackburn}}{chap2_1}{319}}
%[\holref{Tree}{chap2_1}{319}]
The predicate \HOLtm{tree} takes a frame $H$ and a point $r$, and \HOLtm{tree H r} means that $H$ is a tree with root $r$.  A frame \HOLtm{H} is a tree with root $r$ if:
\begin{itemize}
\item We have $r$ is a world in of $H$.
\item For any world \HOLtm{w IN H.world}, we have $r$ is related to $w$ via the reflexive and transitive closure of \HOLtm{H.rel}. 
\item For any world \HOLtm{w IN H.world}, it cannot be linked back to the root $r$ via the reflexive and transitive closure of \HOLtm{H.rel}. 
\item For any world \HOLtm{w IN H.world}, it has a unique predecessor. 
\end{itemize}
In HOL:
\begin{holmath}
   \HOLthm[def,H/S,w/t,w/r0,w0/t0]{chap2_1.tree_def}
\end{holmath}
\end{defn}

In above, for a relation $R$ on terms of type $\alpha$ and an $\alpha$-set $A$, we have \HOLtm{RESTRICT R A a b} for terms $a,b$ of type $\alpha$ if and only if both $a$ and $b$ are in $A$, and \HOLtm{R a b}. We write \HOLtm{R^*} to denote the reflective and transitive closure of the relation \HOLtm{R}. 

Every tree-like model is \emph{rooted}, where rooted models are just submodel generated by a singleton set. As an instance of generated models, a rooted model needs to be sitting in an ambient model. 

\begin{defn}
{\upshape\holref{\cite[Definition 2.5 (Rooted Models)]{Blackburn}}{chap2_1}{120}}
%[\holref{Rooted model}{chap2_1}{380}]
The predicate `\HOLtm{rooted_model}' takes three parameters: The model itself, the root $r$, and the ambient model that it is sitting in. We read `\HOLtm{rooted_model M1 r M2}' as \HOLtm{M1} is a rooted model with root $r$ sitting in the ambient model \HOLtm{M2}. 
\begin{holmath}
  \HOLthm[def,M1/M,M2/M',r/x,width=60]{prettyPrinting.pprooted_model_def}
\end{holmath}
\end{defn}

We now prove the tree-like property of modal formulas:
\begin{prop}
{\upshape\holref{\cite[Proposition 2.15]{Blackburn}}{chap2_1}{818}}
%[\cite{Blackburn}{Proposition 2.15}, \holref{\texttt{prop_2_15_corollary}}{chap2_1}{818}]
\label{3.5}
\begin{holmath}
  \HOLthm[M1/M,M/M',phi/form,r/s,showtypes]{prettyPrinting.ppprop_2_15_corollary}
\end{holmath}
\end{prop}
\begin{proof}
Suppose \HOLtm{satis M1 w phi}. Let \HOLtm{M2} be the rooted model generated by \HOLtm{w}, then \HOLtm{satis M2 w phi} by Proposition \ref{3.2}. To find a tree-like model satisfying \HOLtm{phi}, by Proposition \ref{3.3}, it suffices to prove \HOLtm{M2} is the image of some bounded morphism from some tree-like model \HOLtm{M3} where the root of the tree is mapped to $w$. Then \HOLtm{M3} will be the \HOLtm{M} we want. We construct \HOLtm{M3} as follows: Take the set of worlds to be the finite sequences [$w;u_1;\cdots ;u_n$] such that \HOLtm{M1.frame.rel} $u_i\ u_{i+1}$ for all $i$. Define \HOLtm{M3.frame.rel} $[w;u_1;\cdots ;u_n]\ [w;v_1;\cdots ;v_m]$ iff $m=n+1$, $u_i=v_i$ for $1\le i\le n$, and \HOLtm{M2.frame.rel} $u_n\ v_m$. The valuation is given by $[w;u_1;\cdots;u_n]\in$ \HOLtm{M3.valt p} iff $u_n\in$ \HOLtm{M2.valt p}. Such a model in HOL looks like:


\begin{holmath}
  \HOLthm[def,M2/M,w/x]{chap2_1.bounded_preimage_rooted_def}
\end{holmath}  

Here the functions \HOLtm{HD} and \HOLtm{LAST} give the first and last member of a list, respectively. The function \HOLtm{LENGTH} gives the length of a list. The function \HOLtm{EL} takes a natural number \HOLtm{n} and a list \HOLtm{l}, and gives the $n$-th member of \HOLtm{l}.

The map \HOLtm{LAST} will sends a list [$w;u_1;\cdots ;u_n$] in \HOLtm{M3.frame.world} to its last member $u_n$. We can easily check that \HOLtm{LAST} is a bounded morphism.  Also, the root $[w]$ of \HOLtm{M3} is sent to $w$ in \HOLtm{M2}, as desired.

\end{proof}

\subsection{Bisimulation}

The two approaches to obtain modal equivalences have a common feature: both of them lead to a relation on worlds in models such that related worlds satisfy exactly the same set of propositional letters, and once we can make a transition in one model, we can make a corresponding transition in the other. This observation leads us to the concept of \emph{bisimulation}: 
\begin{defn}
{\upshape\holref{\cite[Definition 2.16 (Bisimulations)]{Blackburn}}{chap2_2}{19}}
%[\holref{Bisimulation}{chap2_2}{19}]
A bisimulation $Z$ between models \HOLtm{M1} and \HOLtm{M2} (notation: \HOLtm{bisim Z M1 M2}) is a relation between their worlds, such that for worlds \HOLtm{w1 IN M1.frame.world} and \HOLtm{w2 IN M2.frame.world} which are related by $Z$, we have:
\begin{itemize}
\item For every propositional letter $p$, it is satisfied at $w_1$ if and only if it is satisfied at $w_2$.
\item If we have a world \HOLtm{v1 IN M1.frame.world} such that $w_1$ is related to $v_1$ by the relation in \HOLtm{M1}, then we can find a world $v_2$ in \HOLtm{M2} such that $v_1$ and $v_2$ are related by $Z$ where $w_2$ is related to $v_2$ in \HOLtm{M2}.
\item If we have a world \HOLtm{v2 IN M2.frame.world} such that $w_2$ is related to $v_2$ by the relation in \HOLtm{M2}, then  we can find a world $v_1$ in \HOLtm{M1} such that $v_1$ and $v_2$ are related by $Z$ where $w_1$ is related to $v_1$ in \HOLtm{M1}.
\end{itemize}
In HOL:
\begin{holmath}
  \HOLthm[def,M1/M,M2/M',w1/w,w2/w',v1/v,v2/v',p/a,width=65]{chap2_2.bisim_def}
\end{holmath}
\end{defn}

When there exists a bisimulation relating two worlds \HOLtm{w IN M.frame.world} and \HOLtm{v IN N.frame.world}, we say $w$ and $v$ are \emph{bisimilar}, and write `\HOLtm{bisim_world M N w v}'.
 Both generated submodels and bounded morphic image give rise to bisimulations:

\begin{prop}
{\upshape\holref{\cite[Proposition 2.19, (iii) and (iv)]{Blackburn}}{chap2_2}{63}}
%[\cite{Blackburn}{Proposition 2.19, (iii) and (iv)}, \holref{\texttt{prop_2_19_iii}}{chap2_2}{63}, \holref{\texttt{prop_2_19_iv}}{chap2_2}{81}]
\begin{holmath}
  \HOLthm[M1/M,M2/M']{chap2_2.prop_2_19_iii}\\[3mm]
 \HOLthm[M1/M,M2/M']{chap2_2.prop_2_19_iv}
\end{holmath}
\end{prop}
\begin{proof}
 The bisimulation relations are given by relating a world in \HOLtm{M1} to its copy in \HOLtm{M2} and relating a world in \HOLtm{M1} to its image in \HOLtm{M2} respectively. 
\end{proof}

Bisimilar worlds are always modal equivalent. 

\begin{thm}
{\upshape\holref{\cite[Theorem 2.20]{Blackburn}}{chap2_2}{124}}
%[\cite{Blackburn}{Theorem 2.20}, \holref{\texttt{thm_2_20}}{chap2_2}{124}]
\label{3.7}
\begin{holmath}
  \HOLthm[M1/M,M2/M',w1/w,w2/w']{chap2_2.thm_2_20}
\end{holmath}
\end{thm}

Now we ask if the converse of the above holds: is that the fact that a modal equivalent worlds are always bisimilar? The answer is no, as we have proved in HOL that:
\begin{prop}
{\upshape\holref{\cite[Example 2.23]{Blackburn}}{chap2_3}{2420}}
%[\cite{Blackburn}{Example 2.23}, \holref{\texttt{example_2_23}}{chap2_3}{2420}]
\label{example}
\begin{holmath}
 \HOLthm{chap2_3.example_2_23}
\end{holmath}
\end{prop}

The models \HOLtm{M} and \HOLtm{N} used in the proof of the theorem above are defined as the picture below, where the arrows denote relations (non-transitive). Both \HOLtm{M} and \HOLtm{N} have infinitely many branches from their roots \HOLtm{w}, \HOLtm{w'} respectively. The difference is that \HOLtm{N} has an infinitely long branch, whereas all the branches in \HOLtm{M} are of finite length. In HOL, the worlds of \HOLtm{M} and \HOLtm{N} are captured using pairs of natural numbers. The world \HOLtm{w IN M.frame.world} and \HOLtm{w' IN N.frame.world} are recorded as the pair \HOLtm{(0,0)}. For a world in \HOLtm{M} or a world in \HOLtm{N} which is the $b$-th point (counted from the root) on a finite branch of length $a$, it is recorded as the pair \HOLtm{(a,b)}. The $n$-th point on the infinite branch in \HOLtm{N} is recorded as the pair \HOLtm{(0,n)}.

Let valuation in \HOLtm{M} and \HOLtm{N} both be such that at every point, there is no propositional letter which is satisfied. 
The worlds \HOLtm{w} and \HOLtm{w'} can be shown to be modal equivalent (using tools which will be introduced in the next section), but they are not bisimilar. Suppose, in order to get a contradiction, that \HOLtm{bisim Z M N} and \HOLtm{Z w w'}, then there exists \HOLtm{v0 IN M.frame.world} such that \HOLtm{Z v0 v0'}, where \HOLtm{v0'} is the first world on the infinite branch in \HOLtm{N} such that \HOLtm{N.frame.rel w' v0'}. The branch that \HOLtm{v0} lies on is finitely long, say, the worlds $w,v_0,\cdots, v_{n}$ are all the worlds on this branch. Then by clause on `forward condition' in the definition of bisimulation, there are worlds $v_1',\cdots,v_{n}'$ on the infinite branch of \HOLtm{N} such that $Z\ v_i \ v_i'$ for each $1\le i\le n$. The world $v_n'$ has a successor $v_{n+1}'$ in \HOLtm{N}, so the backward clause on relation requires the existence of a world in \HOLtm{M} such that $v_n$ is related to. But such a world does not exist since $v_n$ is at the end of the branch it lies on. 

\begin{center}
\begin{tikzpicture}[scale=1.5,baseline=0]
\node [label={right:$w$}] at (0,0) {\Huge.};
%\filldraw[black] (0,0) circle (0.5pt);

\draw[->] (0,0) to (-0.7,0);

\draw[->] (0,0) to (-0.5,-0.5);
\draw[->] (-0.5,-0.5) to (-1,-1);

\draw[->] (0,0) to (-0.4,-0.65);
\draw[->] (-0.4,-0.65 ) to (-0.8,-1.3 );
\draw[->] (-0.8,-1.3) to (-1.2 ,-0.65 * 3 );

\node at (-0.5* 1/2, -1.2) {\Huge...};

\node at (-0.2, -1.8) {\HOLtm{M}};

\end{tikzpicture}
\qquad
\begin{tikzpicture}[scale=1.5,baseline=0]

\node [label={right:$w'$}] at (0,0) {\Huge.};

%\filldraw[black] (0,0) circle (0.5pt) [label={right:$w$}]{};

\draw[->] (0,0) to (-0.7,0);

\draw[->] (0,0) to (-0.5,-0.5);
\draw[->] (-0.5,-0.5) to (-1,-1);

\draw[->] (0,0) to (-0.4,-0.65);
\draw[->] (-0.4,-0.65 ) to (-0.8,-1.3 );
\draw[->] (-0.8,-1.3) to (-1.2 ,-0.65 * 3 );

\node  at (-0.5* 1/2, -1.2) {\Huge...};


\draw[->] (0,0) to (0.5,-0.5);
\draw[->] (0.5,-0.5) to (1,-1 );
\draw[->] (1,-1) to (1.5 ,-1.5 );
\draw[->] (1.5,-1.5) to (2 ,-2 );


\node at (2.2,-2.2) {\Huge.};
\node at (2.3,-2.3) {\Huge.};
\node at (2.4,-2.4) {\Huge.};

\node at (-0.2, -1.8) {\HOLtm{N}};

\end{tikzpicture}
\end{center}

 Nonetheless, the converse of Theorem \ref{3.7} does hold on \emph{image finite} models.
\begin{defn}
{\upshape\holref{\cite[Page 69, image-finite]{Blackburn}}{chap2_2}{158}}
%[\holref{Image finite}{chap2_2}{158}]
 A model \HOLtm{M} is image finite if for every world \HOLtm{w IN M.frame.world}, there are only finitely many worlds in \HOLtm{M} that \HOLtm{w} is related to.
\begin{holmath}
  \HOLthm[def,w/x,v/y]{chap2_2.image_finite_def}
\end{holmath}
\end{defn}

Our main theorem is called Hennessy-Milner theorem:
\begin{thm}
{\upshape\holref{\cite[Theorem 2.24 (Hennessy-Milner Theorem)]{Blackburn}}{chap2_2}{328}}
%[Hennessy-Milner Theorem, \cite{Blackburn}{Theorem 2.24}, \holref{\texttt{thm_2_24}}{chap2_2}{328}]
For image finite models, modal equivalence and bisimulation are indeed the same thing.
\begin{holmath}
  \HOLthm[M1/M,M2/M',w1/w,w2/w',width=70]{chap2_2.thm_2_24}
\end{holmath}
\end{thm}

\begin{proof}
We prove the implication from left to right. The other implication is Theorem \ref{3.7}.  Given that \HOLtm{w1} and \HOLtm{w2} are worlds in \HOLtm{M1} and \HOLtm{M2} which are modal equivalent, we prove the relation $Z$ defined as  \HOLtm[phi/form,v1/n1,v2/n2]{Z n1 n2 <=> (!form. satis M1 n1 form <=> satis M2 n2 form)} is a bisimulation. The only non-trivial thing to check is that assuming \HOLtm{modal_eq M1 M2 v1 v2} and \HOLtm{M1.frame.rel v1 v1'} for some \HOLtm{v1' IN M1.frame.world}, there exists a world \HOLtm{v2' IN M2.frame.world} such that \HOLtm{M2.frame.rel v2 v2'} and \HOLtm{modal_eq M1 M2 v1' v2'}. Suppose such a \HOLtm{v2'} does not exist, we derive a contradiction. Consider the set \HOLtm{S0 = { u' | (u' IN M2.frame.world /\ M2.frame.rel v2 u') \}} of successors of \HOLtm{v2}
, the first claim is that $S_0$ is finite and nonempty. Finiteness comes from the fact that \HOLtm{M2} is image finite. Also, and if $S_0$ is empty, then \HOLtm{BOX FALSE} will be a formula satisfied at \HOLtm{v2} but not at \HOLtm{v1}, contradicting the modal equivalence between \HOLtm{v1} and \HOLtm{v2}. By assumption, for each world  $u'\in S_0$, there is a formula \HOLtm{phi} such that \HOLtm{satis M1 v1' phi} but \HOLtm{¬satis M2 u' phi}. As the set $S$ is finite, the set of such \HOLtm{phi}s is finite. Then we can take the conjunction of such \HOLtm{phi}s to obtain a formula \HOLtm{psi}. Then we will have \HOLtm{satis M1 v1 (DIAM psi)} but \HOLtm{¬satis M1 v2 (DIAM psi)}, contradiction. 
\end{proof}


\section{Finite model property}

In this section, we tell the story about Slogan 2 as stated in the introduction: Modal formulas can only capture local information. That is, if a modal formula is satisfied on an arbitrary model, then it can be satisfied on a finite model, where finite model means a model whose world set is finite. Such a result is called the \emph{finite modal property} of modal logic. There are classically two methods of building finite models for satisfiable modal formulas, namely via filtration and selection. Although we have formalized both of them in HOL, the former is almost a direct translation of the mathematical proof and hence is not interesting from the formalizing aspect. We will only talk about finite model property via selection in this section. 

In this method, to build a finite model of a satisfiable modal formula \HOLtm{phi}, we start with a model that the formula $\phi$ is satisfied, delete worlds from the model and only leave finitely many worlds in it. The intuition behind this approach is that every modal formula can only contain finitely many diamonds, each can `see' one step from the current state. Therefore, each formula can only capture the information of finite depth. To make the notion of `depth' precise, we define the degree of a modal formula, which counts the number of steps that a modal formula can `see', as follows:
\begin{defn}
{\upshape\holref{\cite[Definition 2.28 (Degree)]{Blackburn}}{chap2_3}{24}}
%[\holref{Degree of a modal formula}{chap2_3}{24}]
\begin{holmath}
\begin{array}{rcl}
  \HOLthm[aligneddef,phi/form]{chap2_3.DEG_def}
\end{array}
\end{holmath}
\end{defn}

In above, the function \HOLtm{MAX} takes two natural numbers and gives the greater one. 

The crucial fact we need about the degree of formulas is that for every finite $\alpha$-set \HOLtm{Φ} and every natural number $n$, there are only finitely many non-equivalent modal formulas of degree up to $n$ which only use the propositional letters in \HOLtm{Φ}. In the textbook that we are following, the authors prove this fact basically `by observation', but the proof is long and tedious to formalize (more than 1500 lines in HOL). We will not show the proof, but only show the statement that we have proved in HOL:

\begin{lm}
{\upshape\holref{\cite[Proposition 2.29]{Blackburn}}{chap2_3}{989}}
%[\cite{Blackburn}{Proposition 2.29}, \holref{\texttt{prop_2_29_strengthen}}{chap2_3}{989}]
\label{4.1}
Let \HOLtm{Φ} be a finite $\alpha$-set and $\beta$ be an infinite type. For each natural number $n$, if we partition the set of $\alpha$-modal formulas using only propositional letters in \HOLtm{Φ} of degree up to $n$ using the equivalence relation `being equivalent on $(\alpha,\beta)$-models (models of $\alpha$-modal formulas with $\beta$-world sets)', then we get finitely many equivalence class. 
\begin{holmath}
  \HOLthm[phi/f,Φ/s]{prettyPrinting.ppprop_2_29_strengthen}
\end{holmath}
\end{lm}

Here \HOLtm[phi/f,Φ/s]{partition (equiv0 (μ:'b itself)) {f| DEG f <= n /\ prop_letters f ⊆ s\}} is the set of equivalence classes obtained by partitioning the set \HOLtm[phi/f]{{f | DEG f <= n /\ prop_letters f ⊆ Φ\}} by the equivalence relation $\equiv_{(:\beta)}$. We require the assumption that the universe of $\beta$ is infinite since we used Proposition \ref{2.2} when proving the proposition above.


Recall in the last section, we have seen that a bisimulation gives rise to modal equivalence. Modal equivalence means `satisfying exactly the same formulas', but when we are building a finite model for a formula $\phi$, we do not care about the satisfaction of the formulas of degree above \HOLtm{DEG phi}, since such formula cannot affect the satisfaction of $\phi$. Therefore, we just need some sort of relations such that related worlds satisfy the same modal formulas up to some degree $n$. The notion of `finite approximation of bisimulation', which is called \emph{$n$-bisimulation}, is used to describe such relations. Let \HOLtm[w1/w,M1/M]{w IN M.frame.world} and \HOLtm[w2/w',M2/M']{w' IN M'.frame.world}, $w_1$ and $w_2$ are $n$-bisimilar if there exists a sequence of relations $Z_n\subseteq \cdots\subseteq Z_0$ such that:
\begin{itemize}
  \item $w_1$ and $w_2$ are related by $Z_n$
  \item If \HOLtm{v1 IN M1.frame.world} and \HOLtm{v2 IN M2.frame.world} are related by $Z_0$, then $v_1$ and $v_2$ satisfy the same propositional letters.
  \item For $0\le i\le n-1$, if \HOLtm{v1 IN M1.frame.world} and \HOLtm{v2 IN M2.frame.world} are related by $Z_{i+1}$ and we have \HOLtm{M1.frame.rel v1 u1} for \HOLtm{u1 IN M1.frame.world}, then there exists \HOLtm{u2 IN M2.frame.world} such that \HOLtm{M2.frame.rel v2 u2} with $u_1$ and $u_2$ related by $Z_i$.
  \item For $0\le i\le n-1$, if \HOLtm{v1 IN M1.frame.world} and \HOLtm{v2 IN M2.frame.world} are related by $Z_{i+1}$ and we have \HOLtm{M2.frame.rel v2 u2} for \HOLtm{u2 IN M2.frame.world}, then there exists \HOLtm{u1 IN M1.frame.world} such that \HOLtm{M1.frame.rel v1 u1} with $u_1$ and $u_2$ related by $Z_i$.
\end{itemize}
Such a sequence of $Z_i$ is a family of relations indexed by natural numbers from $0$ to $n$. When the world set of \HOLtm{M1} has type $\beta$ and the world set of \HOLtm{M2} has type $\gamma$, we encode such a family using a function \HOLtm{Zn} of type \HOLty{:num -> β -> γ -> bool}. For each natural number \HOLtm{i <= n}, applying \HOLtm{Zn} on $i$ gives us a relation \HOLtm{Zn i} between terms of type $\beta$ and $\gamma$. In other words, the relation \HOLtm{Zn i} is the relation $Z_i$ in the usual mathematical notation, and \HOLtm{nbisim M1 M2 Zn n w1 w2} means $w_1$ and $w_2$ are worlds in \HOLtm{M1} and \HOLtm{M2} respectively which are $n$-bisimilar via the family of relations given by \HOLtm{Zn}, as shown below. 
\begin{defn}
{\upshape\holref{\cite[Definition 2.30 ($n$-Bisimulations)]{Blackburn}}{chap2_3}{1059}}
%[\holref{$n$-bisimulation}{chap2_3}{1059}]
\begin{holmath} \HOLthm[def,M1/M,M2/M',w1/w,w2/w',v1/v,v2/v',u1/u,u2/u',Zn/f,width=60]{chap2_3.nbisim_def}
\end{holmath} 
\end{defn}

We will use functions to capture indexed families throughout this thesis. For a family $(A_j)_{j\in J}$ indexed by a set $J$, where the $A_j$'s are all of the same type, we will capture it using a function \HOLtm{An} in HOL such that \HOLtm{An j} is $A_j$. Each function which is used to capture indexing will be decorated with `${}^{\sf s}$' at its right upper corner. 

Note that for models \HOLtm{M} and \HOLtm{N}, and worlds \HOLtm{w1 IN M1.frame.world} and \HOLtm{w2 IN M2.frame.world}, even if for each natural number $n$, we have an $n$-bisimulation between \HOLtm{w1} and \HOLtm{w2}, it does not imply that \HOLtm{w1} and \HOLtm{w2} are bisimilar. For the models \HOLtm{M} and \HOLtm{N} used in \ref{example}, the worlds $w$ and $w'$ are $n$-bisimilar for all $n$. Given a natural number $n$, an $n$-bisimulation relation \HOLtm{Zn} can be given as: for each $m\le n$, \HOLtm{Zn m} is the relation that relating the points in \HOLtm{M} on the branches of length no more than \HOLtm{n-m} to the copy of itself in \HOLtm{N}. In addition, for each $k$, the $k$-th point on the branch in \HOLtm{M} of length $n$ is related to the $k$-th point on the infinite branch in \HOLtm{N}. However, as we have already proved before, the worlds $w$ and $w'$ are not bisimilar.

By induction, we can prove if two worlds are $n$-bisimilar, then they agree on all the modal formulas up to degree $n$. The statement in HOL looks like:

\begin{prop}
{\upshape\holref{\cite[Proposition 2.31, one direction]{Blackburn}}{chap2_3}{1126}}
%[\holref{\texttt{prop_2_31_half1}}{chap2_3}{1126}]
\begin{holmath}
 \HOLthm[Zn/f]{prettyPrinting.ppprop_2_31_half1}
\end{holmath}
\end{prop}



When we use set theory as foundation, if there are only finitely many propositional letters, then it is true that two worlds in two models agree on all the modal formulas  with degree up to $n$ if and only if there exists an $n$-bisimulation between them. However, we are using simple type theory as foundation in HOL, so this `if and only if' statement in HOL looks a bit different. The thing we can prove in  HOL is that: 
Let \HOLtm{Δ} be a finite $\alpha$-set. If we restrict our scope to the set \HOLtm{Σ} of $\alpha$-formulas that only uses propositional letters in \HOLtm{Δ}. Let \HOLtm{M1} be an $(\alpha,\beta)$-model and \HOLtm{M2} be a $(\alpha,\gamma)$-model, where both $\beta$ and $\gamma$ has infinite universe. For each \HOLtm{w1 IN M1.frame.world} and \HOLtm{w2 IN M2.frame.world}, they agree on formulas in \HOLtm{Σ} up to degree $n$ if and only if there is an $n$-bisimulation relating them. For the proof of this theorem: One direction is by the theorem shown above. The other direction is similar to the proof of Hennessy-Milner theorem, using the $n$-bisimulation relation \HOLtm{Zn} defined by \HOLtm{Zn m w1 w2 <=>(!(phi: 'a form). DEG phi <= m ==> (satis M w1 phi <=> satis M' w2 phi))} for each $m\le n$. 

We also want a concept that measures the depth of a model. As `depth' is measuring the distance of from a fixed point to another given point, to talk about the depth of a world \HOLtm{w IN M.frame.world}, we need \HOLtm{M} to be naturally equipped with a base point. Hence the `height' of a world only makes sense for rooted models. To tell HOL about this definition, we start by defining \HOLtm{heightLE} as an inductive relation:


\begin{defn}
{\upshape\holref{\cite[Definition 2.32]{Blackburn}}{chap2_3}{1429}}
%[\holref{Upper bound of height}{chap2_3}{1429}]
\[
\begin{array}{c}
  \HOLthm[rule,conj1,r/x]{chap2_3.heightLE_rules}\\[4mm]
  \HOLthm[rule,conj2,r/x,width=120]{chap2_3.heightLE_rules}\\
\end{array}
\]
\end{defn}

Recall how we defined a rooted model: when we write \HOLtm{rooted_model M r M'}, we mean `\HOLtm{M} is a rooted model generated by the world $r$ in the ambient model \HOLtm{M'}'. As \HOLtm{heightLE} is designed to only make sense for rooted models, we encode the information about the rootedness of the model we are talking about into this definition. Therefore, we read \HOLtm{heightLE M r M' w n} as `for the rooted model \HOLtm{M} with root $r$ in \HOLtm{M'}, the distance from the world \HOLtm{w} to the root $r$ is less than or equal to $n$', and we will always have an assumption on rootedness of \HOLtm{M} whence this definition is used. The above rules mean:
\begin{itemize}

\item The height of the root for each rooted model is less or equal to every natural number. 
\item For a world \HOLtm{v} of \HOLtm{M}, if there exists a world \HOLtm{w} of \HOLtm{M} such that $w$ is related to $v$ in \HOLtm{M}, then if the height of \HOLtm{w} is no more than $n$, the height of \HOLtm{v} is no more than \HOLtm{n + 1}.
\end{itemize}

We define the actual height of a world $w$ to be the smallest natural number $n$ such that \HOLtm{heightLE M r M' w n}. The height of a model is the maximum height of its worlds. 


We are particularly interested in heights of tree-like models. 

\begin{lm}[\holref{\texttt{tree_height_rel_lemma}}{chap2_3}{1673}]
When \HOLtm{M} is tree-like, if \HOLtm{w IN M.frame.world} has height $n$, then every world \HOLtm{v IN M.frame.world} such that \HOLtm{M.frame.rel w v} will have height $n+1$.
\begin{holmath}
  \HOLthm[r/x,width=65]{prettyPrinting.pptree_height_rel_lemma}
\end{holmath}
\end{lm}


The restriction of a rooted model \HOLtm{M} to the height $k$ is the submodel consisting of all the worlds in \HOLtm{M} of height up to $k$.

\begin{defn}
{\upshape\holref{\cite[Definition 2.32 (Restriction)]{Blackburn}}{chap2_3}{1442}}
%[\holref{Restriction a model up to some height}{chap2_3}{1442}]
We define a function \HOLtm{hrestriction} that takes a rooted model \HOLtm{M}, its root $r$, the an ambient model \HOLtm{M'} that \HOLtm{M} is sitting in, a natural number $k$, and give the model obtained by restricting \HOLtm{M} to the height \HOLtm{k}.
\begin{holmath} \HOLthm[def,p/phi,w1/n1,w2/n2,k/n,r/x,width=60]{prettyPrinting.pphrestriction_def}
\end{holmath}
\end{defn}

A restriction of a tree-like model is always a tree-like model. Moreover, restriction of every rooted model gives rise of $n$-bisimulation. 
\begin{lm}{\upshape\holref{\cite[Lemma 2.33]{Blackburn}}{chap2_3}{1530}}\label{4.3}
If we restrict a rooted model \HOLtm{M} to height $k$, then a world $w$ in the restricted model is  $k-$\HOLtm{height M r M' w}-bisimilar to itself in the original model. 
\begin{holmath}
  \HOLthm[r/x,Zn/f]{prettyPrinting.pplemma_2_33}
\end{holmath}
\end{lm}
\begin{proof}
The $k-$\HOLtm{height M r M' w}-bisimulation is given by \HOLtm{Zn} which is defined as \HOLtm{Zn n} relates a world $w_1$ in the restricted model \HOLtm{hrestriction M r M' k} to a world $w_2$ in \HOLtm{M} iff \HOLtm{w1 = w2} and the height of $w_1$ is no more than $k-n$. 
\end{proof}

Now we can start building a finite model via selection:
\begin{thm}
{\upshape\holref{\cite[Theorem 2.34]{Blackburn}}{chap2_3}{1827}}
%[\cite{Blackburn}{Theorem 2.34}, \holref{\texttt{thm_2_34}}{chap2_3}{1827}]
\begin{holmath}
  \HOLthm[M/FM]{chap2_3.thm_2_34}
\end{holmath}
\end{thm}

\begin{proof}
Suppose \HOLtm{satis M1 w1 phi} where \HOLtm{M1} is an $(\alpha,\beta)$-model and $\phi$ has degree $k$. By Proposition \ref{3.5}, there exists a tree-like $(\HOLty{:α},\HOLty{:β list})$-model \HOLtm{M2} with \HOLtm{phi} satisfied at its root \HOLtm{w2}.
%A world in \HOLtm{M2} will have type $\beta\ list$, so all the lemmas proved before with an infinite-universe assumption applies for every model with its world set a subset of \HOLtm{M2.frame.world} .
 Define \HOLtm{M}${}_{3}:=$ \HOLtm{hrestriction M2 w2 M2 k} to be the restriction of \HOLtm{M2} to height $k$, then \HOLtm{M3} is rooted and we have a $k$-bisimulation \HOLtm{Zn} such that \HOLtm{nbisim M3 M2 Zn k w2 w2} by Lemma \ref{4.3}, hence \HOLtm{satis M3 w2 phi}.  We can discard all the propositional letters in \HOLtm{M3} which does not occur in $\phi$ and obtain the model \HOLtm{M3'}, which looks like:
\begin{holmath}
\HOLtm{M3' =
   <| frame := <| world := M3.frame.world ;
                    rel := M3.frame.rel ;
                |>;
       valt := \p v. if (p IN (prop_letters phi)) then (M3.valt p v) else F |>}.
\end{holmath}
By Proposition \ref{2.1}, if a propositional letter does not appear in $\phi$, then it has no effect on the satisfaction of $\phi$. Hence we still have \HOLtm{satis M3' w2 phi}. We will select a finite model inductively from \HOLtm{M3'}.

Let \HOLtm{Φ} denote the set of propositional letters used by $\phi$, so \HOLtm{Φ} is finite. By Lemma \ref{4.1}, there are only finitely many non-equivalent formulas of degree less or equal to $k$ which only use propositional letters in \HOLtm{Φ} (where equivalence is judged with respect to $(\HOLty{:α},\HOLty{:β list})$-models). 
In other words, the set  \HOLtm[psi/f]{Δ={f | DEG f <= k /\ prop_letters f ⊆ Φ\}}$/\equiv_{(:\HOLty{:β list})}$ is finite. 
We care about the elements in \HOLtm{Δ} which are equivalence classes of formulas starting with a $\Diamond$. For such equivalence classes, taking the intersection with the set \HOLtm[psi/phi,psi0/phi0]{Γ = {phi | ?phi0. phi = DIAM phi0\}} does not give the empty set. 
Take the image of \HOLtm{Δ} under the function \HOLtm{\s. s ∩ Γ} and delete the empty set from the image.
We obtain a set \HOLtm{Σ} of sets of formulas, where for each set \HOLtm{A IN Σ}, $A$ consists of equivalent formulas of degree less or equal to $k$, only use propositional letters in \HOLtm{Φ}, and start with a diamond. 
For each \HOLtm{A IN Σ}, we choose a representative using the choice function \HOLtm{CHOICE}, and collect these representatives into the set  
\HOLtm{R= ({ CHOICE (A ∩ Γ) | A ∈ Δ\} DIFF {∅\})}.  
The set $R$ is finite as it is the image of a function over a finite set. 

We will construct sets $S_0,\cdots, S_k$ of worlds in \HOLtm{M3'}, where the worlds in $S_n$ have height $n$. Start with $S_0:=\{w_2\}$, and inductively, assume $S_0,\cdots, S_n$ has been defined, construct $S_{n+1}$ as follows: Consider an element in $v\in S_n$, for each $\Diamond \phi\in R$ such that \HOLtm{satis M3' w2 (DIAM phi)}, pick a world \HOLtm{u IN M3'.frame.world} such that \HOLtm{M3'.frame.rel v u} and \HOLtm{satis M3' u phi}. Do the same thing to all the $v\in S_n$, then take $S_{n+1}$ as the set of all the such $u$'s which are selected in this way. The inductive definition of these $S$'s are encoded in HOL as a primitive recursive function \HOLtm{Sn} such that for each $i\le k$, \HOLtm{Sn i} will be our $S_i$. By induction on $i$, we can prove each $S_i$ is finite, so the set $W_4 := \bigcup_{i\le k} S_i$ is finite. The resultant finite model we select is: 
\begin{holmath}
\HOLtm{M4 = <| frame:= <| world := W4;
                                  rel := M3.frame.rel |>;
		        valt:= M3'.valt |>}.
\end{holmath}
To prove \HOLtm{satis M4 w2 phi}, it suffices to give a $k$-bisimulation between \HOLtm{M4} and \HOLtm{M3'} relating $w_2$ to itself. The $k$-bisimulation \HOLtm{Zn} is given as for each $n\le k$, \HOLtm{Zn n} is the relation such that for \HOLtm{a1 IN M4.frame.world} and \HOLtm{a2 IN M3.frame.world}, we have \HOLtm{Zn n a1 a2} iff:
\begin{itemize}
\item The worlds $a_1$ and $a_2$ have the same height, which is no more than $k-n$.
\item If a formula \HOLtm{phi} only contains the propositional letters in \HOLtm{Φ} and \HOLtm{DEG phi <= n}, it is satisfied at \HOLtm{a1} if and only if it is satisfied at \HOLtm{a2}. 
\end{itemize}

The rest of the proof amounts to checking the above indeed gives a $k$-bisimulation. The proof is again an analogue to the proof of Hennessy-Milner theorem.
\end{proof}


As we took a detour through Proposition \ref{3.5}, this construction of the finite model changes the type of model. If we start with an $(\alpha,\beta)$-model, then the finite model we build by selection will be a $(\HOLty{:α},\HOLty{:β list})$-model. 

\chapter{Standard Translation}

As claimed by Slogan 3 in the introduction, modal logic is not an isolated formal system. In this chapter, we connect modal logic and first-order logic together using \emph{standard translation}. 

%the wider logical world by discussing its relation to first-order logic by defining . We will start by introducing concepts about first-order logic, and then we define standard translation as our bridge between modal logic and first-order logic.


For a model \HOLtm{M}, the relation \HOLtm{M.frame.rel} is a binary predicate on worlds in \HOLtm{M}. For each propositional letter $p$, the valuation \HOLtm{M.valt} gives a way of associating to $p$ a unary predicate on the worlds in \HOLtm{M}, called $P_p$. Explicitly, the predicate $P_p$ is defined by $P_p \ w$ if and only if \HOLtm{M.valt p w}. We will see a modal model can also be viewed as a model for a \emph{first-order language}. A first-order language is determined by a set of predicate symbols and a set of function symbols. Given a first-order language $L$ such that $L_F$ is the set of its function symbols and $L_P$ is its set of predicate symbols, a first-order formula is called an $L$-formula if it only contains function symbols in $L_F$ and predicate symbols in $L_P$. In our case, the first-order language that we can interpret using a modal model is the one such that the set of function symbols is empty, and the set of predicate symbols consists of a binary one corresponds to the relation on a modal model, and the unary ones of the form $\underline{P_p}$, where $p$ is a propositional letter and $P_p$ is the predicate which is associated to $p$. This language that we are interested in is called $\mathcal L_{\tau}^1$. A model \HOLtm{M} of a first-order language consists of three pieces of information: a domain, where the variable letters in first-order formulas will be sent to, for each $n$-ary function symbol, an actual function that takes an $n$-tuple of elements in \HOLtm{M} and gives an element in \HOLtm{M}, and for each $n$-ary predicate symbol, an actual predicate that takes an $n$-tuple of elements in \HOLtm{M} and give a boolean value, either \HOLtm{T} or \HOLtm{F}. In HOL, the variable symbols, the function symbols, and the predicate symbols, are all encoded as natural numbers, hence a first-order model looks like:


\begin{defn}[From~\cite{Harrison}, \jh{First-order model}{folModels}{10}]
\begin{holmath}
  \HOLthm{folModels.datatype_model}
\end{holmath}
\end{defn}

As we can see, an $\alpha$-first-order model means a first-order model with an $\alpha$-set as its domain. For an $\alpha$-first-order model \HOLtm{M} and  each function symbol $f$, where $f$ is a natural number, \HOLtm{M.Fun f} is the actual function which is assigned $f$, and for each predicate symbol $p$, \HOLtm{M.Pred p} is the actual predicate which is assigned $p$. 



According to the above discussion, if a first-order formula $\phi$ is purely a combination of some variable letters, which are to be interpreted as worlds in \HOLtm{M}, the binary predicate symbol which is to be interpreted as \HOLtm{M.frame.rel}, and some unary predicate symbols of the form $\underline{P_p}$, using the first-order connectives, then the information contained in a $(\HOLty{:num},\HOLty{:β})$-modal model \HOLtm{M}, where $\beta$ is an arbitrary type, is enough to interpret the formula $\phi$. But to formally interpret a first-order formula, we need to formally convert a modal model into a first-order model. The domain of the resulting model is the world set of \HOLtm{M}. As we are not going to use the resulting model to interpret formulas with function symbols, we do not really need any interesting information about the function symbol, hence we send every natural number to the constant function at an arbitrary point in \HOLtm{M.frame.world} that we pick. We fix the symbol of the binary predicate given by \HOLtm{M.frame.rel} to be $0$, and for each propositional letter $p$, we just use $p$ itself to be the symbol of the predicate $P_p$ associated to $p$ (that is, in our formalization, we use $p$ itself as the symbol $\underline{P_p}$ in the discussion above). For a modal model \HOLtm{M}, the function that converts it to a first-order model is called \HOLtm{mm2folm}. In HOL:

\begin{defn}[\holref{Conversion from a modal model to a first-order model}{chap2_4revised}{19}]
\begin{holmath}
  \HOLthm[def,w1/w,w3/v10,w4/v11,l/args]{chap2_4revised.mm2folm_def}
\end{holmath}
\end{defn}


 Conversely, we can view a $\beta$-first-order model \HOLtm{M} as a $(\HOLty{:num},\HOLty{:β})$-modal model. Given a first-order model, the relation on the modal model we get is given by the binary predicate with symbol $0$. The valuations of a propositional letter $p$ is given by the unary predicate in \HOLtm{M} with symbol $p$. The function converting a first-order model into a modal model is \HOLtm{folm2mm}. 

\begin{defn}[\holref{Conversion from a first-order model into a modal model}{chap2_6}{40}]
\begin{holmath}
  \HOLthm[def,M/FM]{chap2_6.folm2mm_def}
\end{holmath}
\end{defn}

Whereas the conversion from a modal model into a first-order model preserves all the information of the original model, the conversion from a general first-order model into a modal model will omit a lot of information: we will lose all the functions, all except for one binary predicates and all higher-arity predicates. 



Now we can spell out how  we formally interpret a first-order formula in the language $\mathcal L_{\tau}^1$. To do this, let us just spell out how to interpret a first-order formula on a first-order model in general. In HOL, a \emph{term} of first-order logic is defined inductively. A first-order term is  either a variable symbol standing alone, which is of form \HOLtm{fV x}, where $x$ is a variable symbol, or a function symbol applied on a list of terms, which is written as \HOLtm{Fn f l}, where $f$ is the natural number serving as a function symbol, and $l$ is a list of terms. A term of first-order logic should not be confused with a term of a type (a reader should better consider them as unrelated, for the sake of reading this thesis). A first-order formula is defined inductively using four primitive connectives:

\begin{defn}[From~\cite{Harrison}, \jh{First-order formulas}{folLang}{137}]
The primitive logical connectives we are using here are: the falsity \HOLtm{fFALSE}, a predicate symbol applied on a list of variables, implication \HOLtm{IMP} (which will be written as the infix ${}^{\sf f}{\to}$ from now on), and the universal quantification.
\begin{holmath}
  \HOLthm{folLang.datatype_form}
\end{holmath}
\end{defn}

In above, as we use natural numbers for the predicate symbols, function symbols and variable symbols in first-order formulas, the current construction can only capture countable first-order languages. The non-primitive connectives are defined as:


\begin{defn}[From~\cite{Harrison}, \jh{Non-primitive first-order connectives}{folLang}{144}]
\begin{holmath}
\begin{array}{rcl}
  \HOLthm[aligneddef,phi/f]{folLang.Not_def}\\
  \HOLthm[aligneddef]{folLang.True_def}\\
  \HOLthm[aligneddef,phi1/p,phi2/q]{folLang.Or_def}\\
  \HOLthm[aligneddef,phi1/p,phi2/q]{chap2_4revised.fAND_def}\\
  \HOLthm[aligneddef,phi/p]{folLang.Exists_def}
\end{array}
\end{holmath}
\end{defn}

A quantified variable is called a bounded variable, otherwise, it is called free. For instance, the $1$ in \HOLtm{Pred 4 [fV 1; fV 2]} is free, whereas the $1$ in \HOLtm{FALL 1 (Pred 4 [fV 1; fV 2])} is bounded. For a first-order formula \HOLtm{phi}, we write \HOLtm{FV phi} for the set of all its free variables and \HOLtm{BV phi} for the set of all its bounded variables. We also have functions \HOLtm{form_functions} and \HOLtm{form_predicates} which give the set of function and predicate symbols of a first-order formula, respectively. 
For a function symbol denoted by $f$, if it is applied on a list of terms of length $n$, then it will be recorded as the tuple $(f,n)$. For example, we have \HOLtm{form_functions (Pred 1 [Fn 2 [fV 1; fV 2]; Fn 2 []]) = {(2,2); (2,0)\}} and \HOLtm{form_functions (Pred 1 [Fn 0 []; Fn 1 []]) = {(0,0); (1,0)\}}. Similarly, a predicate symbol denoted by natural number $p$ followed by a list of length $n$ is recorded as a pair $(p,n)$. Hence both the function \HOLtm{form_functions} and \HOLtm{form_predicates} take a formula and give a set of pairs of natural numbers. The language $\mathcal L_{\tau}^1$, as introduced before, is defined as a predicate, where `\HOLtm{L1tau phi}' reads `the formula \HOLtm{phi} is in the language $\mathcal L_{\tau}^1$', as follows:

\begin{defn}
{\upshape\holref{\cite[Definition 2.44 (The Language $\mathcal L_{\tau}^1$)]{Blackburn}}{chap2_6}{29}}
%[\holref{The language $\mathcal L_{\tau}^1$}{chap2_6}{29}]
\begin{holmath}
  \HOLthm[def,width=65]{chap2_6.L1tau_def}
\end{holmath}
\end{defn}

Given a first-order model \HOLtm{M}, we interpret formulas or terms by assigning each variable symbol an element in \HOLtm{M.Dom}. As we are using natural numbers as variable symbols, such an assignment is a function that takes a natural number. We are only interested in the case when a function does send each natural number to an element in \HOLtm{M.Dom}, such a function is called a \emph{valuation} of \HOLtm{M}. We write \HOLtm{valuation M σ} in this case, and read it as `\HOLtm{σ} is a valuation of the model \HOLtm{M}'. 

Interpretation of terms and formulas are given as \HOLtm{termval} and \HOLtm{feval}. 
If we give the function \HOLtm{termval} a model \HOLtm{M}, a valuation \HOLtm{σ} and a first-order term $t$, it will give us the element of the domain of \HOLtm{M} that $t$ is interpreted as. If we give the function \HOLtm{feval} a model \HOLtm{M}, a valuation \HOLtm{σ} and a first-order formula $\phi$, it will give us the truth value of $\phi$ in \HOLtm{M} under the valuation \HOLtm{σ}. When $\phi$ is true in \HOLtm{M} under \HOLtm{σ}, we write \HOLtm{feval M σ phi}. We write \HOLtm{feq (:α) phi1 phi2} to mean the first-order formulas \HOLtm{phi1} and \HOLtm{phi2} are equivalent on $\alpha$-first-order models, where equivalence between first-order formulas is defined similarly as that of modal formulas. 

If we want to use a first-model \HOLtm{M} to interpret a first-order formula \HOLtm{phi}, the first thing to make sure is that the actual functions assigned to the function symbols appear in \HOLtm{phi} does not send a list of elements in \HOLtm{M} out of the domain of \HOLtm{M}. Therefore, a theorem about interpreting a formula \HOLtm{phi} in \HOLtm{M} should start with an assumption 
\begin{holmath}
\HOLtm{!f n l. ((f,n) IN (form_functions phi) /\ LENGTH l = n) ==> (M.Fun f l) IN M.Dom}.
\end{holmath}
But we may want to use the same model to interpret formulas with various function symbols and do not want such an assumption everywhere.  Hence for our convenience, unless we have no function symbols at all, we will always assume the models \HOLtm{M} we are working with satisfies \HOLtm{(M.Fun f l) IN M.Dom} for every function symbol $f$ and list \HOLtm{l}. For such a model \HOLtm{M}, we write \HOLtm{wffm M}, meaning `\HOLtm{M} is a well-formed first-order model'. 

At noted before, the functions \HOLtm{mm2folm} and \HOLtm{folm2mm} are not inverses. However, we have:

\begin{prop}[\holref{\texttt{L1tau_mm2folm_folm2mm_comm_feval}}{chap2_6}{976}]\label{5.3}
An $\mathcal L_{\tau}^1$ formula is satisfied in \HOLtm{M} under $\sigma$ if and only if it is satisfied under $\sigma$ in the model we obtain by firstly converting \HOLtm{M} to a modal model, and then back to a first-order model.
\begin{holmath}
  \HOLthm[ϕ/f,σ/v]{prettyPrinting.ppL1tau_mm2folm_folm2mm_comm_feval}
\end{holmath}
\end{prop}

Also we note:

\begin{prop}[From~\cite{Harrison}, \jh{\texttt{holds_valuation}}{folModels}{82}]
For a fixed model, the truth value of a first-order formula only depends on what a valuation sends its free variable to.
\begin{holmath}
  \HOLthm[phi/p,σ1/v1,σ2/v2,v/x]{folModels.holds_valuation}
\end{holmath}
\end{prop}

Therefore, although a valuation of \HOLtm{M} assigns every natural number an element in \HOLtm{M.Dom}, what it effectively does is to only control where the free variables in a formula go to. The advantage of using a valuation instead of assigning free variables values one by one is that a valuation can simultaneously control every number of free variables.

With the setup on basics about first-order logic and how it interacts with modal logic, let us build intuition on how modal formulas correspond to first-order formulas. The first thing to note is that as every symbol in a first-order formula is represented by a natural number, without get cumbersome and complicated procedure involved, we can only translate \HOLty{:num}-modal formulas into first-order formulas. Observe that unlike modal formulas which atomic formulas are propositional letters standing alone, even the atomic first-order formulas (except \HOLtm{fFALSE}) have variable symbols. Hence to translate a modal formula into a first-order formula, we must introduce some variables as well. For a model \HOLtm{M}, it is natural to regard each modal formula as a predicate to be evaluated at worlds of \HOLtm{M}, such that this predicate is true at a world $w$ if and only if the formula is satisfied at $w$. Hence to translate a modal formula into a first-order formula, the only natural thing to do is to get just one variable involved, and this variable will be later assigned to some state in some model when we interpret the translated formula. 

Hence for the function \HOLtm{ST} which translates a modal formula to a first-order formula, the first parameter it takes is a variable symbol $x$, which is represented by a natural number, that we introduce to mark the world we are looking at, as discussed above. The second parameter is the \HOLty{:num}-modal formula which we want to translate. 


\begin{defn}
{\upshape\holref{\cite[Definition 2.45 (Standard Translation)]{Blackburn}}{chap2_4revised}{58}}
%[\holref{Standard Translation}{chap2_4revised}{58}]
Here `\HOLtm{ST x phi}' reads the standard translation of the modal formula $\phi$ at $x$. The translation is defined as:
\begin{itemize}
\item A propositional letter is translated into the unary predicate symbol represented by $p$ applied on the variable $x$. Here \HOLtm{fP p (fV x)} is the abbreviation of ${{}^{\sf f}\sf Pred} \  p \ [{}^{\sf f}{\sf VAR} \ x ]$.
\item The falsity in modal formula is translated into the falsity in first-order formula.

\item Inductively, the negation of a modal formula $\phi$ is translated into the first-order negation of the standard translation of $\phi$.

\item The disjunction of two modal formulas $\phi$ and $\psi$ is translated into the first-order disjunction of the standard translation of $\phi$ and the standard translation of $\psi$. 

\item A modal formula $\Diamond \phi$ is translated to the existential quantifier applied on the variable symbol $x+1$ and the first-order formula saying `\HOLtm{fV x} is related to \HOLtm{fV (x + 1)} and \HOLtm{ST (x + 1) phi}'. Here \HOLtm{fR (fV x) (fV (x + 1))} is the abbreviation of ${{}^{\sf f}\sf Pred} \  0 \ [({}^{\sf f}{\sf VAR} \ x ) ; ({}^{\sf f}{\sf VAR} \ (x + 1) ) ]$ (Recall that we have fixed $0$ as the predicate symbol which corresponds to relation on the modal model). That is:
% weird phrasing. (***)
\end{itemize}
\begin{holmath}
\begin{array}{rcl}
  \HOLthm[aligneddef]{chap2_4revised.ST_def}
\end{array}
\end{holmath}

\end{defn}

For the last line, according to the semantic interpretation of the `\HOLtm{DIAM phi}', which is `there exists a world related to the current state where \HOLtm{phi} is satisfied', we translate \HOLtm{DIAM phi} into the existential formula. To make sure that we use a fresh variable symbol that is not the same as the variable $x$ which is marking the current state, we use $x+1$ as our new variable symbol, hence the standard translation of \HOLtm{DIAM phi} at $x$ says exactly the same thing as how we interpret it in a modal model. 

Some syntactic properties of standard translation are immediate to prove. For instance:
\begin{itemize}
\item Every first-order formula obtained by standard translation is $\mathcal L_{\tau}^1$.
\item Every first-order formula obtained by standard translation has at most one free variable.

\item The negation of a standard translation is a standard translation.

\item Conjunctions and disjunctions of standard translations are equivalent to standard translations of big conjunction/disjunction formulas.
\end{itemize}

 On the other hand, standard translations have interesting semantic behavior as well. Their semantic features give a first-order reformulation of modal satisfaction. 
\begin{prop}
{\upshape\reff{\cite[Theorem 2.47 (i)]{Blackburn}}{chap2_4revised}{307}}
%[\cite{Blackburn}{Proposition 2.41 (i)}, \holref{\texttt{prop_2_47_i}}{chap2_4revised}{76}]
\label{5.4}
A modal formula \HOLtm{phi} is satisfied at a world in a modal model \HOLtm{M} iff its standard translation \HOLtm{ST x phi} is satisfied in \HOLtm{M} viewed as a first-order model when the free variable $x$ is assigned this world.
\begin{holmath}
  \HOLthm{chap2_4revised.prop_2_47_i0}
\end{holmath}
\end{prop} 

There is a result corresponds to the above using \HOLtm{folm2mm}.


\begin{prop}[\reff{\texttt{prop_2_47_i0'}}{chap2_7}{491}]\label{5.5}
The standard translation of the formula \HOLtm{phi} using variable symbol $x$ is true in a first-order model \HOLtm{M} under the valuation \HOLtm{σ} iff \HOLtm{phi} is satisfied at \HOLtm{σ x} in \HOLtm{M} viewed as a modal model.
\begin{holmath}
  \HOLthm{chap2_7.prop_2_47_i0'}
\end{holmath}
\end{prop}

As an interesting consequence of the `equivalence' between a modal formula and its standard translation, we can prove formulas obtained by standard translation are \emph{invariant under bisimulation}. 

\begin{defn}
{\upshape\holref{\cite[Definition 2.67 (Invariant for Bisimulations)]{Blackburn}}{chap2_6}{1135}}
%[\holref{Invariant for bisimulation}{chap2_6}{1135}]
An $\mathcal L_{\tau}^1$ formula $\phi$ with at most one free variable $x$ is invariant for bisimulations if for all models \HOLtm{M} and \HOLtm{N} with \HOLtm{w IN M.frame.world} and \HOLtm{v IN N.frame.world}, if there exists a bisimulation relation between \HOLtm{M} and \HOLtm{N} relating $w$ and $v$, then $\phi$ holds at \HOLtm{w} if and only if it holds at \HOLtm{v} when both \HOLtm{M} and \HOLtm{N} are viewed as first-order models.
\begin{holmath}
  \HOLthm[def,x/n,width=65]{chap2_6.invar4bisim_def'}
\end{holmath}
\end{defn}

The predicate \HOLtm{invar4bisim} takes four parameters, the first one is the name of the only free variable in \HOLtm{phi} and the last one is the formula itself. For the second and third one. Recall the issue we met when defining equivalence of modal formulas as in Chapter 2, it needs to take a type as a parameter since we cannot have type variable which only appears on the right-hand side but not on the left-hand side. For the same reason, here we need to tell HOL explicitly about the type of the world set of the models which can serve as \HOLtm{M} and \HOLtm{N} in our definition. Although it is possible to prove theorems for different types $\alpha$ and $\beta$ in the above definition, we will only consider the case that $\alpha$ and $\beta$ are the same when proving things afterwards. 

\begin{prop}
{\upshape\final{\cite[Theorem 2.68, easy direction]{Blackburn}}{chap2_6}{1909}}
%[\cite{Blackburn}{Theorem 2.68}, easy direction,  \holref{\texttt{thm_2_68_half2'}}{chap2_6}{1899}]
\label{5.6}
Every $\mathcal L_{\tau}^1$-formula with only one variable which is equivalent to a standard translation is invariant for bisimulation. 
\begin{holmath}
  \HOLthm[δ/a]{chap2_6.feq_thm_2_68_half2}
\end{holmath}
\end{prop}
\begin{proof}
By Theorem \ref{3.7} and Proposition \ref{5.5}.
\end{proof}

In fact, using set theory as the foundation, we can prove that every formula which is invariant under bisimulation arises as the standard translation of a modal formula, so an $\mathcal L_{\tau}^1$ formula with at most one free variable $x$ is invariant under bisimulation precisely when it is equivalent to the standard translation of some modal formula using the variable symbol $x$. We can translate the set-theoretic proof into a simple type-theoretic proof. But the proof of the other direction requires more advanced tools, and its statement does not look the same as its mathematical statement as in set theory in HOL. This is because of the lack of expressiveness of simple type theory. We will leave the other direction of the proof to the next chapter.



\chapter{Modal Saturation via Ultrafilter Extensions}

In Chapter 3, we have seen bisimilarity implies modal equivalence, but only proved the converse for image finite models. In this chapter, we are interested in another particular class of models, called \emph{M-saturated} models, where modal equivalent worlds are bisimilar. We will introduce an operation, called the \emph{ultrafilter extension}, on models, which creates M-saturated models. With the results about M-saturated models, we will conclude this chapter by proving an elegant result about bisimulation: If we have a modal equivalence between worlds $w,v$ in two models \HOLtm{M} and \HOLtm{N}, although it may not be the case that $w$ and $v$ are bisimilar, we can find a bisimulation between the ultrafilter extension of \HOLtm{M} and the ultrafilter extension of \HOLtm{N}.

%and in the second half of the chapter, we introduce the \emph{ultrafilter extension} construction on models. 
%We will conclude this section by proving an elegant result about bisimulation: If we have a modal equivalence between worlds $w,v$ in two models \HOLtm{M} and \HOLtm{N}, although it may not be the case that $w$ and $v$ are bisimilar, we can find a bisimulation between the ultrafilter extension of \HOLtm{M} and the ultrafilter extension of \HOLtm{N}.


Let us explain what is meant by `M-saturated' first. Being M-saturated is a sort of compactness property, which says `finite satisfaction implies satisfaction'. We need to give three definitions consecutively to finally get M-saturation to be formally defined in HOL. 

\begin{defn}
{\upshape\holref{\cite[Definition 2.53 (Satisfiable)]{Blackburn}}{chap2_5}{43}}
%[\holref{Satisfiable}{chap2_5}{43}]
 A set of formulas \HOLtm{Σ} is called satisfiable in a set $X$ of worlds in a model \HOLtm{M} if there exists an element in $X$ such that all the formulas in \HOLtm{Σ} are satisfied. 
\begin{holmath}
  \HOLthm[def,phi/form,w/x]{chap2_5.satisfiable_in_def}
\end{holmath}
\end{defn}

\begin{defn}
{\upshape\holref{\cite[Definition 2.53 (Finitely Satisfiable)]{Blackburn}}{chap2_5}{47}}
%[\holref{Finitely satisfiable}{chap2_5}{47}]
A set of formulas \HOLtm{Σ} is called finitely satisfiable if every finite subset of \HOLtm{Σ} is satisfiable. 
\begin{holmath}
  \HOLthm[def]{chap2_5.fin_satisfiable_in_def}
\end{holmath}
\end{defn}

\begin{defn}
{\upshape\holref{\cite[Definition 2.53 (M-saturation)]{Blackburn}}{chap2_5}{50}}
%[\holref{m-saturated}{chap2_5}{50}]
A model \HOLtm{M} is called M-saturated if for every \HOLtm{w IN M.frame.world}, if a set \HOLtm{Σ} is finitely satisfiable in the set of  successors of $w$, then it is satisfiable in the set of successors of $w$.
\begin{holmath}
\HOLthm[def]{prettyPrinting.ppM_sat_def}
\end{holmath}
\end{defn}

For M-saturated models, bisimilarity implies modal equivalence. 

\begin{prop}
{\upshape\holref{\cite[Proposition 2.54]{Blackburn}}{chap2_5}{136}}
%[\cite{Blackburn}{Proposition 2.54}, \holref{\texttt{prop_2_54_DIST_TYPE}}{chap2_5}{136}]
\label{5.7}
For two worlds $w_1$ and $w_2$ living in M-saturated models \HOLtm{M1} and \HOLtm{M2} respectively, if $w_1$ and $w_2$ are modal equivalent, then they are bisimilar.
\begin{holmath}
  \HOLthm[M1/M,M2/M',w1/w,w2/w',width=60]{prettyPrinting.ppprop_2_54_DIST_TYPE}
\end{holmath}
\end{prop}

\begin{proof}
Let \HOLtm{M1} and \HOLtm{M2} be models. In fact, they can be $(\alpha,\beta),(\alpha,\gamma)$-models respectively, where $\beta$ and $\gamma$ are not required to be the same. Under the assumptions, the bisimulation relation $Z$ we need is for \HOLtm{a IN M1.frame.world} and \HOLtm{b IN M2.frame.world}, we have \HOLtm{Z a b <=> (!phi. satis M1 a phi <=> satis M2 b phi)}. To prove this relation is indeed a bisimulation, the only non-trivial clause to check is that for worlds $w_1,v_1$ of \HOLtm{M1} and world $w_2$ of \HOLtm{M2} such that $w_1$ and $w_2$ are modal equivalent, we can find a world $v_2$ of \HOLtm{M2} such that \HOLtm{M2.frame.rel w2 v2} and $v_1$ and $v_2$ are modal equivalent.

Under the assumptions above, let \HOLtm{Σ} denote the set of formulas satisfied by $v_1$, we will find a successor \HOLtm{w} of $w_2$ where each formula in \HOLtm{Σ} is satisfied, then the world \HOLtm{w} will be modal equivalent to \HOLtm{v1}. Indeed, if we find such a \HOLtm{w}, then for a formula \HOLtm{psi} which is not satisfied at \HOLtm{v1}, we will have \HOLtm{(NOT psi) IN Σ} and hence \HOLtm{NOT psi} will be satisfied at \HOLtm{w}, which implies \HOLtm{psi} is not satisfied at \HOLtm{w}. 

 As \HOLtm{M2} is M-saturated, it suffices to prove each finite subset \HOLtm{Δ ⊆ Σ} is satisfied in some successor of $w_2$. Take such a \HOLtm{Δ}, then it is satisfied at $v_1$ by its definition. As \HOLtm{Δ} is finite, we can conjunct all its elements to obtain a formula $\psi$. We have \HOLtm{satis M1 v1 psi}, and therefore \HOLtm{satis M1 w1 (DIAM psi)}. By modal equivalence of $w_1$ and $w_2$, we then get \HOLtm{satis M2 w2 (DIAM psi)}, so there exists a successor $w'$ of $w_2$ that satisfies $\psi$. Hence $w'$ will satisfy every formula in \HOLtm{Δ}.

\end{proof}

Since M-saturated models are nice, here is a natural question: How can we get such models? In the rest of this chapter, we will see the fact the \emph{ultrafilter extension} of every model is M-saturated. In order to talk about ultrafilter extensions, we wrote a theory about ultrafilters in HOL. Instead of showing the whole theory here, we will just show what we need for proving the theorems we are interested in. 
%I am a dividing line -----------------------------------

As its name suggests, an ultrafilter is a special kind of filter. 


\begin{defn}
{\upshape\holref{\cite[Definition A.12 (Filters)]{Blackburn}}{ultrafilter}{18}}
%[\holref{Filter}{ultrafilter}{18}]
 Given a non-empty set $J$, a set $L$ which is a subset of the power set of $J$ (denoted as \HOLtm{POW J} in HOL) is called  filter if it contains $J$ itself, is closed under binary intersection, and is closed upward. 
\begin{holmath}
  \HOLthm[def,L/FLT,J/W,width=60]{ultrafilter.filter_def}
\end{holmath}
\end{defn}
By induction, closure under binary intersection implies closure under every finite intersection.

The simplest example of a filter is the power set \HOLtm{POW J} itself. By upward closure, if a filter on $J$ contains the empty set, then the filter must be the whole power set \HOLtm{POW} $J$. A filter which is not a power set is called a \emph{proper filter}. 

For a set $J$ and an element $w\in J$, the filter generated by \HOLtm{{w\}} is the set of subsets of $J$ that contains $w$, it is trivial to check it is indeed a filter. Such a filter is called a \emph{principal filter}. In HOL, we define a function that takes an element $w\in J$ and a set $J$, and give the principal filter generated by $w$, which is denoted as \HOLtm{principle_UF w J}. Actually, principal filters are the simplest examples of \emph{ultrafilters}. 
\begin{defn}
{\upshape\holref{\cite[Definition A.12 (Ultrafilters)]{Blackburn}}{ultrafilter}{34}}
%[\holref{Ultrafilter}{ultrafilter}{34}]
 An ultrafilter on a set $J$ is a proper filter $U$ such that for every $X\subseteq J$, either $X$ or its complement $J\setminus X$ is in $U$, but not both.
\begin{holmath}
  \HOLthm[def,J/W,width=65]{ultrafilter.ultrafilter_def}
\end{holmath}
\end{defn}

There are two results about ultrafilter which will be used here, the standard proofs of both of them can be found in Chapter 7 of \cite{Jech}.
The first one is the \emph{ultrafilter theorem}.
\begin{thm}
{\upshape\holref{\cite[Fact A.14, first half]{Blackburn}}{ultrafilter}{361}}
%[\holref{\texttt{ultrafilter_theorem}}{ultrafilter}{361}]
\label{5.11}
Every proper filter is contained in an ultrafilter. 
\begin{holmath}
  \HOLthm[L/f,J/w]{ultrafilter.ultrafilter_theorem}
\end{holmath}
\end{thm}

The other one is a corollary of the ultrafilter theorem. This corollary says that for every subset of \HOLtm{POW J} which has \emph{finite intersection property}, it can be extended to an ultrafilter on $J$. In HOL, the definition of finite intersection property is given as:
\begin{defn}
{\upshape\holref{\cite[Definition A.13 (Finite Intersection Property)]{Blackburn}}{ultrafilter}{179}}
%[\holref{Finite intersection property}{ultrafilter}{179}]
 A subset $A$ of \HOLtm{POW J} has finite intersection property if once we take the intersection of a finite, nonempty family in $A$, the resultant set is nonempty. We read `\HOLtm{FIP A J}' as `$A$ is a set of subsets of $J$ with finite intersection property'.
\begin{holmath}
  \HOLthm[J/W,A/S,B/S',width=65]{ultrafilter.FIP_def}
\end{holmath}
\end{defn}

Note that finite intersection property is a property of subsets of power sets. Therefore, the predicate \HOLtm{FIP} defined above takes two parameters: a set of subsets of $J$, and an ambient set $J$. Every proper filter has finite intersection property. 

And the corollary of ultrafilter theorem that we will need is stated as:

\begin{prop}
{\upshape\holref{\cite[Fact A.14, second half]{Blackburn}}{ultrafilter}{417}}
%[\holref{\texttt{ultrafilter_theorem_corollary}}{ultrafilter}{417}]
\label{5.12}
For every set $A$ of subsets of a non-empty set $J$ with finite intersection property, there exists an ultrafilter on $J$ which contains $A$.
\begin{holmath}
  \HOLthm[J/W,A/s,U/u]{ultrafilter.ultrafilter_theorem_corollary}
\end{holmath}
\end{prop}

The proof of both ultrafilter theorem and its corollary are not technical from the formalization aspect. So we have omitted their proof. 

%(long long long dividing line- --------------------------)


We can now launch on the construction of the ultrafilter extension of a model. For a model \HOLtm{M}, the world set of the ultrafilter extension of \HOLtm{M} is simply the set of ultrafilters on the world set of \HOLtm{M}, whereas the relation defined on the set of ultrafilters require more explanation. 

Fix a model \HOLtm{M} and a subset $X$ of its world set, we can consider two set of worlds determined by $X$: 

\begin{defn}
{\upshape\holref{\cite[Definition 2.55 (`Can See' and `Only See')]{Blackburn}}{chap2_5}{189}}
%[\holref{`Can see'}{chap2_5}{189} and \holref{`Only see'}{chap2_5}{192}]
Given a model \HOLtm{M} and a set \HOLtm{X} of worlds of \HOLtm{M}, we define:

\begin{itemize}
\item The set of worlds that `can see' $X$ (notation: \HOLtm{can_see M X}) is the set of worlds $w$ of \HOLtm{M} such that there exists some \HOLtm{v IN X} such that \HOLtm{M.frame.rel w v}.

\item The set of worlds that `only see' $X$ (notation: \HOLtm{only_see M X}) is the set of worlds $w$ of \HOLtm{M} such that once we have \HOLtm{M.frame.rel w v} for some world \HOLtm{v IN M.frame.world}, we must have \HOLtm{v IN X}.
\end{itemize}
In HOL:
\begin{holmath}
  \HOLthm[def,v/x]{chap2_5.can_see_def}\\[3mm]
  \HOLthm[def,v/x]{chap2_5.only_see_def}
\end{holmath}
\end{defn}

By definition of satisfaction, for every model formula \HOLtm{phi}, the worlds satisfying \HOLtm{DIAM phi} are exactly the ones that can see a world where \HOLtm{phi} is satisfied, and the worlds that satisfy \HOLtm{BOX phi} are exactly the ones that only see the worlds where \HOLtm{phi} is satisfied. 


 The concept `can see' and `only see' are dual to each other.


\begin{prop}
{\upshape\holref{\cite[Proposition 2.56]{Blackburn}}{chap2_5}{207}}
%[Duality between \holref{`can see'}{chap2_5}{213} and \holref{`only see'}{chap2_5}{207}]
\label{5.16}
A world that can see a world in $X$ is precisely a world that does not only see worlds that are not in $X$. Similarly, a world that can only see worlds in $X$ is precisely a world which does not see worlds which are not in $X$. 
\begin{holmath}
  \HOLthm{chap2_5.can_only_dual}\\[3mm]
  \HOLthm{chap2_5.only_can_dual}
\end{holmath}
\end{prop}

A world can see some world in the union of $X$ and $Y$ if and only if it can see a world in $X$ or a world in $Y$, hence ${\mathfrak M}_{\Diamond}$ distributes over union. Dually, a world only sees the worlds in the intersection of $X$ and $Y$ if and only if it can only see worlds in $X$ and worlds in $Y$, therefore, ${\mathfrak M}_{\Diamond}^{\delta}$ distributes over intersections.


\begin{prop}[\holref{\texttt{can_see_UNION}}{chap2_5}{611}, \holref{\texttt{only_see_INTER}}{chap2_5}{273}]\label{5.17}
\begin{holmath}
  \HOLthm{prettyPrinting.ppcan_see_UNION}\\[3mm]
  \HOLthm{chap2_5.only_see_INTER}
\end{holmath}
\end{prop}


Return to the discussion about the definition of relation on the ultrafilter extension of \HOLtm{M}. We define:

\begin{defn}
{\upshape\holref{\cite[Proposition 2.57 (Relation of Ultrafilter Extension)]{Blackburn}}{chap2_5}{221}}
%[\holref{Relation used in ultrafilter extension}{chap2_5}{221}]
Two ultrafilters $u,v$ on \HOLtm{M} are related in the ultrafilter extension of \HOLtm{M} if for every $X\in v$, the set of worlds that can see $X$ is in $u$. 
\begin{holmath}
  \HOLthm[def,width=65]{chap2_5.UE_rel_def}
\end{holmath}
\end{defn}

 By the duality between `can see' and `only see', this relation has a reformulation:

\begin{prop}
{\upshape\holref{\cite[Exercise 2.5.5]{Blackburn}}{chap2_5}{237}}
%[\cite{Blackburn}{Exercise 2.5.5}, \holref{\texttt{exercise_2_5_5}}{chap2_5}{237}]
\label{5.18}
Two ultrafilters $u$ and $v$ on \HOLtm{M.frame.world} are related if and only if for every subset $Y$ of \HOLtm{M.frame.world}, if the set of worlds of \HOLtm{M} that it can only see $Y$ is in $u$, then $Y$ is in $v$.
\begin{holmath}
  \HOLthm[width=65]{prettyPrinting.ppexercise_2_5_5}
\end{holmath}
\end{prop}

\begin{proof}
Suppose \HOLtm{UE_rel M u v} and pick a set $Y$ of worlds such that \HOLtm{(only_see M Y) IN u}, we will prove $Y\in v$. We have \HOLtm{M.frame.world DIFF can_see M (M.frame.world DIFF Y) = only_see M Y} by Proposition \ref{5.16}, so \HOLtm{M.frame.world DIFF can_see M (M.frame.world DIFF Y) IN u}. As $u$ is an ultrafilter, this implies \HOLtm{(can_see M (M.frame.world DIFF Y)) ∉ u}.  By definition of \HOLtm{UE_rel M} and the assumption \HOLtm{UE_rel M u v}, this implies \HOLtm{(M.frame.world DIFF Y) ∉ v}. Hence \HOLtm{Y IN v} as $v$ is an ultrafilter.  The other direction is similar.


\end{proof}

In order to define the ultrafilter extension model, the only remaining issue is to define the valuation. We define a propositional letter $p$ to be satisfied at an ultrafilter $v$ if and only if the set of worlds in \HOLtm{M} which satisfies $p$ is in $v$. Hence the full definition of ultrafilter extension is:

\begin{defn}
{\upshape\holref{\cite[Definition 2.57 (Ultrafilter Extension)]{Blackburn}}{chap2_5}{267}}
%[\holref{Ultrafilter extension}{chap2_5}{267}]
The ultrafilter extension is defined as a function that takes a model and gives the extended model. We denote the ultrafilter extension of \HOLtm{M} by \HOLtm{UE M}.
\begin{holmath}
  \HOLthm[def]{prettyPrinting.UE'_def}
\end{holmath}
\end{defn}
The ultrafilter extension also changes the type of the input model, namely, it changes the type of worlds from $\beta$ to \HOLty{:(β -> bool) -> bool}. Ultrafilter extension is indeed an extension, in the sense that \HOLtm{M} is embedded in \HOLtm{UE M} as a submodel by the function sending \HOLtm{w IN M.frame.world} to the principal ultrafilter \HOLtm{principle_UF w M.frame.world} generated by $w$. In general, this embedding does not necessarily give a generated submodel, nevertheless, we have an invariance result for this embedding:
\begin{prop}
{\upshape\holref{\cite[Proposition 2.59 (ii)]{Blackburn}}{chap2_5}{483}}
%[\cite{Blackburn}{Proposition 2.59} (ii),  \holref{\texttt{prop_2_59_ii}}{chap2_5}{483}]
\label{5.19}
For every model \HOLtm{M} and every world \HOLtm{w} of \HOLtm{M}, \HOLtm{w} is modal equivalent to the principal filter generated by \HOLtm{w}, which is a world in the ultrafilter extension of \HOLtm{M}.
\begin{holmath}
  \HOLthm{chap2_5.prop_2_59_ii}
\end{holmath}
\end{prop}
This is actually a special case of the following proposition, where $u$ is taken as \HOLtm{principle_UF w M.frame.world}. The proposition below captures the idea that ultrafilters are used to describe the sense of `most'. More explicitly, for an ultrafilter $U$ on a set $J$, we can regard $U$ as the set of subsets of $J$ which can be regarded as `most of' the elements in $J$. From this viewpoint, the closure property under intersection can be interpreted as `if two subsets of $J$ both contain most of the elements in $J$, then their intersection also contains most of  the elements in $J$'. The upward closure property can be regarded as `if a subset $S$ of $J$ contains most of the  elements in $J$, then every superset of $S$ also contains most of the elements in $J$'. Finally, if a subset of $J$ is regarded as `most of the elements in $J$', then we are regarding its complement as `a small part of the elements in $J$', so its complement cannot also be in the ultrafilter. Given this intuition, the proposition below says that a formula $\phi$ is satisfied in an ultrafilter $u$ on \HOLtm{M.frame.world} iff $\phi$ is satisfied at most of the worlds in \HOLtm{M}, where the sense of `most' is measured by $u$, as described above. 
\begin{prop}
{\upshape\holref{\cite[Proposition 2.59 (i)]{Blackburn}}{chap2_5}{316}}
%[\cite{Blackburn}{Proposition 2.59} (i), \holref{\texttt{prop_2_59_i}}{chap2_5}{316}]
\label{5.20}
A formula \HOLtm{phi} is satisfied at an ultrafilter $u$ in the ultrafilter extension of \HOLtm{M} if and only if in the unextended model, the set of worlds in \HOLtm{M} satisfying \HOLtm{phi} is in \HOLtm{u}. 
\begin{holmath}
  \HOLthm[width=60]{chap2_5.prop_2_59_i}
\end{holmath}
\end{prop}
\begin{proof}
By induction on \HOLtm{phi}. Three cases are straightforward. The diamond case requires some manipulation using Proposition \ref{5.18}, Proposition \ref{5.17} (2) and Proposition \ref{5.12}. 

\end{proof}

The above proposition leads to a proof of M-saturatedness of ultrafilter extensions.
\begin{prop}
{\upshape\holref{\cite[Proposition 2.61]{Blackburn}}{chap2_5}{504}}
%[\cite{Blackburn}{Proposition 2.61}, \holref{\texttt{prop_2_61}}{chap2_5}{504}]
\label{5.21}
The ultrafilter extension of each model is M-saturated. 
\begin{holmath}
  \HOLthm{chap2_5.prop_2_61}
\end{holmath}
\end{prop}
\begin{proof}
Suppose \HOLtm{Σ} is a set of formulas which is finitely satisfiable in the set of successors of a world \HOLtm{u IN (UE M).frame.world}, we need to find a world \HOLtm{u' IN (UE M).frame.world} such that \HOLtm{UE_rel M u u'} and \HOLtm{satis (UE M) u' phi} for all \HOLtm{phi IN Σ}. By Proposition \ref{5.18} and Proposition \ref{5.20}, it amounts to find an ultrafilter $u'$ on \HOLtm{M.frame.world} such that \HOLtm{{Y | (only_see M Y) IN u\} ⊆ u'} and \HOLtm{{w | w IN M.frame.world /\ satis M w phi\} IN u'} for all \HOLtm{phi IN Σ}.

Consider the set \HOLtm{Δ}
\begin{holmath}
\HOLtm{{{w | w IN M.frame.world /\ !phi.phi IN s ==> satis M w phi\}| FINITE s /\ s ⊆ Σ\} ∪ {Y | (only_see M Y) IN u /\ Y ⊆ M.frame.world\}},
\end{holmath}
 we check \HOLtm{Δ} has the finite intersection property. The only nontrivial thing to check is that for $a$ in the first set of the union and $b$ in the second set of the union, we have $a\cap b\ne\emptyset$.

Suppose $s \subseteq\Sigma$ is finite, and $b$ is a set of worlds in \HOLtm{M} such that \HOLtm{(only_see M b) IN u}, we show \HOLtm{{w | w IN M.frame.world /\ !phi. phi IN s ==> satis M w phi\} ∩ b <> {\}}. Recall \HOLtm{Σ} is finitely satisfiable in the set of successors of $u$, we have a world $u''$ such that \HOLtm{UE_rel M u u''} and \HOLtm{satis (UE M) u'' phi} for all $\phi \in s$, in other worlds, \HOLtm{{w | w IN M.frame.world /\ satis M w phi\} IN u''} for all $\phi\in s$. Then as $s$ is finite, \HOLtm{{w | w IN M.frame.world /\ !phi.phi IN s ==> satis M w phi\}} is a big intersection of finitely many sets in $u''$, and hence is in $u''$. By Proposition \ref{5.18} again, \HOLtm{UE_rel M u u''} gives \HOLtm{{Y | (only_see M Y) IN u /\ Y ⊆ M.frame.world\} ⊆ u''}, so $b\in u''$ as well. As two elements in $u''$ has a nonempty intersection, we are done.

Hence by Proposition \ref{5.12}, there exists an ultrafilter $u'$ contains \HOLtm{Δ} is routine to check $u'$ is what we want.
\end{proof}

Finally, we arrive at the characterization of modal equivalence as bisimilarity in the ultrafilter extensions:
\begin{thm}
{\upshape\holref{\cite[Proposition 2.62]{Blackburn}}{chap2_5}{579}}
Given two models \HOLtm{M1} and \HOLtm{M2} with \HOLtm{w1 IN M1.frame.world} and \HOLtm{w2 IN M2.frame.world}, \HOLtm{w1} and \HOLtm{w2} are modal equivalent if and only if the principal filters generated by \HOLtm{w1} in the ultrafilter extension of \HOLtm{M1} and the principal filter generated by \HOLtm{w2} in the ultrafilter extension of \HOLtm{M2} are bisimilar. 
\begin{holmath}
  \HOLthm[w1/w,w2/w',M1/M,M2/M',width=50]{chap2_5.thm_2_62}
\end{holmath}
\end{thm}
\begin{proof}Bisimulation implies modal equivalence by Theorem \ref{3.7}. For the reverse direction, if \HOLtm{w1 IN M1.frame.world} and \HOLtm{w2 IN M2.frame.world} are modal equivalent, then \HOLtm{(principle_UF w1 M1.frame.world) IN (UE M1).frame.world} is modal equivalent to \HOLtm{(principle_UF w2 M2.frame.world) IN (UE M2).frame.world} by Proposition \ref{5.19}. As \HOLtm{UE M1} and \HOLtm{UE M2} are M-saturated by Proposition \ref{5.21}, the result follows by Proposition \ref{5.7}. 
\end{proof}


\chapter{Two Characterizing Results}


In Chapter 4, we presented the definition of `invariant for bisimulation', and mentioned that if we work with set theory, then we can prove that a first-order formula with  no more than one free variable is invariant for bisimulation if and only if it is equivalent to the standard translation of some modal formula. We have translated one direction of the set-theoretic proof of this result there. In the first section of this chapter, we will translate the other half of the proof into HOL, and explain why we cannot get the double implication when working with simple type theory.  In the second section, we translate from set theory to simple type theory the proof of a theorem saying a modal formula is \emph{preserved under simulation} if and only if it is \emph{positive existential}.
% which is similar to the result we prove about being invariant for bisimulations, which says a modal formula is \emph{preserved under simulation} if and only if it is \emph{positive existential}. 
The two new terminologies are to be introduced in the second section of this chapter.



\section{The `modal' fragment of $\mathcal L_{\tau}^1$ formulas}

In Chapter 4, we introduced the standard translation and proved that every modal formula is `equivalent to' its standard translation. We also mentioned that the standard translation of every modal formula is $\mathcal L_{\tau}^1$ and has at most one free variable. However, it is not the fact that every $\mathcal L_{\tau}^1$ formula with at most one free variable is equivalent to the standard translation of a modal formula. For instance, the first-order formula saying `there exists a state that is related to the current state' can never be a standard translation. In HOL:
\begin{prop}[\rref{\texttt{non_ST_exists}}{chap2_4revised}{386}]
The formula \HOLtm{fEXISTS 2 (fR (fV 2) (fV 1))} is not a standard translation.
\begin{holmath}
 \HOLthm[width=60]{chap2_4revised.non_ST_exists'}
\end{holmath}
\end{prop}
 Here comes a question: which $\mathcal L_{\tau}^1$-formulas with no more than one free variable are equivalent to a standard translation? We have already given a short answer that works for set-theoretic foundation: such formulas are exactly the ones which are invariant under bisimulation. Also, we have proved one direction of this result as Proposition \ref{5.6}. In this section, we devote to proving in HOL the other direction, saying `every formula which is invariant under bisimulation is equivalent to a standard translation'. The tools that this proof will use are centered on saturated models, which we are introducing now.

Given a first-order model \HOLtm{M} with no information about interpretation of function symbols, we can expand the model \HOLtm{M} by adding the interpretation of some function symbols. For our proof in this section, we are only interested in adding the interpretation of finitely many nullary function symbols, which are also called \emph{constants}.  



\begin{defn}
{\upshape\holref{\cite[Definition A.9 (Expansion)]{Blackburn}}{lemma2_73}{65}}
%[\holref{Expansion}{lemma2_73}{65}]
We write \HOLtm{expansion M A M' f} to mean that \HOLtm{M'} is the result of adding each element in $A$ to \HOLtm{M} as a new constant. Further, the function $f$ is a bijection between $\{0,\cdots,n-1\}$ and $A$, which is assumed to be finite, so that each nullary function symbol $c$ will be interpreted as \HOLtm{f c} in \HOLtm{M'}.
%In HOL, the function \HOLtm{expansion} is defined as a predicate, where the model \HOLtm{M} is the model we start with and \HOLtm{M'} is the resultant model after adding a finite number of constants, each corresponds to an element in \HOLtm{A}, which is a world in \HOLtm{M}.
\begin{holmath}
  \HOLthm[def,l/args,c/n,width=65]{lemma2_73.expansion_def}
\end{holmath}
\end{defn}
In above, the function \HOLtm{CARD} gives the cardinality of a finite set. For each natural number $n$, we have \HOLtm{count n} $ = \{0,\cdots n-1\}$. And \HOLtm{BIJ f A B} reads `$f$ is a bijection from $A$ to $B$'.

If \HOLtm{M}, \HOLtm{A} and \HOLtm{f} are all fixed, then the model \HOLtm{M'} such that \HOLtm{expansion M A M' f} is unique. We define the expansion as a predicate instead of a function only for the convenience of manipulating the theorem prover when we prove theorems about expansion. 

%The expanded model has the same domain and the same interpretation of predicate symbols as the unexpanded one, it is only the interpretation of function symbols that makes them different. 
The only difference between a model and an expansion of it is the interpretation of function symbols. 
Before the expansion, as there is no information contained in \HOLtm{M} about function symbols, once a first-order term  contains some function symbol, this term will not make sense to \HOLtm{M}, hence \HOLtm{M} can be used to interpret no formula with a function symbol. If $A$ has cardinality $m$, where $m$ is a natural number, after the expansion, every term \HOLtm{Fn c []} for $0\le c< m$ makes sense to \HOLtm{M'}, and is evaluated to the element \HOLtm{f c}. Therefore, the formulas which only use these function symbols can be interpreted in the expanded model. The role of \HOLtm{f} here is to assign each $0\le c < m$ an element of $A$, where the term \HOLtm{Fn c []} will be evaluated to. 


A set \HOLtm{Σ} of first-order formulas is called \emph{consistent} with a model \HOLtm{M} if for every finite subset \HOLtm{Σ0 ⊆ Σ}, there exists a valuation of \HOLtm{M} such that all elements of \HOLtm{Σ0} are satisfied, in this case, we write \HOLtm{consistent M Σ}. A set \HOLtm{Γ} of first-order formula is an $x$-\emph{type} if for each formula in \HOLtm{Γ}, the only free variable that may contain is $x$. In this case, we write `\HOLtm{ftype x Γ}' in HOL. If \HOLtm{Γ} is an $x$-type, when evaluating formulas in \HOLtm{Γ}, the valuations will only control where the only free variable $x$ goes to. We say \HOLtm{Γ} is \emph{realized} in \HOLtm{M} if there is an element $w$ in the domain of \HOLtm{M} such that \HOLtm{feval M (\v.w) phi} for all \HOLtm{phi IN Γ}. That is, all the elements in \HOLtm{Γ} are satisfied at the point $w$. In this case, we write `\HOLtm{frealizes M x Γ}' in HOL. 




\begin{defn}
{\upshape\holref{\cite[Definition 2.63 (Countably Saturated)]{Blackburn}}{lemma2_73}{77}}
%[\holref{$n$-saturated}{lemma2_73}{77} and \holref{countably saturated}{lemma2_73}{90}]
Let \HOLtm{M} be a model and \HOLtm{n} be a natural number. 
%
For every \HOLtm{A ⊆ M.Dom}, with $|A|<n$ and for every $f:{\mathbb N}\to $ \HOLtm{M.Dom}, there is a unique \HOLtm{M'} such that  \HOLtm{expansion M A M' f}.
%
If every such \HOLtm{M'} realizes every $x$-type \HOLtm{Γ}, then we say \HOLtm{M} is $n$-saturated. In HOL:
\begin{holmath}
  \HOLthm[def,Γ/G]{prettyPrinting.ppn_saturated_def}\\[3mm]
  \HOLthm[def]{lemma2_73.countably_saturated_def}
\end{holmath}
\end{defn}

As an easy example, we have:

\begin{prop}{\upshape\reff{\cite[Example 2.64 (iii)]{Blackburn}}{chap2_6}{1879}}
Let \HOLtm{M} be the model with domain $\mathbb N$, no functions, and the only predicates are the unary ones, such that the predicate with symbol $n$ is interpreted as `greater than $n$'. Then \HOLtm{M} is not countably saturated. 
\begin{holmath}
  \HOLthm{chap2_6.example_2_64_iii}
\end{holmath}
\end{prop}
\begin{proof}
Consider the set \HOLtm{Γ} of all formulas of form \HOLtm{Pred n [fV a]}, where $n$ is a natural number. The model \HOLtm{M} is the expansion of itself by adding an  empty set of constants. The set \HOLtm{Γ} is consistent with \HOLtm{M}: it is clearly an $a$-type, and every finite subset of \HOLtm{Γ} is realized in \HOLtm{M} since there the set of all natural number is not bounded above under the usual ordering. But \HOLtm{Γ} is not realized at any natural number, since there is no natural number that is greater than every natural number. 
\end{proof}

The interest in countably saturated models stems from the fact that if two modal models \HOLtm{M1} and \HOLtm{M2} are both countably saturated when viewed as first-order models, then bisimulation and modal equivalence between worlds in \HOLtm{M1} and in \HOLtm{M2} coincide. 

\begin{thm}
{\upshape\holref{\cite[Proposition 2.65, second half]{Blackburn}}{chap2_6}{407}}
%[\cite{Blackburn}{Theorem 2.65}, second half, \holref{\texttt{thm_2_65_corollary}}{chap2_6}{407}]
\label{6.1}
\begin{holmath}
  \HOLthm[w1/w,w2/w',M1/M,M2/M']{prettyPrinting.ppthm_2_65_corollary}
\end{holmath}
\end{thm}

By Proposition \ref{5.7}, to prove the above, it suffices to prove:
\begin{thm}
{\upshape\holref{\cite[Theorem 2.65, first half]{Blackburn}}{chap2_6}{168}}
%[\cite{Blackburn}{Theorem 2.65}, first half,  \holref{\texttt{thm_2_65}}{chap2_6}{168}]
If a modal model is countably saturated when we view it as a first-order model, then this model is M-saturated.
\begin{holmath}
  \HOLthm{chap2_6.thm_2_65}
\end{holmath}
\end{thm}
\begin{proof}
 Suppose \HOLtm{countably_saturated (mm2folm M)}. Let \HOLtm{a IN M.frame.world} and \HOLtm{Σ} be a set of modal formulas which is finitely satisfiable in the set of successors of $a$. We find a successor of $a$ in \HOLtm{M} realizing all the formulas in \HOLtm{Σ}. 


Define \HOLtm{Σ' = {fR (Fn 0 []) (fV x)\} UNION {ST x phi | phi IN Σ\}} and let \HOLtm{M'} be the model obtained by expanding \HOLtm{(mm2folm M)} by adding a constant which is represented by $0$ and corresponds to the world \HOLtm{a}. Then the term \HOLtm{Fn  0 []} will be evaluated to $a$ by any valuation of \HOLtm{M'}. 
We claim \HOLtm{consistent M' Σ'}. Take a finite set \HOLtm{Σ0 ⊆ Σ'}, we should find an element in \HOLtm{M'} where every formula in \HOLtm{Σ0} is satisfied. For each element in \HOLtm{Σ0} which is a standard translation, choose only one modal formula $p\in$ \HOLtm{Σ} that is translated to it. We do need to choose these formulas using the choice function since the standard translation function is not injective. We call the set of all the formulas chosen by this way $A$.  Then \HOLtm{A} is a finite subset of \HOLtm{Σ}. Recall we have assumed \HOLtm{Σ} is finitely satisfiable in the set of successors of \HOLtm{a}, hence there exists \HOLtm{b IN M.frame.world} and \HOLtm{M.frame.rel a b} such that \HOLtm{satis M b p} for every \HOLtm{p IN A}. It follows by Proposition \ref{5.4} that no matter whether \HOLtm{fR (Fn 0 []) (fV x)} is in \HOLtm{Σ0} or not, we have \HOLtm{Σ0} is satisfied at \HOLtm{b} in \HOLtm{M'}.

This proves \HOLtm{consistent M' Σ'}. Since \HOLtm{(mm2folm M)} is countably saturated, the whole set \HOLtm{Σ'} itself is satisfied in some \HOLtm{w} in \HOLtm{M'}. The fact that \HOLtm{fR (Fn 0 []) (fV x)} holds at $w$ implies $w$ is a successor of $a$ in \HOLtm{M}, and \HOLtm{{ST x phi | phi IN Σ\}} holds at \HOLtm{w} implies that \HOLtm{satis M w phi} for every \HOLtm{phi IN Σ} by Proposition \ref{5.4}.
\end{proof}

As a reader may observe, we actually only need that \HOLtm{mm2folm M} is 2-saturated for the proof above.

 Knowing the interesting properties of countably saturated models, we now answer the question of where to obtain them. The canonical way to obtain such models involves the usage of ultraproducts, which we will discuss in the following interlude. 

\subsection{Interlude: Countably saturated models via ultraproducts}
Although we are ultimately interested in ultraproducts on models, we will begin by introducing the construction of ultraproducts of sets. 


\begin{defn}
{\upshape\holref{\cite[Page 495 (Cartesian product)]{Blackburn}}{ultraproduct}{20}}
%[\holref{Cartesian product}{ultraproduct}{20}]
 Suppose $J$ is a non-empty set indexing the family $(A_j)_{j\in J}$, where each $A_j$ is non-empty. The Cartesian product of the family  $(A_j)_{j\in J}$ is the set of functions $f$ with domain $J$ such that for all $j\in J$, $f(j)\in A_j$.
\begin{holmath}
  \HOLthm[def,j/i,J/I,An/A]{ultraproduct.Cart_prod_def}
\end{holmath}
\end{defn}
As before, in the definition above, the family $(A_j)_{j\in J}$ is encoded as a function, and hence for $j\in J$, \HOLtm{An j} is the set $A_j$ indexed by $j$. 

 
\begin{defn}
{\upshape\holref{\cite[Definition 2.69 (Ultraproduct of Sets)]{Blackburn}}{ultraproduct}{23}}
%[\holref{$U$-equivalence}{ultraproduct}{23} and \holref{ultraproduct}{ultraproduct}{43}]
If $U$ is an ultrafilter on $J$, for two functions $f,g$ in the Cartesian product \HOLtm{Cart_prod J An}, we say $f$ and $g$ are $U$-equivalent (notation: \HOLtm{Uequiv U J An f g}) if the set \HOLtm{{j | j IN J /\ f j = g j\}} (where the values of $f$ and $g$ agree) is in $U$. 
For an ultrafilter $U$ on a set $J$ and a family \HOLtm{An} indexed by $J$, \HOLtm{Uequiv U J An} is an equivalence relation on the Cartesian product of the \HOLtm{An}.  The ultraproduct of \HOLtm{An} modulo $U$ is the set of equivalence classes obtained by partitioning \HOLtm{Cart_prod J An} using the relation \HOLtm{Uequiv U J An}. 
\begin{holmath}
  \HOLthm[def,J/I,An/A]{ultraproduct.ultraproduct_def}
\end{holmath}
\end{defn}
We will write \HOLtm{fc} to denote the equivalence class that $f$ belongs to. In the case where \HOLtm{An j = A} for all $j\in J$, the ultraproduct is called the ultrapower of \HOLtm{A} modulo $U$.

We have notions of ultraproduct for both modal and first-order models. For modal models: 
\begin{defn}
{\upshape\holref{\cite[Definition 2.70 (Ultraproduct of Modal Models)]{Blackburn}}{ultraproduct}{109}}
%[\holref{Ultraproduct of modal models}{ultraproduct}{109}]
 Given a family \HOLtm{MS} of modal models indexed by $J$ and an ultrafilter $U$ on $J$, where \HOLtm{MS} is encoded as a function that takes an element of $J$ and gives a model, the ultraproduct model of \HOLtm{MS} modulo $U$ (notation : \HOLtm{ultraproduct_model U J MS}) is described as follows:

\begin{itemize}
  \item The world set is the ultraproduct of world sets of \HOLtm{MS} modulo $U$. 

  \item For two equivalence classes $f_U,g_U$ of functions in the ultraproduct, they are related iff there exist $f_0\in f_U,g_0\in g_U$, such that \HOLtm{{j IN J | (MS j).frame.rel (f0 j) (g0 j)\}} is in $U$.
  \item For a propositional letter $p$ and an equivalence class $f_U$, we have $p$ is satisfied at $f_U$ iff there exists $f_0\in f_U$ such that \HOLtm{{j | j IN J /\ (f0 j) IN (MS j).valt p\}} is in $U$.
\end{itemize} 
In HOL:
\begin{holmath}
  \HOLthm[def,J/I,j/i,fc/fu,gc/gu,f0/f,g0/g,width=65]{ultraproduct.ultraproduct_model_def}
\end{holmath}
Here \HOLtm{models2worlds} is the function that takes a family of models to the family of their world sets:
\begin{holmath}
  \HOLthm[def,j/i]{ultraproduct.models2worlds_def}
\end{holmath}
\end{defn}


In the definition of the relation and valuation of the ultraproduct modal model, the occurrence of the existential quantifier is used to describe the existence of representatives of an equivalence class with a certain additional property. 
As we expect, since \HOLtm{Uequiv U J A} is an equivalence relation for every ultrafilter, the choice of representative does not matter: if one element in an equivalence class satisfies the required condition, then all the elements in the equivalence class will satisfy the condition. 
Therefore, if we replace all the existential quantifiers with universal quantifiers in the above definition, the construction is still valid, and will give the same model as the current definition. 


The critical result we will need about ultraproducts of modal models is a modal version of the fundamental theorem of ultraproducts, which is also called \L o\'s's theorem. 

%chained imp
\begin{thm}[\holref{\texttt{Los_modal_thm}}{ultraproduct}{193}]\label{6.3}
The modal version of \L o\'s's theorem states that for $U$, an ultrafilter on $J$, and \HOLtm{MS} a family of models, a modal formula $\phi$ is satisfied at an equivalence class \HOLtm{fc} in the ultraproduct if and only if there exists a function \HOLtm{f0 IN fc} such that the set of elements  \HOLtm{j IN J} such that \HOLtm{satis (MS j) (f0 j) phi} is in \HOLtm{U}
%indexing the worlds and models where $\phi$ is true is an element of $U$. %\HOLtm{{j | j IN J /\ satis (MS j) (f j) phi\} IN U}.
\begin{holmath}
  \HOLthm[MS/Ms,j/i,f0/f,width=55]{prettyPrinting.ppLos_modal_thm}
\end{holmath}
\end{thm}
\begin{proof}
  Given an ultrafilter $U$ on $J$ and a family \HOLtm{MS} of modal models, we proceed by induction on \HOLtm{phi}. The base case for \HOLtm{phi = VAR p} is directly by definition, and the case for \HOLtm{phi = FALSE} is by the fact that the empty set is not in the ultrafilter. The cases on disjunction and negation are by basic properties of ultrafilters. We only spell out the proof for diamond case. The induction hypothesis gives for every equivalence \HOLtm{fc} in the ultraproduct, we have 
\begin{holmath}
\HOLtm[f0/f]{(satis (ultraproduct_model U (J:α-> bool) MS) fc phi ⇔
             ∃f. f ∈ fc ∧ {j | j ∈ J ∧ satis (MS j) (f j) phi\} ∈ U)}
\end{holmath}
Given a world \HOLtm{fc} in \HOLtm{(ultraproduct_model U J MS)}, we will prove 
\begin{holmath}
\HOLtm[f0/f]{satis (ultraproduct_model U (J:α -> bool) MS) fc (◇ phi) ⇔
        ∃f. f ∈ fc ∧ {j | j ∈ J ∧ satis (MS j) (f j) (◇ phi)\} ∈ U}
\end{holmath}
Left to right: Assume the left-hand side, then there is an equivalence class \HOLtm{gc} that is related to \HOLtm{fc} and satisfies \HOLtm{phi}. By inductive hypothesis, independence of representatives and definition of the ultraproduct model, for the representative $f$ of $f_U$ and the representative $g$ of $g_U$, both  \HOLtm{ {j | j IN J /\ satis (MS j) (g j) phi\}} and \HOLtm{{j | j IN J /\ (MS j).frame.rel (f j) (g j)\}} are in $U$, and hence so does their intersection $M$. Therefore, the set 
\begin{holmath}
\HOLtm[alltt,width=95]{A={j |
         j ∈ J ∧ 
         ∃v.
             (MS i).frame.rel (f j) v ∧ v ∈ (MS j).frame.world ∧
             satis (MS j) v phi\}} 
\end{holmath}
is in $U$, as a superset of $M$. This proves $f$ can be taken as the $f_0$ that we require. 


Right to left: Suppose there is an \HOLtm{f0 IN fc} such that
\begin{holmath}
 \HOLtm[alltt,f0/f,width=90]{{j |  j ∈ J ∧
         ∃v.
             (MS j).frame.rel (f j) v ∧ v ∈ (MS j).frame.world ∧
             satis (MS j) v phi\}}
\end{holmath}
 is in $U$, we need to find an equivalence class which is related to \HOLtm{fc} and satisfies $\phi$, which by definition of relation in the ultraproduct model, amounts to find a representative of such an equivalence class. The representative is given by:

\begin{itemize}
\item For an element $j\in J$, if there exists a world \HOLtm{v IN (MS j).world} such that \HOLtm{(MS j).frame.rel (f0 j) v} and \HOLtm{satis (MS j) v phi}, then we choose such a $v$ to send $j$ to.

\item For an element $j\in J$, if such a world $v$ as described above does not exists, we send $j$ to an arbitrary world in \HOLtm{(MS j).frame.world}.
\end{itemize}
In HOL, the representative described above is defined as:
\begin{holmath}
\HOLtm[alltt,f0/f,width=90]{\j. if (?v.
          (MS j).frame.rel (f j) v /\ v IN (MS j).frame.world /\
          satis (MS j) v phi) then CHOICE {v | (MS j).frame.rel (f j) v /\ v IN (MS j).frame.world /\ satis (MS j) v phi\}
	  else CHOICE (MS j).frame.world}
\end{holmath}
\end{proof}

In the case that we are taking the ultraproduct of a constant family of models with \HOLtm{MS j = M} for all $j\in J$, we get an ultrapower of \HOLtm{M}. Specializing Theorem \ref{6.3} to the case of ultrapowers yields:


\begin{coro}
{\upshape\holref{\cite[Proposition 2.71]{Blackburn}}{ultraproduct}{490}}
%[\cite{Blackburn}{Proposition 2.71}, \holref{\texttt{prop_2_71}}{ultraproduct}{490}]

If for every $j \in J$, \HOLtm{MS j = M} (\HOLtm{MS} is a ``constant family''), then the equivalence class of the constant function mapping every $j$ to a fixed world $w$ satisfies $\phi$ in the ultraproduct model iff $w$ satisfies $\phi$ in the original model \HOLtm{M}.  
%The map sends a world \HOLtm{w IN M.frame.world} to the equivalence class represents by constant function at $w$ embeds the model \HOLtm{M} to its ultrapower on $U$, with the corresponding points satisfy the same modal formulas. 
\begin{holmath}
\HOLthm[j/i,MS/Ms,f/fw,width=60]{ultraproduct.prop_2_71}\label{6.4}
\end{holmath}
\end{coro}
The construction of ultraproduct of first-order models is similar to the construction for modal models, but a bit more complicated, since we will have predicates and functions to deal with. 

\begin{defn}
{\upshape\holref{\cite[Definition A.18 (Ultraproduct of First-Order Models)]{Blackburn}}{ultraproduct}{551}}
%[\holref{Ultraproduct of first-order models}{ultraproduct}{551}]

Given a family \HOLtm{MS} of first-order models indexed by $J$ and an ultrafilter $U$ on $J$, the ultraproduct model of \HOLtm{MS} modulo $U$ (notation : \HOLtm{ultraproduct_folmodel U (J:α -> bool) MS}) is given by:

\begin{itemize}
\item The domain is the ultraproduct of the domains of \HOLtm{MS} over $U$ on $J$.
\item A function with its symbol denoted by the natural number $n$ will send a list \HOLtm{zs} of equivalence classes to the equivalence class of a function that sending $j\in J$ to \HOLtm{(MS j).Fun n l}, where the $k$-th member of the list $l$ is a representative of the $k$-th member (which is an equivalence class) of \HOLtm{zs}. 

\item A predicate with its symbol denoted by $p$ will hold for a list $zs$ of equivalence classes if and only if once we have a list $zr$ such that the $k$-th member is a representative of the $k$-th member of $zs$, the set of elements \HOLtm{j IN J} such that \HOLtm{(MS j). Pred p zr} is in $U$. 
\end{itemize}
In HOL:
\begin{holmath}
  \HOLthm[def,J/I,j/i,zs/fs]{ultraproduct.ultraproduct_folmodel_def}
\end{holmath}
\end{defn}
In above, the function \HOLtm{MAP} takes a function $f$ and a list $l$, and gives the list whose $n$-th member is the image of the $n$-th member of $l$ under $f$. 

Here we fix the representative of each equivalence class \HOLtm{fc} to be \HOLtm{CHOICE fc}. The function \HOLtm{folmodels2Doms} takes a family of first-order models to the family of their domains. It plays the same role as the function \HOLtm{models2worlds} in the definition of ultraproduct of modal models. 

The semantic behavior of ultraproduct models are characterized by \emph{\L o\'s's theorem}, whose proof can be founded in \cite{ChangKeisler1990}.
%First, we determine how first-order ultraproduct models interpret terms. In other words, for an arbitrary term $t$, we must determine how this term maps to an element of the ultraproduct. 
% maybe delete this sentence

The first part of this theorem describe how first-order ultraproduct models interpret terms.
As for all models, this interpretation is performed by the \HOLtm{termval} function. 

\begin{thm}
{\upshape\holref{\cite[Theorem A.19 (\L o\'s's theorem) (i)]{Blackburn}}{ultraproduct}{632}}
%[\cite{Blackburn}{Theorem A.19} (i), \holref{\texttt{thm_A_19_i}}{ultraproduct}{632}]
\label{6.5}
For an ultraproduct model of the family \HOLtm{MS} of first-order models, a valuation $\sigma$ assigns each natural number an equivalence class in the ultraproduct of the world sets of the family. A term $t$ will be evaluated to the equivalence class of the function that maps a index $j\in J$ to \HOLtm{termval (MS j) (\v. (CHOICE (σ v)) j) t}.
\begin{holmath}
  \HOLthm[J/I,j/i,v/n]{prettyPrinting.ppthm_A_19_i}
\end{holmath}
\end{thm}

In above, for each $j\in J$, the function that sends a variable $v$ (which is a natural number) to \HOLtm{((CHOICE (σ v)) j)} is indeed a valuation of the model \HOLtm{MS j}. As we can see: for each \HOLtm{v}, the representative \HOLtm{CHOICE (σ v)} of the equivalence class \HOLtm{σ v} is an element in the Cartesian product \HOLtm{Cart_prod J (folmodels2Doms MS)}. By definition of Cartesian product, this means that for each \HOLtm{j IN J}, we have \HOLtm{((CHOICE (σ v)) j) IN (MS j).Dom}.


The second part of \L o\'s's theorem characterizes satisfaction of first-order formulas on ultraproduct models:


\begin{thm}
{\upshape\holref{\cite[Theorem A.19 (\L o\'s's theorem) (ii)]{Blackburn}}{ultraproduct}{986}}
For the ultraproduct of a family \HOLtm{MS} of first-order models over an ultrafilter \HOLtm{U} on $J$, a formula \HOLtm{phi} is satisfied under a valuation \HOLtm{σ} if and only if the set indexing the models \HOLtm{MS j} in the family where \HOLtm{phi} is true under the valuation \HOLtm{(\v. (CHOICE (σ v)) j)} is in the ultrafilter $U$. 
\begin{holmath}
  \HOLthm[J/I,j/i,v/x,width=65]{prettyPrinting.ppthm_A_19_ii}
\end{holmath}
\end{thm}

\begin{proof}
 By induction on \HOLtm{phi}. The base case for \HOLtm{fFALSE} comes from the fact that the empty set is not in an ultrafilter. The atomic case is a direct translation of its mathematical proof, which uses Theorem \ref{6.5}. The implication case is trivial from the inductive hypothesis. We only spell out the proof for the case for universal quantifier.

 
The implication from right to left is straightforward. From left to right, suppose \HOLtm{FALL x phi} is satisfied under a valuation \HOLtm{σ} in the ultraproduct model for \HOLtm{FMS}. We need \HOLtm[alltt,v/n,width=90]{{j | j ∈ J ∧ feval (FMS j) (λn. CHOICE (σ n) j) (FALL x phi)\} ∈
                 U}. Suppose not, then as $U$ is an ultrafilter, the complement of the set above, which is:
\begin{holmath}
 \HOLtm[alltt,v/n,width=90]{A={j | j ∈ J ∧ feval (FMS j) (λn. CHOICE (σ n) j) (fEXISTS x (fNOT phi))\}}
\end{holmath}
 is in $U$. Using choice, we define a function $f$ by sending each $j\in J$ to a chosen point in \HOLtm{(FMS j).Dom} where \HOLtm{phi} is not satisfied if such a point exists, and \HOLtm{CHOICE (MS j)} if such a point does not exist. Using the inductive hypothesis and the fact that $A\in U$, we can show the equivalence class represented by $f$ does not satisfy \HOLtm{phi}, which contradicts our assumption. 
\end{proof}

\L o\'s's theorem gives a classical corollary:
%revise phrasing????????????????????????
\begin{coro}
{\upshape\holref{\cite[Corollary A.21]{Blackburn}}{ultraproduct}{1556}}
%[\cite{Blackburn}{Corollary A.21}, \holref{\texttt{corollary_A_21}}{ultraproduct}{1556}]
For every ultrafilter $U$ on $J$, every first-order model \HOLtm{M} is embedded in its ultrapower on $U$ by sending an element in its domain to the equivalence class of the constant function on that element. 
\begin{holmath}
  \HOLthm[J/I,j/i,v/x,width=70]{prettyPrinting.ppcorollary_A_21}
\end{holmath}
\end{coro}

The above corollary is straightforward to prove once we get the following lemma:


\begin{lm}[\holref{\texttt{ultraproduct_rep_independence_lemma}}{ultraproduct}{1471}]
Given a family \HOLtm{MS} of first-order models indexed over $J$ and an ultrafilter $U$ on $J$. Let \HOLtm{σ} be a valuation on the ultraproduct model of \HOLtm{MS} over \HOLtm{U}. For a first-order formula \HOLtm{phi}, let \HOLtm{rv} be a function assigning each free variable $v$ of \HOLtm{phi} a representative in the equivalence class \HOLtm{σ v}. Then the set of $j\in J$ that indexing the models \HOLtm{MS j} where \HOLtm{phi} is satisfied under the valuation \HOLtm{(\v. CHOICE (σ v) j)} is in $U$ if and only if the set of elements $j\in J$ indexing the the models \HOLtm{MS j} where \HOLtm{phi} is satisfied under the valuation \HOLtm{(\v. rv v j)} is in $U$.
\begin{holmath}
  \HOLthm[v/x,J/I,j/i,width=65]{prettyPrinting.ppultraproduct_rep_independence_lemma}
\end{holmath}
\end{lm} 

In the theorem above, if the index set $J$ is an $\alpha$-set and \HOLtm{FMS} is a family of $\beta$-first-order models, then \HOLtm{rv} here is of type
\HOLty{:num -> α -> β}. This lemma is very helpful since it enables us to be free of choice of representatives of equivalence classes in the ultraproduct when applying \L o\'s's theorem. 

\begin{prop}[\holref{\texttt{ultraproduct_suffices_rep}}{ultraproduct}{1643}]\label{6.9}
If we want to find a valuation of a ultraproduct model satisfying a first-order formula $\phi$, instead of assigning equivalence classes to natural numbers directly, it suffices to assign representatives. 
\begin{holmath}
  \HOLthm[J/I,j/i,width=70]{prettyPrinting.ppultraproduct_suffices_rep}
\end{holmath}
\end{prop}

All the construction we did above serves to pave a way of getting a countably saturated model. For a family of non-empty models, we will prove that their ultraproduct on a \emph{countably incomplete} ultrafilter is countably saturated. An ultrafilter $U$ on $J$ is countably incomplete if there exists a family \HOLtm{Sn} such that \HOLtm{(Sn n) IN U} for each natural number $n$, and the intersection $\bigcap_{n\in \mathbb N}$\HOLtm{Sn n} is empty. In other words, a countably incomplete ultrafilter is an ultrafilter which is not closed under infinite intersection. Countably incomplete ultrafilters do exist. To see this, first observe that the set $A$ of subsets of $\mathbb N$ of form ${\mathbb N}\setminus X$, where $X$ is a finite subset of $\mathbb N$, has finite intersection property. Therefore, by Proposition \ref{5.12}, there exists an ultrafilter $U$ that contains $A$. The ultrafilter $U$ will not contain any finite set, otherwise, it will contain both a subset of $\mathbb N$ and its complement, and hence contradict the fact that $U$ is an ultrafilter. 

\begin{lm}
{\upshape\holref{\cite[Lemma 2.73]{Blackburn}}{lemma2_73}{1085}}
%\begin{lm}[\holref{\texttt{lemma_2_73}}{lemma2_73}{1085}]
\label{6.10}
For a family of non-empty models, their ultraproduct on a countably incomplete ultrafilter is countably saturated. 
\begin{holmath}
  \HOLthm[J/I,j/i]{prettyPrinting.pplemma_2_73}
\end{holmath}
\end{lm}
A mathematical proof of the lemma above can be found in Section 6.1 of \cite{ChangKeisler1990}. It requires some work to translate the mathematical proof into HOL. With all the setup about ultraproduct models, we may expect that the lemma above will be a consequence of \L o\'s's theorem. But if we take a closer look of the statement, we will find out \L o\'s's theorem cannot be directly applied here. %The definition of countably saturated asks us to prove the realization of a set of first-order formulas in an expanded first-order model, where the first-order model we expand is obtained from turning a modal model into a first-order model. 
The obstacles here will become clear when we compare what we want to prove to the statement of \L o\'s's theorem: 
\L o\'s's theorem is about ultraproducts of first-order models, and it says nothing about expansion. But by the definition of countably saturated models, we are required to prove a statement for a model obtained by expanding a first-order model which is again obtained by viewing an ultraproduct of modal models as a first-order model. However, as we shall see now, this difference cannot stop us from applying \L o\'s's theorem.

The first issue is to remove the expansion on the outmost layer. The key observation is that we have an alternative approach to capture the idea of `constants'. Constants are nothing more than forcing some symbols to be sent to some points in a model under every valuation, hence rather than use nullary function symbols, we fixed a set of variable letters, each corresponds to a function symbol, and only consider the valuations that sends these variable letters to fixed certain points. With this idea, we can remove all the constants in a formula, and hence change our scope from an expanded model back to the unexpanded model. To get rid of the constants $\{0,\cdots , n-1\}$, we replace every \HOLtm{VAR m} with \HOLtm{VAR (m+n)}, and replace every constant \HOLtm{Fn c []} by \HOLtm{VAR c}. This operation is done by the function \HOLtm{shift_form} which takes a natural number (the number of constants we want to remove), and a first-order formula (where the only function symbols may appear are the constants $0,\cdots, n-1$).

 As an example, if \HOLtm{M'} is obtained by adding one constant to \HOLtm{M} corresponds to a point \HOLtm{a IN M.Dom}, then after the expansion, the formulas involves the term \HOLtm{Fn 0 []} makes sense to \HOLtm{M'}. If we do not want to work with expansion, given a formula where the only function symbol that may occur is \HOLtm{(0,0)}, then we can firstly add $1$ to every variable symbol that appears in the formula, and then replace every occurrence of \HOLtm{Fn 0 []} by \HOLtm{fV 0}. The formula \HOLtm{fR (Fn 0 []) (fV 0)} will become \HOLtm{fR (fV 0) (fV 1)}, and the formula \HOLtm{fDISJ (Pred p [fV 1]) (Pred q [fV 2])} will become \HOLtm{fDISJ (Pred p [fV 2]) (Pred q [fV 3])}. Therefore, after applying the shifting construction to a formula, there will be no function symbol remaining. Also, if $s$ is the set of free variables in the formula we start with, then a free variable in the resultant formula is either of form \HOLtm{x + (CARD A)} for some $x\in s$, or an element in $\{0,\cdots , ({\sf CARD} \ A - 1)\}$ that is used to capture a constant. 

Now if we still want to use an arbitrary valuation to evaluate a shifted formula, something may go wrong. Since $0,\cdots,n-1$ in the shifted formula are now designed to be sent to fixed places $f \ 0,\cdots,f \ (n-1)$, it does not make sense to assign these variable symbols anywhere else. Hence to talk about evaluation of shifted formula, the first thing is to make sure that the valuations we are considering send the variables which actually denotes constants to the right place. Hence we shift the valuations accordingly:
%The job of ensuring a valuation we use makes sense to shifted formulas can be done by shifting the valuation accordingly:
\begin{defn}[\holref{Shifting on valuations}{lemma2_73}{363}]
\begin{holmath}
  \HOLthm[def,v/m]{lemma2_73.shift_valuation_def}
\end{holmath}
\end{defn}

Continue with the previous example. Formerly, we can use the valuation \HOLtm{\n.b} where \HOLtm{b IN M.Dom} and \HOLtm{b <> a} to evaluate the formula \HOLtm{fR (Fn 0 []) (fV 0)}. But after the shifting, it does not make sense to use the same valuation to evaluate \HOLtm{fR (fV 0) (fV 1)}. To turn this valuation into a valuation that makes sense to the shifted formula, we need to let \HOLtm{fV 0} in the shifted formula to be evaluated to the correct place $a$, and let the variable symbol which is formerly sent to $b$ to be also sent to $b$. Formerly, the variable symbol $0$ is sent to $b$, but now the variable which plays the same role as the $0$ after the shifting is the variable symbol $1$, hence we need the $1$ in the shifted formula to be sent to $b$, as we can check, according to our definition, \HOLtm{shift_valuation 1 (\v.b) (\v.a) = \v. if v = 0 then a else b} does the correct thing. 

The shifting construction gives the desired semantic behavior on first-order formulas. If \HOLtm{M'} is a model we get by adding a bunch of constants corresponds to elements in a set $A$ to a model \HOLtm{M}, then for a first-order formula \HOLtm{phi} such that the function symbols appear in \HOLtm{phi} can only be the constants that corresponds to element in $A$, the formula \HOLtm{phi} is true in \HOLtm{M} under valuation \HOLtm{σ} if and only if when we `shift away' all the constants in \HOLtm{phi} and shift the valuation \HOLtm{σ} accordingly, then the resultant formula will be true on \HOLtm{M} under the shifted valuation. For our aim here, we are interested in expanding a model that is obtained by converting a modal model as a first-order model, so the result we need is:


\begin{prop}[\holref{\texttt{expansion_shift_feval}}{lemma2_73}{382}]\label{6.11}
\begin{holmath}
  \HOLthm[width=80]{prettyPrinting.ppexpansion_shift_feval}
\end{holmath}
\end{prop}

The shifting construction gets us out of the expansion, leaving us a model obtained by converting a ultraproduct modal model to a first-order model. To apply \L o\'s's theorem on such a model, we prove:


\begin{prop}[\holref{\texttt{ultraproduct_comm_feval}}{lemma2_73}{188}]\label{6.12}
For the ultraproduct of a family of modal models, if we view the resultant modal ultraproduct model as a first-order model, this first-order model will satisfy the same first-order formulas without function symbols as the model we obtain by firstly view each modal model in the family as a first-order model, then take their ultraproduct as first-order models.
\begin{holmath}
  \HOLthm[J/I,j/i]{prettyPrinting.ppultraproduct_comm_feval}
\end{holmath}
\end{prop}
\begin{proof}
By induction on \HOLtm{phi}. 
\end{proof}


Actually, we also have:
\begin{prop}[\holref{\texttt{ultraproduct_comm_feval'}}{chap2_6}{1911}]\label{6000}
\begin{holmath}
  \HOLthm[J/I,j/i]{prettyPrinting.ppultraproduct_comm_feval'}
\end{holmath}
\end{prop}


In summary, the above two propositions express the fact that the order of taking ultraproduct and converting between modal and first-order models do not matter if we only consider the satisfaction of $\mathcal L_{\tau}^1$-formulas.

According to the discussion above, Proposition \ref{6.12} and Proposition \ref{6.11} reduce our task to the following: 


\begin{lm}[Saturation of ultraproduct model, \holref{\texttt{ultraproduct_sat}}{lemma2_73}{876}]
Let \HOLtm{MS} be a family of well-formed first-order models indexed by $J$, a countably incomplete ultrafilter $U$ on $J$, a set \HOLtm{Δ} of $\mathcal L_{\tau}^1$-formulas which contain no free variables other than the ones in the set $\{x\}\cup C$, and a function $f$ from $C$ into the domain of \HOLtm{ultraproduct_folmodel U J MS} 
(the function $f$ serves to give meaning to the free variables in $C$, treating them as constants).
If for every finite subset \HOLtm{Δ0} of \HOLtm{Δ}, there exists a valuation \HOLtm{σ} that agrees with $f$ on the elements of $C$ (i.e., it sends the `constants' to the correct places), and all the formulas in \HOLtm{Δ0} are satisfied in \HOLtm{ultraproduct_folmodel U J MS} under \HOLtm{σ}, then there exists a valuation \HOLtm{σ} sending the constants to the correct places that makes every formula in \HOLtm{Δ} satisfied in \HOLtm{ultraproduct_folmodel U J MS} (which just means that \HOLtm{σ} assigns the only `real' free variable $x$ to a point in \HOLtm{ultraproduct_folmodel U J MS} such that all the elements in \HOLtm{Δ} are satisfied).
\begin{holmath}
  \HOLthm[J/I,j/i,C/N,Δ0/ss,Δ/s,c/n,width=60]{prettyPrinting.ppultraproduct_sat}
\end{holmath}
\end{lm}
The above is a classical theorem on ultraproduct models. To prove it, we need another lemma about countably incomplete ultrafilters:


\begin{prop}[\holref{\texttt{countably_incomplete_chain}}{ultrafilter}{653}]\label{5.15}
In a countably incomplete ultrafilter $U$ on $J$, we can find a chain $J=J_0\supseteq J_1\supseteq J_2\supseteq\cdots$ with each $J_i$ in $U$, such that $\bigcap_{n\in \mathbb N}J_n=\emptyset$. The \HOLtm{Jn} below is a function that takes a index $n$, here a natural number, to the set that $n$ is indexing. 
\begin{holmath}
  \HOLthm[J/I,Jn/In]{ultrafilter.countably_incomplete_chain}
\end{holmath}
\end{prop}
\begin{proof}
By definition of countable incompleteness, there exists a family $X_n$ in $U$ indexed by natural numbers such that $\bigcap_{n\in \mathbb N}X_n=\emptyset$. Define $K_n:=\bigcap_{m\le n}X_n$. In HOL, the family $K_n$ is defined as a recursive function \HOLtm{Kn} such that \HOLtm{Kn 0} is $X_0$ and \HOLtm{Kn (n + 1)} is the intersection of \HOLtm{Kn n} and $X_{n+1}$. 
We get the desired chain $J_n$ by inserting $J$ at the beginning of $K_n$.
\end{proof}

Now we can prove the saturation of ultraproducts:

\begin{proof}
Under the given assumptions, if \HOLtm{Δ} is finite, there is nothing to prove. Hence we assume \HOLtm{Δ} is infinite. As we are using a countable first-order language, every infinite set of first-order formula is countable, and hence there exists a bijection \HOLtm{enum} from the set of all natural numbers to the set \HOLtm{Δ}. It suffices to prove the existence of a valuation \HOLtm{σ} such that \HOLtm{σ} agree with $f$ on $C$ and moreover, \HOLtm{feval (ultraproduct_folmodel U J FMS) σ (enum n)} for all natural number $n$. The \HOLtm{σ} we want is an assignment of variables to equivalence classes. But by Proposition \ref{6.9} and \L o\'s's theorem, instead of assigning equivalence classes, it suffices to find out a function \HOLtm{rv} that assigning each natural number a representative of some equivalence class satisfying the following conditions. 

\begin{itemize}
  \item \HOLtm{∀v j. j ∈ J ⇒ rv v j ∈ (FMS j).Dom }
  \item \HOLtm[c/n]{(∀n. n ∈ C ⇒ {g | Uequiv U (J:α -> bool) (folmodels2Doms FMS) g (rv n)\} = f n)}
  \item \HOLtm{∀k:num. 
             {j | j ∈ J ∧ feval (FMS j) (λv. rv v j) (conj k)\} ∈ U}
\end{itemize}

The first item says for each free variable $v$, the function that \HOLtm{rv} assigns $v$ must be an element in the Cartesian product. The second item says that the equivalence class assigned free variables in $C$ has already been fixed by $f$. Both of these two are easy to be satisfied. We devote to finding a \HOLtm{rv} satisfying the third condition. 

By Proposition \ref{5.15}, we have a chain \HOLtm{In} where \HOLtm{In n ∈ U} and \HOLtm{In (n + 1) ⊆ In n} for each \HOLtm{n}, which start with \HOLtm{In 0 = J}. Moreover, the intersection of this chain is empty. Let \HOLtm{conj} be the recursive function that \HOLtm{conj 0 = True}, and \HOLtm{conj n} is the conjunction of first-order formulas in $s$ from \HOLtm{enum 0} to \HOLtm{enum (n - 1)}. We define \HOLtm{Jn} to be the function that takes a natural number $n$ and gives the set:
\begin{holmath}
\HOLtm[alltt,k/n,width=75]{Jn n = {j | j IN J /\ 
                 (!σ.
                    (!c. c IN C ==> σ c = CHOICE (f c) j) ==>
                      feval (FMS j) σ (Exists x (conj n)) 
                 )\}}
\end{holmath}

Then \HOLtm{Jn 0 = J}, and for $n>0$, \HOLtm{Jn n} is the subset of \HOLtm{J} indexing the set of models \HOLtm{MS j} with a point in its domain such that the conjunction from \HOLtm{enum 0} to \HOLtm{enum (n - 1)} are satisfied. Therefore, \HOLtm{Jn} is a descending chain. Since every finite subset of \HOLtm{Δ} is satisfied in \HOLtm{(ultraproduct_folmodel U J FMS)} by assumption, \L o\'s's theorem implies that \HOLtm{(Jn n) IN U} for every $n$. Define for each natural number $n$, \HOLtm{Xn n} is the intersection \HOLtm{In n ∩ Jn n}, then \HOLtm{Xn} is a descending chain in $U$ starting with \HOLtm{J} and the intersection of all \HOLtm{Xn n} is the empty set. For such a chain, each element \HOLtm{j IN J} can only belong to finitely many of the sets in the family \HOLtm{Xn}. Hence there exists a function \HOLtm{NN} that send an element \HOLtm{j} to smallest set in the chain \HOLtm{Xn} that \HOLtm{j} belongs to. That is, for all \HOLtm{j ∈ J}, we have \HOLtm{j ∈ Xn (NN j)} and \HOLtm{j ∉ Xn a} for every \HOLtm{a > NN j}.

The \HOLtm{rv} we are looking for can be taken as the function that takes a free variable $v$ and an element $j\in J$ to an element in the domain of \HOLtm{MS j}, defined as:

\begin{itemize}
\item If $v\in C$ ($v$ is a free variable which is actually used to capture a constant), then $v$ it sent to \HOLtm{CHOICE (f v) j}.

\item If $v\notin C$ (which means that $v$ is the $x$ in our assumption), then 
choose an element \HOLtm{a IN (MS j).Dom} such that the formula \HOLtm{conj (NN j)} is satisfied in \HOLtm{MS j} under the valuation that sends a free variable $n$ in $C$ to \HOLtm{CHOICE (f n) j} and sends the free variable $x$ to $a$. We can choose such an element since we can easily prove its existence from the fact that \HOLtm{Jn n} is in $U$ for every natural number $n$. 
\end{itemize}

The first two conditions are immediate to check. It remains to show \HOLtm{{j | j ∈ J ∧ feval (FMS j) (λv. rv v j) (conj k)\} ∈ U} for each $k$. Fix an arbitrary $k$, as we have known that \HOLtm{Xn k} is in $U$, it suffices to check \HOLtm{Xn k ⊆ {j | j ∈ J ∧ feval (FMS j) (λv. rv v j) (conj k)\} }. For every \HOLtm{j IN (Xn k)}, by definition of the function \HOLtm{NN}, we have \HOLtm{k <= NN j}. As \HOLtm{j IN (Xn (NN j))}, in particular, \HOLtm{j IN (Jn (NN j))}. From here, we can deduce \HOLtm{feval (FMS j) (λv. rv v j) (conj (NN j))} by the definition of \HOLtm{rv} and the definition of \HOLtm{Jn}. As \HOLtm{conj m} implies \HOLtm{conj n} for \HOLtm{n <= m}, we are done.

\end{proof}

This is the end of the interlude. 

With the help of Lemma \ref{6.10}, we yield another theorem about `modal equivalence between two worlds implies bisimilarity of the two worlds when embedded in some other models'. 


\begin{thm}
{\upshape\holref{\cite[Theorem 2.74, one direction]{Blackburn}}{chap2_6}{439}}
%[\cite{Blackburn}{Theorem 2.74}, one direction, \holref{\texttt{thm_2_74_half2}}{chap2_6}{439}]
\label{6.15}
If two worlds \HOLtm{w IN M.frame.world} and \HOLtm{v IN N.frame.world} are modal equivalent, then we can find an ultrafilter $U$ on $J$ such that in ultrapower models of \HOLtm{M} and \HOLtm{N} on $U$ respectively, there is a bisimulation between the worlds corresponding to \HOLtm{w} and \HOLtm{v}. 
\begin{holmath}
  \HOLthm[J/I,j/i,f/fw,g/fv]{prettyPrinting.ppthm_2_74_half2}
\end{holmath}
\end{thm}
\begin{proof}
The \HOLtm{U} we require here can be an arbitrary countably incomplete ultrafilter. Then by Lemma \ref{6.10}, the models \HOLtm{(mm2folm (ultraproduct_model U J (\j.M)))}, \HOLtm{(mm2folm (ultraproduct_model U J (\j.N)))} are countably incomplete. Hence we are done by Proposition \ref{6.1} and Corollary \ref{6.4}.
\end{proof}

%The last step towards the main theorem is used to pass from infinite set to finite set.

The last ingredient we need for the main theorem we are proving is the compactness theorem of first-order logic. The standard statement of compactness theorem says that for a set \HOLtm{Σ} of modal formulas, if for each finite subset \HOLtm{Σ0 ⊆ Σ}, there exists a model such that all the formulas in \HOLtm{Σ0} are satisfied, then there exists a model such that all the formulas in \HOLtm{Σ} are satisfied. This standard version of compactness theorem is formalized in 1998 in HOL by John Harrison ~\cite{Harrison}. The way that Harrison states the compactness theorem looks very different from the style that we are working with. With the help of a corollary proved from Harrison's work by my supervisor, we have connected Harrison's work to our project by proving a version of the compactness theorem for $\mathcal L_{\tau}^1$-formulas, which is no more than a specialization to the standard version of compactness theorem to $\mathcal L_{\tau}^1$-formulas. We will use this version of compactness theorem for our work. The statement looks like:

\begin{thm}[\holref{\texttt{compactness_thm_L1tau}}{chap2_6}{1432}]\label{6.16}
If $\alpha$-is an infinite type, then for each set \HOLtm{Δ} of $\mathcal L_{\tau}^1$-formulas, if for every finite subset \HOLtm{Δ0 ⊆ Δ}, there exists an $\alpha$-model \HOLtm{M} and a valuation \HOLtm{σ} such that every formula in \HOLtm{Δ0} is satisfied in \HOLtm{M} under \HOLtm{σ}, then there exists an $\alpha$-model \HOLtm{M} and a valuation on \HOLtm{M} such that all the formulas in \HOLtm{Δ} are satisfied. 
\begin{holmath} \HOLthm[phi/f,phi/ff,Δ0/ss,Δ/A,width=70]{prettyPrinting.ppcompactness_thm_L1tau}
\end{holmath}
\end{thm}

The assumption on infiniteness of the type universe comes from similar reason as that of \ref{2.2}. Because of this assumption, every statement which requires compactness theorem will be  required to include the assumption on the infiniteness of type universe. 

As a consequence of the compactness theorem, we have:

\begin{coro}[\holref{\texttt{compactness_corollary_L1tau}}{chap2_6}{1482}]\label{6.17}
Under the assumption that the type universe of $\alpha$ is infinite and \HOLtm{Δ} is a set of $\mathcal L_{\tau}^1$ formula. If for every $\alpha$-model \HOLtm{M} and valuation \HOLtm{σ}, once we have \HOLtm{feval M σ phi} for every \HOLtm{phi IN Δ}, then \HOLtm{feval M σ δ}, then there exists a finite subset \HOLtm{Δ0} of \HOLtm{Δ} such that once every formula in \HOLtm{Δ0} is satisfied in an $\alpha$-model \HOLtm{M} under a valuation \HOLtm{σ}, then \HOLtm{feval M σ δ}. 
\begin{holmath}
  \HOLthm[phi/f,Δ/A,Δ0/ss,δ/a]{prettyPrinting.ppcompactness_corollary_L1tau}
\end{holmath}
\end{coro}

\begin{proof}
Under the assumptions, suppose, in order to get a contradiction, that for every finite subset \HOLtm{Δ0} of \HOLtm{Δ}, there exists an $\alpha$-model \HOLtm{M} and a valuation \HOLtm{σ} where all the formulas in \HOLtm{Δ0} are satisfied by \HOLtm{δ} is not satisfied, then every finite subset of \HOLtm{Δ0 ∪ {fNOT δ\}} is satisfied on some $\alpha$-model \HOLtm{M} under some valuation \HOLtm{σ}. As \HOLtm{δ} is an $\mathcal L_{\tau}^1$-formula, so does \HOLtm{Not δ}. By Theorem \ref{6.16}, this implies the whole set \HOLtm{Δ0 ∪ {fNOT δ\}} is satisfied on some $\alpha$-model under some valuation, contradicting our assumption. 
\end{proof}


Now we have all the ingredient for translating the hard direction of the standard proof of \emph{Van Benthem Characterization Theorem} into HOL. 

\begin{thm}
{\upshape\ffinal{\cite[Theorem 2.68 (Van Benthem Characterization Theorem), hard direction]{Blackburn}}{chap2_6}{1918}}
%[Van Benthem Characterization Theorem, hard direction, \cite{Blackburn}{Theorem 2.68},  \holref{\texttt{thm_2_68_half1}}{chap2_6}{1512}]
\label{6.18}
For an infinite type $\alpha$, if \HOLtm{δ} is a first-order formula which is invariant for bisimulation on \HOLty{:num -> α -> bool}-first-order models and the only free variable may appear in \HOLtm{δ} is $x$, then there exists a modal formula whose standard translation at $x$ is equivalent to \HOLtm{δ} on $\alpha$-first-order models. 
\begin{holmath}
  \HOLthm[showtypes,δ/a]{chap2_6.thm_2_68_half1'}
\end{holmath}
\end{thm}

\begin{proof}
Under the given assumptions, consider the modal consequence of \HOLtm{δ}, which is the set of standard translations implied by \HOLtm{δ} on all first-order models with $\alpha$-sets as their domains, defined in HOL as \begin{holmath}
\HOLtm[alltt,width=110]{MOC = {ST x phi | phi | 
           (!M v:num -> α. 
               valuation M v ==> 
                feval M v δ ==> feval M v (ST x phi))\}}
\end{holmath}
Our first claim is that it suffices to prove \HOLtm{δ} is implies by \HOLtm{MOC}. To see why it suffices, assume it is true, then by Corollary \ref{6.17}, there exists a finite subset of \HOLtm{Σ0} of \HOLtm{MOC} such that once all the formulas in \HOLtm{Σ0} are satisfied, then \HOLtm{δ} is satisfied. Also by definition of \HOLtm{MOC}, once \HOLtm{δ} is satisfied, every formula in \HOLtm{Σ0} is satisfied. Hence \HOLtm{δ} will be equivalent to the big conjunction of formulas in \HOLtm{Σ0}, which is a standard translation. 

Fix a model \HOLtm{M} and suppose \HOLtm{feval M σ varphi} for every \HOLtm{varphi IN MOC}, we prove \HOLtm{feval M σ δ}. Consider of the set \HOLtm{Σ} of formulas of the form \HOLtm{ST x phi} such that \HOLtm{feval M σ (ST x phi)}. Pick a model \HOLtm{N} and a valuation \HOLtm{σn} satisfying each formula in \HOLtm{(Σ ∪ {δ\})}. Such a model does exist:
Suppose, in order to get a contradiction, that such a model does not exist, then for every model, once all the formulas in \HOLtm{Σ} are satisfied, the formula \HOLtm{δ} will not be satisfied. Then by Corollary \ref{6.17}, there exists a finite subset of \HOLtm{Σ} implies \HOLtm{Not δ}. Taking its contrapositive, then \HOLtm{a} implies the negation of the big conjunction \HOLtm{psi} of finitely many elements in \HOLtm{Σ}. As a negated big conjunction of standard translations is again a standard translation, we have  \HOLtm{(fNOT psi) IN MOC}. Recall we have assumed \HOLtm{feval M σ varphi} for every \HOLtm{varphi IN MOC}, so \HOLtm{feval M σ (fNOT psi)}, but also \HOLtm{feval M σ psi} by definition of \HOLtm{Σ}. This is a contradiction. 

 Now let \HOLtm{w} denote \HOLtm{σ x} and \HOLtm{v} denote \HOLtm{σn x}, we claim that if we regard both \HOLtm{M} and \HOLtm{N} as modal models, then \HOLtm{w} and \HOLtm{v} are modal equivalent. To prove this, suppose \HOLtm{satis (folm2mm M) w phi} for a modal formula \HOLtm{phi}, then \HOLtm{(ST x phi) IN Σ} by Proposition \ref{5.4}, Proposition \ref{5.3} and the definition of \HOLtm{Σ}, hence \HOLtm{feval N σn (ST x phi)}. By these two propositions again, we can prove \HOLtm{satis (folm2mm N) v phi}. This proves \HOLtm{!phi. satis (folm2mm M) w phi ==> satis (folm2mm N) v phi}. Conversely, if \HOLtm{ ¬satis (folm2mm M) w (phi)}, then \HOLtm{satis (folm2mm M) w (NOT phi)} and we can deduce \HOLtm{ ¬satis (folm2mm N) v (phi)} by a symmetric argument. 

If modal equivalence implies bisimularity, then we are done: Suppose modal equivalence implies bisimularity, then as \HOLtm{w IN (folm2mm M).frame.world} and \HOLtm{v IN (folm2mm N).frame.world} are modal equivalent, there exists a bisimulation between them. As \HOLtm{δ} is invariant for bisimulation and is satisfied at \HOLtm{v}, then it is also satisfied at \HOLtm{w}. 

Although it is not always the case that modal equivalence implies bisimularity, we can take a detour with the help of Theorem \ref{6.15}. By \ref{6.15}, we obtain an ultrafilter $U$ on a set $J$ such that for the ultraproduct models \HOLtm{Mst = (ultraproduct_model U J (λj. folm2mm M))}
and
\HOLtm{Nst = (ultraproduct_model U J (λj. folm2mm N))}, the worlds \HOLtm[f/fw]{wst = {fw | Uequiv U J (models2worlds (λj. folm2mm M)) (λj. w) fw\}} and
\HOLtm[g/fv]{vst = {fv | Uequiv U J (models2worlds (λj. folm2mm N)) (λj. v) fv\}} are bisimilar. As \HOLtm{δ} is invariant for bisimulation, \HOLtm{δ} holds at \HOLtm{wst} in \HOLtm{(mm2folm Mst)} iff it holds at \HOLtm{vst} in \HOLtm{(mm2folm Nst)}. We are going to carry the \HOLtm{δ} from the model \HOLtm{N} where it is satisfied at $v$, to the point \HOLtm{vst} in \HOLtm{(mm2folm Nst)}, then to the point \HOLtm{wst} in \HOLtm{(mm2folm Mst)}, and finally to \HOLtm{w} in \HOLtm{M}. 

To carry \HOLtm{δ} around, it suffices to prove \HOLtm{feval M σ δ ⇔ feval (mm2folm Mst) (λx. wst) δ} and \HOLtm{feval N σn δ ⇔ feval (mm2folm Nst) (λx. vst) δ} under our assumptions by hand. These two equivalence are of the same pattern, hence we prove it as a lemma:

\begin{holmath}
  \HOLthm[J/I,j/i,:'a/:'b,δ/a,f/fw]{chap2_6.L1tau_ultraproduct_mm2folm_folm2mm_comm_feval}
\end{holmath}

The lemma holds by Proposition \ref{6.12}, \ref{6000} and \ref{5.3}. Hence we are done. 

\end{proof}

Now we have formalized both directions of the Van Benthem Characterization theorem. A reader may expect we can put them together to get a double implication. However, as we have already mentioned, we cannot get an `if an only if' result. To see the reason: given an $\mathcal L_{\tau}^1$-formula $\phi$ with no more then one free variable, by the result we have just proved, if \HOLtm{phi} is invariant under bisimulation for models with \HOLty{:(num -> α) -> bool}-worlds, then $\phi$ is equivalent to a standard translation on model with $\alpha$-worlds. However, if we want to prove the converse of this statement, we need to start with the assumption that $\phi$ is equivalent to a standard translation on models with $\alpha$-worlds, and prove that $\phi$ is invariant for bisimulation for models with \HOLty{:(num -> α) -> bool}-world. But according to 
Proposition \ref{5.6}, we can only conclude $\phi$ is invariant for bisimulation for models of type $\alpha$. If the type universe of \HOLty{:(num -> α) -> bool} is small enough to be embedded into $\alpha$, then we will also done. However, the cardinality of the universe of \HOLty{:(num -> α) -> bool} is larger than that of $\alpha$, and hence we cannot derive $\phi$ is invariant for bisimulation for models with \HOLty{:(num -> α) -> bool}-worlds from the fact that  $\phi$ is invariant for bisimulation for models with $\alpha$-worlds. 

We get into this situation because the statements we have proved for both directions are not precise translations of their set-theoretic statements. Consider the easy direction: its set-theoretic statement is that if $\phi$ is equivalent to a standard translation on models of every type, then it will be invariant for bisimulation on models of every type, whereas in our statement `if $\phi$ is equivalent to a standard translation on models of type $\alpha$, then it is invariant for models of type $\alpha$'. Both the assumption and the conclusion are weakened. We cannot encode the original statement in HOL, since we cannot quantify over types and refer to all the types to state `invariant for bisimulation for models of all types' and `equivalent to a standard translation on models of all types', just as the problem we encountered when defining equivalence of modal formulas. 
If we could quantify over types (as we could in a theorem prover based on dependent type theory), then we could prove `$\phi$ is invariant for bisimulation on models of every type if and only if $\phi$ is equivalent to a standard translation on models of every type' using the same proof we have written out. For the easy direction, the assumption is that $\phi$ is equivalent to a standard translation on models of every type, and we want to conclude that $\phi$ is invariant for bisimulation for models of type $\alpha$. But under assumption, the formula $\phi$ is equivalent to a standard translation on models of type $\alpha$ where $\alpha$ is an arbitrary type, so we prove the result by Proposition \ref{5.6}. Conversely, for the other direction, the assumption is that `$\phi$ is invariant for bisimulation on models of every type', and the goal is to prove $\phi$ is invariant on models of type $\alpha$ where $\alpha$ is an arbitrary type. By assumption, the formula $\phi$ is invariant for bisimulation on models of type \HOLty{:(num -> α) -> bool}, and the result follows from Theorem \ref{6.18}. 

%The fact that the two implications cannot be put together into an `if and only if' statement is an evidence to the restriction of  simple type theory.


\section[\texorpdfstring{Positive existential formulas and preservation under simulations
    }{Positive existential formulas and preservation under simulations}
]{\chaptermark{`Positive' formulas and simulation} Positive existential formulas and preservation under simulations}
\chaptermark{`Positive' formulas and simulation}
\label{CH:Chap}

There exists a concept of `half of a bisimulation', which is called \emph{simulation}. In this section, we are interested in the $\mathcal L_{\tau}^1$-formulas which are \emph{preserved under simulation}. We have a set-theoretic proof that these formulas can also be characterized using their syntax. This section aims to translate this characterization into simple type theory. For precisely the same reason as in the last section, after we translate the proof of implications in both directions, they cannot be unified into a double implication. Nevertheless, we will spell out our formalization of proofs for those two directions separately. 

As we expect, the clauses defining  simulation is `half of' the clauses for defining a bisimulation:

\begin{defn}
{\upshape\holref{\cite[Definition 2.77 (Simulations)]{Blackburn}}{chap2_7}{32}}
%[\holref{Simulation}{chap2_7}{32}]
A simulation $Z$ between two models \HOLtm{M1} and \HOLtm{M2} (notation: \HOLtm{sim M1 Z M2})  is a relation between their worlds such that for every \HOLtm{w1 IN M1.frame.world} and \HOLtm{w2 IN M2.frame.world}, if \HOLtm{Z} relates \HOLtm{w1} and \HOLtm{w2}, then we have:
\begin{itemize}
\item For each propositional letter which is satisfied at $w_1$, it is also satisfied at $w_2$.
\item If there is a world $v_1$ in \HOLtm{M1} such that \HOLtm{M1.frame.rel w1 v1}, then there exists a world \HOLtm{v2} in \HOLtm{M2} such that \HOLtm{M2.frame.rel w2 v2}, and moreover, $v_1$ and $v_2$ are related by $Z$. 
\end{itemize}
\begin{holmath}
  \HOLthm[def,w1/w,w2/w',M1/M,M2/M']{chap2_7.sim_def}
\end{holmath}
\end{defn}

 The concept which corresponds to `invariant for bisimulation' is `preserved under simulation'. In contrast to that of `invariant for bisimulation', the concept `preserved under simulation' is about modal formula. 

\begin{defn}
{\upshape\holref{\cite[Definition 2.77 (Preserved Under Simulations)]{Blackburn}}{chap2_7}{38}}
%[\holref{Preserved under simulation}{chap2_7}{38}]
A modal formula \HOLtm{phi} is preserved under simulation if once we have \HOLtm{w1 IN M1.frame.world} and \HOLtm{w2 IN M2.frame.world} with a simulation relating $w_1$ to $w_2$, then if \HOLtm{phi} is satisfied at $w_1$,  it is also satisfied at $w_2$.
\begin{holmath}
  \HOLthm[def,w1/w,w2/w',M1/M,M2/M',width=55]{prettyPrinting.pppreserved_under_sim_def}
\end{holmath}
\end{defn}
The predicate \HOLtm{preserved_under_sim} takes type parameters by the same reason as discussed when we define \HOLtm{invar4bisim}. 

The rest of the section aims to translate the proof that characterizes formulas preserved under bisimulation as \emph{positively existential formulas}. A positive existential formula is a modal formula which does not contain `negative' connectives. Such a formula is built up from $\top$, $\bot$ and propositional letters using only the connectives `$\land$',`$\lor$' or `$\Diamond$':


\begin{defn}
{\upshape\holref{\cite[Page 111 (Positive Existential)]{Blackburn}}{chap2_7}{44}}
%[\holref{Rules of positive existential formulas}{chap2_7}{44}]
The rules of positive existential formulas read:
\begin{itemize}
\item The formulas `$\bot$' and `$\top$' are positive existential.
\item A propositional letter standing alone is positive existential.
\item If $\phi_1$ and $\phi_2$ are both positive existential, then both their conjunction and their disjunction are positive existential.
\item Adding a diamond before a positive existential formula gives a positive existential formula.
\end{itemize}
\[
\begin{array}{c}
  \HOLthm[rule,conj1]{chap2_7.PE_rules} \ \ \ \ \ 
  \HOLthm[rule,conj2,width=30]{chap2_7.PE_rules} \ \ \ \ \ 
  \HOLthm[rule,conj3,width=20]{chap2_7.PE_rules} \ \ \ \ \
  \HOLthm[rule,conj4,width=80]{chap2_7.PE_rules} \ \ \ \ \ 
  \HOLthm[rule,conj5,width=80]{chap2_7.PE_rules} \ \ \ \ \ 
  \HOLthm[rule,conj6,phi/f,width=80]{chap2_7.PE_rules}
\end{array}
\]
\end{defn}
By induction, every big conjunction or disjunction of positive existential formulas is again a positive existential formula. We can immediately prove by induction on positive existential formulas that every positive existential formula is preserved under simulation, but the converse only holds for `good models'. In Chapter 5, we introduced the concept of M-saturated models, and we have already seen that they are `good' models, which gives equivalence between modal equivalence and bisimulation. It turns out that M-saturated models do not only give rise to nice properties about bisimulations, but also work well for simulations. 

\begin{prop}
{\upshape\holref{\cite[Exercise 2.7.1]{Blackburn}}{chap2_7}{364}}
%[\cite{Blackburn}{Exercise 2.7.1}, \holref{\texttt{exercise_2_7_1}}{chap2_7}{364}]
\label{6.19}
 Suppose \HOLtm{w1 IN M1.frame.world} and \HOLtm{w2 IN M2.frame.world} and the models \HOLtm{M1} and \HOLtm{M2} are both M-saturated. If for every positive existential formula $\phi$, the satisfaction of $\phi$ at $w_1$ implies the satisfaction of $\phi$ at $w_2$, then there exists a simulation relation between \HOLtm{M1} and \HOLtm{M2} which relates $w_1$ to $w_2$.  
\begin{holmath}
  \HOLthm[w1/w,w2/w',M1/M,M2/M',width=65]{prettyPrinting.ppexercise_2_7_1}
\end{holmath}
\end{prop}
\begin{proof}
Under the assumptions, the relation \HOLtm{Z} defined as \HOLtm{Z v1 v2} iff \HOLtm{ (!phi. (PE phi /\ satis M1 v1 phi) ==> satis M2 v2 phi)} is a simulation. Checking it is indeed a simulation is completely analogous to the proof of Proposition \ref{5.7}.
\end{proof}



As the last theorem that is proved in the project, we translate the proof of the theorem that says modal formulas which are preserved under simulations are exactly the ones which are equivalent to a positive existential formula into HOL. This proof will use a similar idea as the characterization theorem proved in the last section. But this time, we only need the modal version of compactness theorem and its corollary. 

\begin{thm}[\holref{Compactness of modal logic}{chap2_7}{206}]\label{6.20}
If $\alpha$ is an infinite type, then given a set \HOLtm{Δ} of \HOLty{:num}-modal formulas, if for every finite subset \HOLtm{Δ0 ⊆ Δ}, there exists a modal model \HOLtm{M} with $\alpha$-world set and a world \HOLtm{w IN M.frame.world} such that \HOLtm{satis M w phi} for every \HOLtm{phi IN Δ0}, then there exists a model with $\alpha$-world set and a world in \HOLtm{M} which satisfies all the modal formulas in \HOLtm{Δ}. 
\begin{holmath}
  \HOLthm[phi/f,Δ/s,Δ0/ss,width=60]{prettyPrinting.ppmodal_compactness_thm}
\end{holmath}
\end{thm}
\begin{proof}
By Proposition \ref{5.4} and Theorem \ref{6.16}.
\end{proof}

\begin{coro}[\holref{\texttt{modal_compactness_corollary}}{chap2_7}{277}]\label{6.21}
For $\alpha$ is an infinite type, given a modal formula \HOLtm{δ} and a set \HOLtm{Δ} of \HOLty{:num}-modal formulas, if for every modal model \HOLtm{M} with $\alpha$-world set, every world \HOLtm{w} which satisfies all the formulas in \HOLtm{Δ} will also satisfy \HOLtm{δ}, then there exists a finite subset \HOLtm{Δ0 ⊆ Δ} such that for a world $w$ in a model \HOLtm{M} with $\alpha$-world set, if every formula in \HOLtm{Δ0} is satisfied at $w$, then $a$ is satisfied at $w$.
\begin{holmath} \HOLthm[phi/f,Δ0/ss,Δ/s,δ/a,width=60]{prettyPrinting.ppmodal_compactness_corollary}
\end{holmath}
\end{coro}
\begin{proof}
Similar to the proof of Corollary \ref{6.17}. 
\end{proof}

All the modal formulas appearing in the above theorems are required to be \HOLty{:num}-formulas. That is because we need to appeal to standard translation to prove them, and the standard translation is only defined on \HOLty{:num}-modal formulas. Also, we require the assumption on infiniteness of the type universe since we use first-order compactness theorems to prove the above two theorems. 
 
For the same reason that we did it for Theorem \ref{6.18}, we only consider simulations between models of the same type here. 



\begin{thm}
{\upshape\holref{\cite[Theorem 2.78, hard direction]{Blackburn}}{chap2_7}{399}}
%[\cite{Blackburn}{Theorem 2.78}, hard direction,  \holref{\texttt{thm_2_78_half2}}{chap2_7}{399}]
Let $\beta$ be an infinite type. For each \HOLty{:num}-modal formula $\phi$, if $\phi$ is preserved under simulation on $(\HOLty{:num},\HOLty{:(β -> bool) -> bool})$-models, then there exists a positive existential \HOLty{:num}-modal formula which is equivalent to $\phi$ on $(\HOLty{:num},\HOLty{:β})$-models. 
\begin{holmath}
  \HOLthm[showtypes,varphi/phi0]{prettyPrinting.ppthm_2_78_half2}
\end{holmath}
\end{thm}
\begin{proof}
  Suppose $\phi$ is preserved under simulation for models of \HOLty{:(β -> bool) -> bool}-worlds. Consider the set \HOLtm{PEC} of positive existential formulas $\varphi$ such that for every $(\HOLty{:num},\HOLty{:β})$-model \HOLtm{M} and every world \HOLtm{w IN M.frame.world}, if all the formulas in \HOLtm{PEC} are satisfied at \HOLtm{w}, then \HOLtm{varphi} is satisfied at $w$. In HOL, the set \HOLtm{PEC} is defined as:
\begin{holmath}
\HOLtm[alltt,width=100]{PEC = {varphi | PE varphi /\ 
                          (!M w:β. (w IN M.frame.world /\
                               satis M w phi) ==> satis M w varphi)\}}
\end{holmath} 
By Corollary \ref{6.21}, if we can prove for every $(\HOLty{:num},\HOLty{:β})$-model \HOLtm{M} and \HOLtm{w IN M.frame.world}, \HOLtm{satis M w varphi} for all \HOLtm{varphi IN PEC} implies \HOLtm{satis M w phi}, then there exists a finite subset $S$ of \HOLtm{PEC} that entails $\phi$. This will prove $\phi$ is equivalent to the conjunction of all the formulas in $S$, which is again a positive existential formula.

Therefore, our task is to prove the entailment from \HOLtm{PEC} to $\phi$. Suppose \HOLtm{satis M w varphi} for all \HOLtm{varphi IN PEC} , we prove \HOLtm{satis M w phi}. Define \HOLtm{Γ={NOT psi | PE psi /\ satis M w (NOT psi)\}}. We claim that there exists a $(\HOLty{:num},\HOLty{:β})$-model with a world that satisfies the set \HOLtm{Γ ∪ {phi\}}. By Theorem \ref{6.20}, it suffices to prove each finite subset of \HOLtm{Γ ∪ {phi\}} is satisfied by some model. Suppose there exists a finite subset of \HOLtm{Γ ∪ {phi\}} which can be satisfied by no model, then there exists $\lnot\psi_0,\cdots,\lnot\psi_n\in$ \HOLtm{Γ} such that for every $(\HOLty{:num},\HOLty{:β})$-model \HOLtm{N} and every world $v$ of it, if \HOLtm{satis N (v:β) phi}, then there exists some $0\le i\le n$ such that ${\mathfrak N} ,\ v \ \Vdash \psi_i$. As all these $\psi$'s are positive existential, so does their big disjunction $\psi$, and hence \HOLtm{psi IN PEC}.  As \HOLtm{M} entails \HOLtm{PEC}, we have \HOLtm{satis M w psi}, and hence ${\mathfrak M}, \ w \Vdash \psi_i$  for some $i$ by definition of the $\psi$. But on other hand, ${\mathfrak M}, \ w \Vdash \lnot \psi_i$ for every $\psi_i$ by definition of \HOLtm{Γ}. This is a contradiction. 

Hence we obtain a model \HOLtm{N} such that every element in \HOLtm{Γ ∪ {phi\}} is satisfied at a point \HOLtm{v IN N.frame.world}. For every positive existential formula $\psi$ such that \HOLtm{¬satis M w psi}, we have \HOLtm{NOT psi IN Γ}, so \HOLtm{satis N v (NOT psi)}. Hence for every positive existential $\psi$, if \HOLtm{satis N v psi}, then \HOLtm{satis M w psi}. Consider the ultrafilter extensions \HOLtm{UE M} and \HOLtm{UE N}, we claim the worlds
\HOLtm{satis (UE N) (principle_UF v N.frame.world) psi} is related to the world
 \HOLtm{satis (UE M) (principle_UF w M.frame.world) psi} by a simulation. By Proposition \ref{6.19}, it suffices to prove that every positive existential formula which is satisfied at \HOLtm{satis (UE N) (principle_UF v N.frame.world) psi}  is also satisfied at \HOLtm{satis (UE M) (principle_UF w M.frame.world) psi}. Consider a positive existential $\psi$, \HOLtm{satis (UE N) (principle_UF v N.frame.world) psi} implies \HOLtm{satis N v psi}, by the discussion above, it implies \HOLtm{satis M w phi}, and hence implies \HOLtm{satis (UE M) (principle_UF w M.frame.world) psi} by Proposition \ref{5.19} again.

 

As \HOLtm{satis N v phi}, Proposition \ref{5.19} gives \HOLtm{satis (UE N) (principle_UF v N.frame.world) phi}, as $\phi$ is preserved under simulation, we have 
\HOLtm{satis (UE M) (principle_UF w M.frame.world) phi}. Again by Proposition \ref{5.19} , it implies \HOLtm{satis M w phi}. This completes the proof.
\end{proof}


\bibliography{everything}
\bibliographystyle{plain}

\end{document}

% Local variables:
% mode: latex
% End:
